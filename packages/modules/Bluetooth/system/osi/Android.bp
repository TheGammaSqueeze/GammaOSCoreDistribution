package {
    // See: http://go/android-license-faq
    // A large-scale-change added 'default_applicable_licenses' to import
    // all of the 'license_kinds' from "system_bt_license"
    // to get the below license kinds:
    //   SPDX-license-identifier-Apache-2.0
    //   SPDX-license-identifier-MIT
    default_applicable_licenses: ["system_bt_license"],
}

cc_defaults {
    name: "fluoride_osi_defaults",
    defaults: ["fluoride_defaults"],
    include_dirs: [
        "packages/modules/Bluetooth/system",
        "packages/modules/Bluetooth/system/gd",
        "packages/modules/Bluetooth/system/internal_include",
        "packages/modules/Bluetooth/system/utils/include",
        "packages/modules/Bluetooth/system/stack/include",
    ],
}

// Static libraries required by other modules
cc_test_library {
    name: "libosi-AllocationTestHarness",
    defaults: ["fluoride_osi_defaults"],
    srcs: [
        "test/AllocationTestHarness.cc",
    ],
    host_supported: true,
    shared: {
        enabled: false,
    },
}

cc_test_library {
    name: "libosi-AlarmTestHarness",
    defaults: ["fluoride_osi_defaults"],
    srcs: [
        "test/AlarmTestHarness.cc",
    ],
    host_supported: true,
    shared: {
        enabled: false,
    },
}

filegroup {
  name: "OsiCompatSources",
  srcs: [
    "src/compat.cc",
  ],
}

// libosi static library for target
cc_library_static {
    name: "libosi",
    visibility:[
        "//packages/apps/Test/connectivity/sl4n",
        "//packages/modules/Bluetooth:__subpackages__",
    ],
    defaults: ["fluoride_osi_defaults", "fluoride_basic_defaults"],
    // TODO(mcchou): Remove socket_utils sources after platform specific
    // dependencies are abstracted.
    srcs: [
        ":OsiCompatSources",
        "src/alarm.cc",
        "src/allocation_tracker.cc",
        "src/allocator.cc",
        "src/array.cc",
        "src/buffer.cc",
        "src/config.cc",
        "src/fixed_queue.cc",
        "src/future.cc",
        "src/hash_map_utils.cc",
        "src/list.cc",
        "src/mutex.cc",
        "src/osi.cc",
        "src/properties.cc",
        "src/reactor.cc",
        "src/ringbuffer.cc",
        "src/semaphore.cc",
        "src/socket.cc",
        "src/socket_utils/socket_local_client.cc",
        "src/socket_utils/socket_local_server.cc",
        "src/thread.cc",
        "src/thread_scheduler.cc",
        "src/wakelock.cc",
    ],
    host_supported: true,
    // TODO(armansito): Setting _GNU_SOURCE isn't very platform-independent but
    // should be compatible for a Linux host OS. We should figure out what to do for
    // a non-Linux host OS.
    target: {
        host_linux: {
            cflags: [
                "-D_GNU_SOURCE",
                "-DOS_GENERIC",
            ],
        },
    },
    min_sdk_version: "Tiramisu",
    apex_available: [
        "com.android.bluetooth",
    ],
}

// libosi unit tests for target and host
cc_test {
    name: "net_test_osi",
    test_suites: ["device-tests"],
    defaults: [
        "fluoride_osi_defaults",
        "mts_defaults",
    ],
    host_supported: true,
    srcs: [
        "test/AlarmTestHarness.cc",
        "test/AllocationTestHarness.cc",
        "test/alarm_test.cc",
        "test/allocation_tracker_test.cc",
        "test/allocator_test.cc",
        "test/array_test.cc",
        "test/config_test.cc",
        "test/fixed_queue_test.cc",
        "test/future_test.cc",
        "test/hash_map_utils_test.cc",
        "test/list_test.cc",
        "test/properties_test.cc",
        "test/rand_test.cc",
        "test/reactor_test.cc",
        "test/ringbuffer_test.cc",
        "test/semaphore_test.cc",
        "test/thread_test.cc",
        "test/wakelock_test.cc",
    ],
    shared_libs: [
        "android.hardware.bluetooth@1.0",
        "android.hardware.bluetooth@1.1",
        "libbase",
        "liblog",
        "libprotobuf-cpp-lite",
        "libcutils",
        "libcrypto",
    ],
    static_libs: [
        "libbt-common",
        "libbt-protos-lite",
        "libgmock",
        "libosi",
        "libc++fs",
    ],
    target: {
        host_linux: {
            cflags: ["-DOS_GENERIC"],
        },
    },
    sanitize: {
        cfi: false,
    },
}
