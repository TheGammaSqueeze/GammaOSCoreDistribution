// Signature format: 2.0
package android.car {

  public abstract class AoapService extends android.app.Service {
    ctor public AoapService();
    method @MainThread public int canSwitchToAoap(@NonNull android.hardware.usb.UsbDevice);
    method @MainThread public abstract int isDeviceSupported(@NonNull android.hardware.usb.UsbDevice);
    method public android.os.IBinder onBind(android.content.Intent);
    field public static final int RESULT_DEVICE_NOT_SUPPORTED = 1; // 0x1
    field public static final int RESULT_DO_NOT_SWITCH_TO_AOAP = 2; // 0x2
    field public static final int RESULT_OK = 0; // 0x0
  }

  public final class Car {
    method @RequiresPermission(android.car.Car.PERMISSION_CONTROL_CAR_FEATURES) public int disableFeature(@NonNull String);
    method @RequiresPermission(android.car.Car.PERMISSION_CONTROL_CAR_FEATURES) public int enableFeature(@NonNull String);
    method @NonNull @RequiresPermission(android.car.Car.PERMISSION_CONTROL_CAR_FEATURES) public java.util.List<java.lang.String> getAllEnabledFeatures();
    method @NonNull @RequiresPermission(android.car.Car.PERMISSION_CONTROL_CAR_FEATURES) public java.util.List<java.lang.String> getAllPendingDisabledFeatures();
    method @NonNull @RequiresPermission(android.car.Car.PERMISSION_CONTROL_CAR_FEATURES) public java.util.List<java.lang.String> getAllPendingEnabledFeatures();
    field public static final String ACCESS_PRIVATE_DISPLAY_ID = "android.car.permission.ACCESS_PRIVATE_DISPLAY_ID";
    field @Deprecated public static final String CABIN_SERVICE = "cabin";
    field public static final String CAR_ACTIVITY_SERVICE = "car_activity_service";
    field public static final String CAR_BUGREPORT_SERVICE = "car_bugreport";
    field public static final String CAR_DEVICE_POLICY_SERVICE = "car_device_policy_service";
    field public static final String CAR_DRIVING_STATE_SERVICE = "drivingstate";
    field public static final String CAR_EVS_SERVICE = "car_evs_service";
    field public static final String CAR_EXTRA_CLUSTER_ACTIVITY_STATE = "android.car.cluster.ClusterActivityState";
    field public static final String CAR_INPUT_SERVICE = "android.car.input";
    field public static final String CAR_MEDIA_SERVICE = "car_media";
    field public static final String CAR_PERFORMANCE_SERVICE = "car_performance";
    field public static final String CAR_TELEMETRY_SERVICE = "car_telemetry_service";
    field public static final String CAR_USER_SERVICE = "car_user_service";
    field public static final String DIAGNOSTIC_SERVICE = "diagnostic";
    field public static final int FEATURE_REQUEST_ALREADY_IN_THE_STATE = 1; // 0x1
    field public static final int FEATURE_REQUEST_MANDATORY = 2; // 0x2
    field public static final int FEATURE_REQUEST_NOT_EXISTING = 3; // 0x3
    field public static final int FEATURE_REQUEST_SUCCESS = 0; // 0x0
    field @Deprecated public static final String HVAC_SERVICE = "hvac";
    field public static final String OCCUPANT_AWARENESS_SERVICE = "occupant_awareness";
    field public static final String PERMISSION_ADJUST_RANGE_REMAINING = "android.car.permission.ADJUST_RANGE_REMAINING";
    field public static final String PERMISSION_CAR_DIAGNOSTIC_CLEAR = "android.car.permission.CLEAR_CAR_DIAGNOSTICS";
    field public static final String PERMISSION_CAR_DIAGNOSTIC_READ_ALL = "android.car.permission.CAR_DIAGNOSTICS";
    field public static final String PERMISSION_CAR_DRIVING_STATE = "android.car.permission.CAR_DRIVING_STATE";
    field public static final String PERMISSION_CAR_DYNAMICS_STATE = "android.car.permission.CAR_DYNAMICS_STATE";
    field public static final String PERMISSION_CAR_ENGINE_DETAILED = "android.car.permission.CAR_ENGINE_DETAILED";
    field public static final String PERMISSION_CAR_EPOCH_TIME = "android.car.permission.CAR_EPOCH_TIME";
    field public static final String PERMISSION_CAR_INSTRUMENT_CLUSTER_CONTROL = "android.car.permission.CAR_INSTRUMENT_CLUSTER_CONTROL";
    field public static final String PERMISSION_CAR_MONITOR_INPUT = "android.car.permission.CAR_MONITOR_INPUT";
    field public static final String PERMISSION_CAR_POWER = "android.car.permission.CAR_POWER";
    field public static final String PERMISSION_CAR_PROJECTION = "android.car.permission.CAR_PROJECTION";
    field public static final String PERMISSION_CAR_PROJECTION_STATUS = "android.car.permission.ACCESS_CAR_PROJECTION_STATUS";
    field public static final String PERMISSION_CAR_TEST_SERVICE = "android.car.permission.CAR_TEST_SERVICE";
    field public static final String PERMISSION_CAR_UX_RESTRICTIONS_CONFIGURATION = "android.car.permission.CAR_UX_RESTRICTIONS_CONFIGURATION";
    field public static final String PERMISSION_COLLECT_CAR_WATCHDOG_METRICS = "android.car.permission.COLLECT_CAR_WATCHDOG_METRICS";
    field public static final String PERMISSION_CONTROL_APP_BLOCKING = "android.car.permission.CONTROL_APP_BLOCKING";
    field public static final String PERMISSION_CONTROL_CAR_APP_LAUNCH = "android.car.permission.CONTROL_CAR_APP_LAUNCH";
    field public static final String PERMISSION_CONTROL_CAR_CLIMATE = "android.car.permission.CONTROL_CAR_CLIMATE";
    field public static final String PERMISSION_CONTROL_CAR_DOORS = "android.car.permission.CONTROL_CAR_DOORS";
    field public static final String PERMISSION_CONTROL_CAR_EVS_ACTIVITY = "android.car.permission.CONTROL_CAR_EVS_ACTIVITY";
    field public static final String PERMISSION_CONTROL_CAR_FEATURES = "android.car.permission.CONTROL_CAR_FEATURES";
    field public static final String PERMISSION_CONTROL_CAR_MIRRORS = "android.car.permission.CONTROL_CAR_MIRRORS";
    field @Deprecated public static final String PERMISSION_CONTROL_CAR_OCCUPANT_AWARENESS_SYSTEM = "android.car.permission.CONTROL_CAR_OCCUPANT_AWARENESS_SYSTEM";
    field public static final String PERMISSION_CONTROL_CAR_POWER_POLICY = "android.car.permission.CONTROL_CAR_POWER_POLICY";
    field public static final String PERMISSION_CONTROL_CAR_SEATS = "android.car.permission.CONTROL_CAR_SEATS";
    field public static final String PERMISSION_CONTROL_CAR_WATCHDOG_CONFIG = "android.car.permission.CONTROL_CAR_WATCHDOG_CONFIG";
    field public static final String PERMISSION_CONTROL_CAR_WINDOWS = "android.car.permission.CONTROL_CAR_WINDOWS";
    field public static final String PERMISSION_CONTROL_ENERGY_PORTS = "android.car.permission.CONTROL_CAR_ENERGY_PORTS";
    field public static final String PERMISSION_CONTROL_EXTERIOR_LIGHTS = "android.car.permission.CONTROL_CAR_EXTERIOR_LIGHTS";
    field public static final String PERMISSION_CONTROL_SHUTDOWN_PROCESS = "android.car.permission.CONTROL_SHUTDOWN_PROCESS";
    field public static final String PERMISSION_EXTERIOR_LIGHTS = "android.car.permission.CAR_EXTERIOR_LIGHTS";
    field @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_1, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_1) public static final String PERMISSION_MANAGE_THREAD_PRIORITY = "android.car.permission.MANAGE_THREAD_PRIORITY";
    field public static final String PERMISSION_MILEAGE = "android.car.permission.CAR_MILEAGE";
    field @Deprecated public static final String PERMISSION_MOCK_VEHICLE_HAL = "android.car.permission.CAR_MOCK_VEHICLE_HAL";
    field public static final String PERMISSION_MONITOR_CAR_EVS_STATUS = "android.car.permission.MONITOR_CAR_EVS_STATUS";
    field public static final String PERMISSION_READ_CAR_OCCUPANT_AWARENESS_STATE = "android.car.permission.READ_CAR_OCCUPANT_AWARENESS_STATE";
    field public static final String PERMISSION_READ_CAR_VENDOR_PERMISSION_INFO = "android.car.permission.READ_CAR_VENDOR_PERMISSION_INFO";
    field public static final String PERMISSION_RECEIVE_CAR_AUDIO_DUCKING_EVENTS = "android.car.permission.RECEIVE_CAR_AUDIO_DUCKING_EVENTS";
    field public static final String PERMISSION_REQUEST_CAR_EVS_ACTIVITY = "android.car.permission.REQUEST_CAR_EVS_ACTIVITY";
    field public static final String PERMISSION_STORAGE_ENCRYPTION_BINDING_SEED = "android.car.permission.STORAGE_ENCRYPTION_BINDING_SEED";
    field public static final String PERMISSION_STORAGE_MONITORING = "android.car.permission.STORAGE_MONITORING";
    field public static final String PERMISSION_TEMPLATE_RENDERER = "android.car.permission.TEMPLATE_RENDERER";
    field public static final String PERMISSION_TIRES = "android.car.permission.CAR_TIRES";
    field public static final String PERMISSION_USE_CAR_EVS_CAMERA = "android.car.permission.USE_CAR_EVS_CAMERA";
    field public static final String PERMISSION_USE_CAR_TELEMETRY_SERVICE = "android.car.permission.USE_CAR_TELEMETRY_SERVICE";
    field public static final String PERMISSION_USE_CAR_WATCHDOG = "android.car.permission.USE_CAR_WATCHDOG";
    field public static final String PERMISSION_VENDOR_EXTENSION = "android.car.permission.CAR_VENDOR_EXTENSION";
    field public static final String PERMISSION_VMS_PUBLISHER = "android.car.permission.VMS_PUBLISHER";
    field public static final String PERMISSION_VMS_SUBSCRIBER = "android.car.permission.VMS_SUBSCRIBER";
    field public static final String PROJECTION_SERVICE = "projection";
    field @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_1, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public static final String PROPERTY_EMULATED_PLATFORM_VERSION_MAJOR = "com.android.car.internal.debug.platform_major_version";
    field @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_1, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public static final String PROPERTY_EMULATED_PLATFORM_VERSION_MINOR = "com.android.car.internal.debug.platform_minor_version";
    field public static final String STORAGE_MONITORING_SERVICE = "storage_monitoring";
    field public static final String TEST_SERVICE = "car-service-test";
    field public static final String VEHICLE_MAP_SERVICE = "vehicle_map_service";
    field @Deprecated public static final String VENDOR_EXTENSION_SERVICE = "vendor_extension";
    field @Deprecated public static final String VMS_SUBSCRIBER_SERVICE = "vehicle_map_subscriber_service";
  }

  public final class CarAppFocusManager {
    method public int[] getActiveAppTypes();
  }

  public final class CarBugreportManager {
    method @RequiresPermission(android.Manifest.permission.DUMP) public void cancelBugreport();
    method @RequiresPermission(android.Manifest.permission.DUMP) public void requestBugreport(@NonNull android.os.ParcelFileDescriptor, @NonNull android.os.ParcelFileDescriptor, @NonNull android.car.CarBugreportManager.CarBugreportManagerCallback);
  }

  public abstract static class CarBugreportManager.CarBugreportManagerCallback {
    ctor public CarBugreportManager.CarBugreportManagerCallback();
    method public void onError(int);
    method public void onFinished();
    method public void onProgress(@FloatRange(from=0.0f, to=100.0f) float);
    field public static final int CAR_BUGREPORT_DUMPSTATE_CONNECTION_FAILED = 3; // 0x3
    field public static final int CAR_BUGREPORT_DUMPSTATE_FAILED = 1; // 0x1
    field public static final int CAR_BUGREPORT_IN_PROGRESS = 2; // 0x2
    field public static final int CAR_BUGREPORT_SERVICE_NOT_AVAILABLE = 4; // 0x4
  }

  public class CarOccupantZoneManager {
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_CONTROL_AUDIO_SETTINGS) public int getAudioZoneIdForOccupant(@NonNull android.car.CarOccupantZoneManager.OccupantZoneInfo);
    method @RequiresPermission(android.car.Car.ACCESS_PRIVATE_DISPLAY_ID) public int getDisplayIdForDriver(int);
    method @Nullable @RequiresPermission(android.car.Car.PERMISSION_CAR_CONTROL_AUDIO_SETTINGS) public android.car.CarOccupantZoneManager.OccupantZoneInfo getOccupantForAudioZoneId(int);
  }

  public final class CarProjectionManager {
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_PROJECTION) public void addKeyEventHandler(@NonNull java.util.Set<java.lang.Integer>, @NonNull android.car.CarProjectionManager.ProjectionKeyEventHandler);
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_PROJECTION) public void addKeyEventHandler(@NonNull java.util.Set<java.lang.Integer>, @Nullable java.util.concurrent.Executor, @NonNull android.car.CarProjectionManager.ProjectionKeyEventHandler);
    method @NonNull @RequiresPermission(android.car.Car.PERMISSION_CAR_PROJECTION) public java.util.List<java.lang.Integer> getAvailableWifiChannels(int);
    method @NonNull @RequiresPermission(android.car.Car.PERMISSION_CAR_PROJECTION) public android.os.Bundle getProjectionOptions();
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_PROJECTION) public void registerProjectionListener(@NonNull android.car.CarProjectionManager.CarProjectionListener, int);
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_PROJECTION) public void registerProjectionRunner(@NonNull android.content.Intent);
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_PROJECTION_STATUS) public void registerProjectionStatusListener(@NonNull android.car.CarProjectionManager.ProjectionStatusListener);
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_PROJECTION) public boolean releaseBluetoothProfileInhibit(@NonNull android.bluetooth.BluetoothDevice, int);
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_PROJECTION) public void removeKeyEventHandler(@NonNull android.car.CarProjectionManager.ProjectionKeyEventHandler);
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_PROJECTION) public boolean requestBluetoothProfileInhibit(@NonNull android.bluetooth.BluetoothDevice, int);
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_PROJECTION) public void resetProjectionAccessPointCredentials();
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_PROJECTION) public void startProjectionAccessPoint(@NonNull android.car.CarProjectionManager.ProjectionAccessPointCallback);
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_PROJECTION) public void stopProjectionAccessPoint();
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_PROJECTION) public void unregisterProjectionListener();
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_PROJECTION) public void unregisterProjectionRunner(@NonNull android.content.Intent);
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_PROJECTION_STATUS) public void unregisterProjectionStatusListener(@NonNull android.car.CarProjectionManager.ProjectionStatusListener);
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_PROJECTION) public void updateProjectionStatus(@NonNull android.car.projection.ProjectionStatus);
    field public static final int KEY_EVENT_CALL_KEY_DOWN = 4; // 0x4
    field public static final int KEY_EVENT_CALL_LONG_PRESS_KEY_DOWN = 6; // 0x6
    field public static final int KEY_EVENT_CALL_LONG_PRESS_KEY_UP = 7; // 0x7
    field public static final int KEY_EVENT_CALL_SHORT_PRESS_KEY_UP = 5; // 0x5
    field public static final int KEY_EVENT_VOICE_SEARCH_KEY_DOWN = 0; // 0x0
    field public static final int KEY_EVENT_VOICE_SEARCH_LONG_PRESS_KEY_DOWN = 2; // 0x2
    field public static final int KEY_EVENT_VOICE_SEARCH_LONG_PRESS_KEY_UP = 3; // 0x3
    field public static final int KEY_EVENT_VOICE_SEARCH_SHORT_PRESS_KEY_UP = 1; // 0x1
    field @Deprecated public static final int PROJECTION_LONG_PRESS_VOICE_SEARCH = 2; // 0x2
    field @Deprecated public static final int PROJECTION_VOICE_SEARCH = 1; // 0x1
  }

  public static interface CarProjectionManager.CarProjectionListener {
    method public void onVoiceAssistantRequest(boolean);
  }

  public abstract static class CarProjectionManager.ProjectionAccessPointCallback {
    ctor public CarProjectionManager.ProjectionAccessPointCallback();
    method public void onFailed(int);
    method @Deprecated public void onStarted(@Nullable android.net.wifi.WifiConfiguration);
    method public void onStarted(@NonNull android.net.wifi.SoftApConfiguration);
    method public void onStopped();
    field public static final int ERROR_GENERIC = 2; // 0x2
    field public static final int ERROR_INCOMPATIBLE_MODE = 3; // 0x3
    field public static final int ERROR_NO_CHANNEL = 1; // 0x1
    field public static final int ERROR_TETHERING_DISALLOWED = 4; // 0x4
  }

  public static interface CarProjectionManager.ProjectionKeyEventHandler {
    method public void onKeyEvent(int);
  }

  public static interface CarProjectionManager.ProjectionStatusListener {
    method public void onProjectionStatusChanged(int, @Nullable String, @NonNull java.util.List<android.car.projection.ProjectionStatus>);
  }

  @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_1, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public static class CarVersion.VERSION_CODES {
    field @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public static final android.car.CarVersion TIRAMISU_3;
  }

  @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_1, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public static class PlatformVersion.VERSION_CODES {
    field @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public static final android.car.PlatformVersion TIRAMISU_3;
  }

  public final class VehicleAreaDoor {
    field public static final int DOOR_HOOD = 268435456; // 0x10000000
    field public static final int DOOR_REAR = 536870912; // 0x20000000
    field public static final int DOOR_ROW_1_LEFT = 1; // 0x1
    field public static final int DOOR_ROW_1_RIGHT = 4; // 0x4
    field public static final int DOOR_ROW_2_LEFT = 16; // 0x10
    field public static final int DOOR_ROW_2_RIGHT = 64; // 0x40
    field public static final int DOOR_ROW_3_LEFT = 256; // 0x100
    field public static final int DOOR_ROW_3_RIGHT = 1024; // 0x400
  }

  public final class VehicleAreaMirror {
    field public static final int MIRROR_DRIVER_CENTER = 4; // 0x4
    field public static final int MIRROR_DRIVER_LEFT = 1; // 0x1
    field public static final int MIRROR_DRIVER_RIGHT = 2; // 0x2
  }

  public final class VehicleAreaWindow {
    field public static final int WINDOW_FRONT_WINDSHIELD = 1; // 0x1
    field public static final int WINDOW_REAR_WINDSHIELD = 2; // 0x2
    field public static final int WINDOW_ROOF_TOP_1 = 65536; // 0x10000
    field public static final int WINDOW_ROOF_TOP_2 = 131072; // 0x20000
    field public static final int WINDOW_ROW_1_LEFT = 16; // 0x10
    field public static final int WINDOW_ROW_1_RIGHT = 64; // 0x40
    field public static final int WINDOW_ROW_2_LEFT = 256; // 0x100
    field public static final int WINDOW_ROW_2_RIGHT = 1024; // 0x400
    field public static final int WINDOW_ROW_3_LEFT = 4096; // 0x1000
    field public static final int WINDOW_ROW_3_RIGHT = 16384; // 0x4000
  }

  public final class VehiclePropertyAccess {
    field public static final int NONE = 0; // 0x0
    field public static final int READ = 1; // 0x1
    field public static final int READ_WRITE = 3; // 0x3
    field public static final int WRITE = 2; // 0x2
  }

  public final class VehiclePropertyIds {
    field @RequiresPermission(android.car.Car.PERMISSION_CONTROL_CAR_CLIMATE) public static final int HVAC_ELECTRIC_DEFROSTER_ON = 320865556; // 0x13200514
  }

  public class VehiclePropertyType {
    field public static final int BOOLEAN = 2097152; // 0x200000
    field public static final int BYTES = 7340032; // 0x700000
    field public static final int FLOAT = 6291456; // 0x600000
    field public static final int FLOAT_VEC = 6356992; // 0x610000
    field public static final int INT32 = 4194304; // 0x400000
    field public static final int INT32_VEC = 4259840; // 0x410000
    field public static final int INT64 = 5242880; // 0x500000
    field public static final int INT64_VEC = 5308416; // 0x510000
    field public static final int MASK = 16711680; // 0xff0000
    field public static final int MIXED = 14680064; // 0xe00000
    field public static final int STRING = 1048576; // 0x100000
  }

  public final class VehicleUnit {
    field public static final int DEGREES = 128; // 0x80
    field public static final int HERTZ = 3; // 0x3
    field public static final int MILLIAMPERE = 97; // 0x61
    field public static final int MILLIVOLT = 98; // 0x62
    field public static final int MILLIWATTS = 99; // 0x63
    field public static final int NANO_SECS = 80; // 0x50
    field public static final int PERCENTILE = 16; // 0x10
    field public static final int RPM = 2; // 0x2
    field public static final int SECS = 83; // 0x53
    field public static final int SHOULD_NOT_USE = 0; // 0x0
    field public static final int YEAR = 89; // 0x59
  }

}

package android.car.admin {

  public final class CarDevicePolicyManager {
    method @NonNull @RequiresPermission(anyOf={android.Manifest.permission.MANAGE_USERS, android.Manifest.permission.CREATE_USERS}) public android.car.admin.CreateUserResult createUser(@Nullable String, int);
    method @NonNull @RequiresPermission(anyOf={android.Manifest.permission.MANAGE_USERS, android.Manifest.permission.CREATE_USERS}) public android.car.admin.RemoveUserResult removeUser(@NonNull android.os.UserHandle);
    method @NonNull @RequiresPermission(anyOf={android.Manifest.permission.MANAGE_USERS, android.Manifest.permission.CREATE_USERS}) public android.car.admin.StartUserInBackgroundResult startUserInBackground(@NonNull android.os.UserHandle);
    method @NonNull @RequiresPermission(anyOf={android.Manifest.permission.MANAGE_USERS, android.Manifest.permission.CREATE_USERS}) public android.car.admin.StopUserResult stopUser(@NonNull android.os.UserHandle);
    field public static final int USER_TYPE_ADMIN = 1; // 0x1
    field public static final int USER_TYPE_GUEST = 2; // 0x2
    field public static final int USER_TYPE_REGULAR = 0; // 0x0
  }

  public final class CreateUserResult {
    method public int getStatus();
    method @Nullable public android.os.UserHandle getUserHandle();
    method public boolean isSuccess();
    field public static final int STATUS_FAILURE_GENERIC = 100; // 0x64
    field public static final int STATUS_FAILURE_INVALID_ARGUMENTS = 2; // 0x2
    field public static final int STATUS_SUCCESS = 1; // 0x1
  }

  public final class RemoveUserResult {
    method public int getStatus();
    method public boolean isSuccess();
    field public static final int STATUS_FAILURE_GENERIC = 100; // 0x64
    field public static final int STATUS_FAILURE_INVALID_ARGUMENTS = 5; // 0x5
    field public static final int STATUS_FAILURE_USER_DOES_NOT_EXIST = 4; // 0x4
    field public static final int STATUS_SUCCESS = 1; // 0x1
    field public static final int STATUS_SUCCESS_LAST_ADMIN_REMOVED = 2; // 0x2
    field public static final int STATUS_SUCCESS_LAST_ADMIN_SET_EPHEMERAL = 6; // 0x6
    field public static final int STATUS_SUCCESS_SET_EPHEMERAL = 3; // 0x3
  }

  public final class StartUserInBackgroundResult {
    method public int getStatus();
    method public boolean isSuccess();
    field public static final int STATUS_FAILURE_GENERIC = 100; // 0x64
    field public static final int STATUS_FAILURE_USER_DOES_NOT_EXIST = 3; // 0x3
    field public static final int STATUS_SUCCESS = 1; // 0x1
    field public static final int STATUS_SUCCESS_CURRENT_USER = 2; // 0x2
  }

  public final class StopUserResult {
    method public int getStatus();
    method public boolean isSuccess();
    field public static final int STATUS_FAILURE_CURRENT_USER = 2; // 0x2
    field public static final int STATUS_FAILURE_GENERIC = 100; // 0x64
    field public static final int STATUS_FAILURE_SYSTEM_USER = 3; // 0x3
    field public static final int STATUS_FAILURE_USER_DOES_NOT_EXIST = 4; // 0x4
    field public static final int STATUS_SUCCESS = 1; // 0x1
  }

}

package android.car.annotation {

  @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME) @java.lang.annotation.Target({java.lang.annotation.ElementType.ANNOTATION_TYPE, java.lang.annotation.ElementType.FIELD, java.lang.annotation.ElementType.TYPE, java.lang.annotation.ElementType.METHOD}) public @interface ApiRequirements {
    method public abstract android.car.annotation.ApiRequirements.CarVersion minCarVersion();
    method public abstract android.car.annotation.ApiRequirements.PlatformVersion minPlatformVersion();
  }

  public enum ApiRequirements.CarVersion {
    method public android.car.CarVersion get();
    enum_constant public static final android.car.annotation.ApiRequirements.CarVersion TIRAMISU_0;
    enum_constant public static final android.car.annotation.ApiRequirements.CarVersion TIRAMISU_1;
    enum_constant public static final android.car.annotation.ApiRequirements.CarVersion TIRAMISU_2;
    enum_constant public static final android.car.annotation.ApiRequirements.CarVersion TIRAMISU_3;
  }

  public enum ApiRequirements.PlatformVersion {
    method public android.car.PlatformVersion get();
    enum_constant public static final android.car.annotation.ApiRequirements.PlatformVersion TIRAMISU_0;
    enum_constant public static final android.car.annotation.ApiRequirements.PlatformVersion TIRAMISU_1;
    enum_constant public static final android.car.annotation.ApiRequirements.PlatformVersion TIRAMISU_2;
    enum_constant public static final android.car.annotation.ApiRequirements.PlatformVersion TIRAMISU_3;
  }

}

package android.car.app {

  public final class CarActivityManager {
    method @RequiresPermission(android.car.Car.PERMISSION_CONTROL_CAR_APP_LAUNCH) public int setPersistentActivity(@NonNull android.content.ComponentName, int, int);
    field public static final int RESULT_FAILURE = -1; // 0xffffffff
    field public static final int RESULT_INVALID_USER = -2; // 0xfffffffe
    field public static final int RESULT_SUCCESS = 0; // 0x0
  }

}

package android.car.cluster {

  @Deprecated public class CarInstrumentClusterManager {
    method @Deprecated public void registerCallback(String, android.car.cluster.CarInstrumentClusterManager.Callback);
    method @Deprecated public void startActivity(android.content.Intent);
    method @Deprecated public void unregisterCallback(android.car.cluster.CarInstrumentClusterManager.Callback);
    field @Deprecated public static final String CATEGORY_NAVIGATION = "android.car.cluster.NAVIGATION";
    field @Deprecated public static final String KEY_EXTRA_ACTIVITY_STATE = "android.car.cluster.ClusterActivityState";
  }

  @Deprecated public static interface CarInstrumentClusterManager.Callback {
    method @Deprecated public void onClusterActivityStateChanged(String, android.os.Bundle);
  }

  public final class ClusterActivityState {
    method @NonNull public static android.car.cluster.ClusterActivityState create(boolean, @NonNull android.graphics.Rect);
    method @NonNull public static android.car.cluster.ClusterActivityState fromBundle(@NonNull android.os.Bundle);
    method @Nullable public android.os.Bundle getExtras();
    method @Nullable public android.graphics.Rect getUnobscuredBounds();
    method public boolean isVisible();
    method @NonNull public android.car.cluster.ClusterActivityState setExtras(@NonNull android.os.Bundle);
    method @NonNull public android.car.cluster.ClusterActivityState setUnobscuredBounds(@NonNull android.graphics.Rect);
    method @NonNull public android.car.cluster.ClusterActivityState setVisible(boolean);
    method @NonNull public android.os.Bundle toBundle();
  }

}

package android.car.cluster.renderer {

  @Deprecated public abstract class InstrumentClusterRenderer {
    ctor @Deprecated public InstrumentClusterRenderer();
    method @Deprecated protected abstract android.car.cluster.renderer.NavigationRenderer createNavigationRenderer();
    method @Deprecated @Nullable public android.car.cluster.renderer.NavigationRenderer getNavigationRenderer();
    method @Deprecated @UiThread public final void initialize();
    method @Deprecated public abstract void onCreate(android.content.Context);
    method @Deprecated public abstract void onStart();
    method @Deprecated public abstract void onStop();
  }

  public abstract class InstrumentClusterRenderingService extends android.app.Service {
    ctor public InstrumentClusterRenderingService();
    method @Deprecated @Nullable public android.graphics.Bitmap getBitmap(android.net.Uri);
    method @Nullable public android.graphics.Bitmap getBitmap(@NonNull android.net.Uri, int, int);
    method @Nullable public android.graphics.Bitmap getBitmap(@NonNull android.net.Uri, int, int, float);
    method @MainThread @Nullable public abstract android.car.cluster.renderer.NavigationRenderer getNavigationRenderer();
    method @CallSuper public android.os.IBinder onBind(android.content.Intent);
    method @MainThread public void onKeyEvent(@NonNull android.view.KeyEvent);
    method @MainThread public void onNavigationComponentLaunched();
    method @MainThread public void onNavigationComponentReleased();
    method public void setClusterActivityLaunchOptions(@NonNull android.app.ActivityOptions);
    method public void setClusterActivityState(@NonNull android.car.cluster.ClusterActivityState);
    method public boolean startFixedActivityModeForDisplayAndUser(@NonNull android.content.Intent, @NonNull android.app.ActivityOptions, int);
    method protected boolean startNavigationActivity(@NonNull android.content.ComponentName);
    method public void stopFixedActivityMode(int);
  }

  @UiThread public abstract class NavigationRenderer {
    ctor public NavigationRenderer();
    method public abstract android.car.navigation.CarNavigationInstrumentCluster getNavigationProperties();
    method public void onNavigationStateChanged(@Nullable android.os.Bundle);
  }

}

package android.car.content.pm {

  public final class AppBlockingPackageInfo implements android.os.Parcelable {
    ctor public AppBlockingPackageInfo(String, int, int, int, @Nullable android.content.pm.Signature[], @Nullable String[]);
    ctor public AppBlockingPackageInfo(android.os.Parcel);
    method public int describeContents();
    method public void writeToParcel(android.os.Parcel, int);
    field public static final android.os.Parcelable.Creator<android.car.content.pm.AppBlockingPackageInfo> CREATOR;
    field public static final int FLAG_SYSTEM_APP = 1; // 0x1
    field public static final int FLAG_WHOLE_ACTIVITY = 2; // 0x2
    field public final String[] activities;
    field public final int flags;
    field public final int maxRevisionCode;
    field public final int minRevisionCode;
    field public final String packageName;
    field public final android.content.pm.Signature[] signatures;
  }

  public final class CarAppBlockingPolicy implements android.os.Parcelable {
    ctor public CarAppBlockingPolicy(android.car.content.pm.AppBlockingPackageInfo[], android.car.content.pm.AppBlockingPackageInfo[]);
    ctor public CarAppBlockingPolicy(android.os.Parcel);
    method public int describeContents();
    method public void writeToParcel(android.os.Parcel, int);
    field public static final android.os.Parcelable.Creator<android.car.content.pm.CarAppBlockingPolicy> CREATOR;
    field public final android.car.content.pm.AppBlockingPackageInfo[] blacklists;
    field public final android.car.content.pm.AppBlockingPackageInfo[] whitelists;
  }

  public abstract class CarAppBlockingPolicyService extends android.app.Service {
    ctor public CarAppBlockingPolicyService();
    method protected abstract android.car.content.pm.CarAppBlockingPolicy getAppBlockingPolicy();
    method public android.os.IBinder onBind(android.content.Intent);
    field public static final String SERVICE_INTERFACE = "android.car.content.pm.CarAppBlockingPolicyService";
  }

  public final class CarPackageManager {
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_1, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull @RequiresPermission(android.Manifest.permission.QUERY_ALL_PACKAGES) public android.car.CarVersion getTargetCarVersion(@NonNull String) throws android.content.pm.PackageManager.NameNotFoundException;
    method public boolean isActivityBackedBySafeActivity(android.content.ComponentName);
    method @Deprecated public void setAppBlockingPolicy(String, android.car.content.pm.CarAppBlockingPolicy, int);
    method public void setEnableActivityBlocking(boolean);
    field @Deprecated public static final int FLAG_SET_POLICY_ADD = 2; // 0x2
    field @Deprecated public static final int FLAG_SET_POLICY_REMOVE = 4; // 0x4
    field @Deprecated public static final int FLAG_SET_POLICY_WAIT_FOR_CHANGE = 1; // 0x1
  }

}

package android.car.diagnostic {

  public final class CarDiagnosticEvent implements android.os.Parcelable {
    ctor public CarDiagnosticEvent(android.os.Parcel);
    method public int describeContents();
    method @android.car.diagnostic.CarDiagnosticEvent.FuelSystemStatus.Status @Nullable public Integer getFuelSystemStatus();
    method @android.car.diagnostic.CarDiagnosticEvent.FuelType.Type @Nullable public Integer getFuelType();
    method @Nullable public android.car.diagnostic.CarDiagnosticEvent.CommonIgnitionMonitors getIgnitionMonitors();
    method @android.car.diagnostic.CarDiagnosticEvent.SecondaryAirStatus.Status @Nullable public Integer getSecondaryAirStatus();
    method public float getSystemFloatSensor(int, float);
    method @Nullable public Float getSystemFloatSensor(int);
    method public int getSystemIntegerSensor(int, int);
    method @Nullable public Integer getSystemIntegerSensor(int);
    method public float getVendorFloatSensor(int, float);
    method @Nullable public Float getVendorFloatSensor(int);
    method public int getVendorIntegerSensor(int, int);
    method @Nullable public Integer getVendorIntegerSensor(int);
    method public boolean isFreezeFrame();
    method public boolean isLiveFrame();
    method public void writeToJson(android.util.JsonWriter) throws java.io.IOException;
    method public void writeToParcel(android.os.Parcel, int);
    field public static final android.os.Parcelable.Creator<android.car.diagnostic.CarDiagnosticEvent> CREATOR;
    field public final String dtc;
    field public final int frameType;
    field public final long timestamp;
  }

  public static class CarDiagnosticEvent.Builder {
    method @Deprecated public android.car.diagnostic.CarDiagnosticEvent.Builder atTimestamp(long);
    method public android.car.diagnostic.CarDiagnosticEvent build();
    method public static android.car.diagnostic.CarDiagnosticEvent.Builder newFreezeFrameBuilder();
    method public static android.car.diagnostic.CarDiagnosticEvent.Builder newLiveFrameBuilder();
    method public android.car.diagnostic.CarDiagnosticEvent.Builder setDtc(String);
    method public android.car.diagnostic.CarDiagnosticEvent.Builder setFloatValue(int, float);
    method public android.car.diagnostic.CarDiagnosticEvent.Builder setIntValue(int, int);
    method public android.car.diagnostic.CarDiagnosticEvent.Builder setTimeStamp(long);
    method @Deprecated public android.car.diagnostic.CarDiagnosticEvent.Builder withDtc(String);
    method @Deprecated public android.car.diagnostic.CarDiagnosticEvent.Builder withFloatValue(int, float);
    method @Deprecated public android.car.diagnostic.CarDiagnosticEvent.Builder withIntValue(int, int);
  }

  public static class CarDiagnosticEvent.CommonIgnitionMonitors {
    method @Nullable public android.car.diagnostic.CarDiagnosticEvent.CompressionIgnitionMonitors asCompressionIgnitionMonitors();
    method @Nullable public android.car.diagnostic.CarDiagnosticEvent.SparkIgnitionMonitors asSparkIgnitionMonitors();
    field public final android.car.diagnostic.CarDiagnosticEvent.IgnitionMonitor components;
    field public final android.car.diagnostic.CarDiagnosticEvent.IgnitionMonitor fuelSystem;
    field public final android.car.diagnostic.CarDiagnosticEvent.IgnitionMonitor misfire;
  }

  public static final class CarDiagnosticEvent.CompressionIgnitionMonitors extends android.car.diagnostic.CarDiagnosticEvent.CommonIgnitionMonitors {
    field public final android.car.diagnostic.CarDiagnosticEvent.IgnitionMonitor EGROrVVT;
    field public final android.car.diagnostic.CarDiagnosticEvent.IgnitionMonitor NMHCCatalyst;
    field public final android.car.diagnostic.CarDiagnosticEvent.IgnitionMonitor NOxSCR;
    field public final android.car.diagnostic.CarDiagnosticEvent.IgnitionMonitor PMFilter;
    field public final android.car.diagnostic.CarDiagnosticEvent.IgnitionMonitor boostPressure;
    field public final android.car.diagnostic.CarDiagnosticEvent.IgnitionMonitor exhaustGasSensor;
  }

  public static final class CarDiagnosticEvent.FuelSystemStatus {
    field public static final int CLOSED_LOOP = 2; // 0x2
    field public static final int CLOSED_LOOP_BUT_FEEDBACK_FAULT = 16; // 0x10
    field public static final int OPEN_ENGINE_LOAD_OR_DECELERATION = 4; // 0x4
    field public static final int OPEN_INSUFFICIENT_ENGINE_TEMPERATURE = 1; // 0x1
    field public static final int OPEN_SYSTEM_FAILURE = 8; // 0x8
  }

  @IntDef({android.car.diagnostic.CarDiagnosticEvent.FuelSystemStatus.OPEN_INSUFFICIENT_ENGINE_TEMPERATURE, android.car.diagnostic.CarDiagnosticEvent.FuelSystemStatus.CLOSED_LOOP, android.car.diagnostic.CarDiagnosticEvent.FuelSystemStatus.OPEN_ENGINE_LOAD_OR_DECELERATION, android.car.diagnostic.CarDiagnosticEvent.FuelSystemStatus.OPEN_SYSTEM_FAILURE, android.car.diagnostic.CarDiagnosticEvent.FuelSystemStatus.CLOSED_LOOP_BUT_FEEDBACK_FAULT}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface CarDiagnosticEvent.FuelSystemStatus.Status {
  }

  public static final class CarDiagnosticEvent.FuelType {
    field public static final int BIFUEL_RUNNING_CNG = 13; // 0xd
    field public static final int BIFUEL_RUNNING_DIESEL = 23; // 0x17
    field public static final int BIFUEL_RUNNING_ELECTRIC = 15; // 0xf
    field public static final int BIFUEL_RUNNING_ELECTRIC_AND_COMBUSTION = 16; // 0x10
    field public static final int BIFUEL_RUNNING_ETHANOL = 11; // 0xb
    field public static final int BIFUEL_RUNNING_GASOLINE = 9; // 0x9
    field public static final int BIFUEL_RUNNING_LPG = 12; // 0xc
    field public static final int BIFUEL_RUNNING_METHANOL = 10; // 0xa
    field public static final int BIFUEL_RUNNING_PROPANE = 14; // 0xe
    field public static final int CNG = 6; // 0x6
    field public static final int DIESEL = 4; // 0x4
    field public static final int ELECTRIC = 8; // 0x8
    field public static final int ETHANOL = 3; // 0x3
    field public static final int GASOLINE = 1; // 0x1
    field public static final int HYBRID_DIESEL = 19; // 0x13
    field public static final int HYBRID_ELECTRIC = 20; // 0x14
    field public static final int HYBRID_ETHANOL = 18; // 0x12
    field public static final int HYBRID_GASOLINE = 17; // 0x11
    field public static final int HYBRID_REGENERATIVE = 22; // 0x16
    field public static final int HYBRID_RUNNING_ELECTRIC_AND_COMBUSTION = 21; // 0x15
    field public static final int LPG = 5; // 0x5
    field public static final int METHANOL = 2; // 0x2
    field public static final int NOT_AVAILABLE = 0; // 0x0
    field public static final int PROPANE = 7; // 0x7
  }

  @IntDef({android.car.diagnostic.CarDiagnosticEvent.FuelType.NOT_AVAILABLE, android.car.diagnostic.CarDiagnosticEvent.FuelType.GASOLINE, android.car.diagnostic.CarDiagnosticEvent.FuelType.METHANOL, android.car.diagnostic.CarDiagnosticEvent.FuelType.ETHANOL, android.car.diagnostic.CarDiagnosticEvent.FuelType.DIESEL, android.car.diagnostic.CarDiagnosticEvent.FuelType.LPG, android.car.diagnostic.CarDiagnosticEvent.FuelType.CNG, android.car.diagnostic.CarDiagnosticEvent.FuelType.PROPANE, android.car.diagnostic.CarDiagnosticEvent.FuelType.ELECTRIC, android.car.diagnostic.CarDiagnosticEvent.FuelType.BIFUEL_RUNNING_GASOLINE, android.car.diagnostic.CarDiagnosticEvent.FuelType.BIFUEL_RUNNING_METHANOL, android.car.diagnostic.CarDiagnosticEvent.FuelType.BIFUEL_RUNNING_ETHANOL, android.car.diagnostic.CarDiagnosticEvent.FuelType.BIFUEL_RUNNING_LPG, android.car.diagnostic.CarDiagnosticEvent.FuelType.BIFUEL_RUNNING_CNG, android.car.diagnostic.CarDiagnosticEvent.FuelType.BIFUEL_RUNNING_PROPANE, android.car.diagnostic.CarDiagnosticEvent.FuelType.BIFUEL_RUNNING_ELECTRIC, android.car.diagnostic.CarDiagnosticEvent.FuelType.BIFUEL_RUNNING_ELECTRIC_AND_COMBUSTION, android.car.diagnostic.CarDiagnosticEvent.FuelType.HYBRID_GASOLINE, android.car.diagnostic.CarDiagnosticEvent.FuelType.HYBRID_ETHANOL, android.car.diagnostic.CarDiagnosticEvent.FuelType.HYBRID_DIESEL, android.car.diagnostic.CarDiagnosticEvent.FuelType.HYBRID_ELECTRIC, android.car.diagnostic.CarDiagnosticEvent.FuelType.HYBRID_RUNNING_ELECTRIC_AND_COMBUSTION, android.car.diagnostic.CarDiagnosticEvent.FuelType.HYBRID_REGENERATIVE, android.car.diagnostic.CarDiagnosticEvent.FuelType.BIFUEL_RUNNING_DIESEL}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface CarDiagnosticEvent.FuelType.Type {
  }

  public static final class CarDiagnosticEvent.IgnitionMonitor {
    field public final boolean available;
    field public final boolean incomplete;
  }

  public static final class CarDiagnosticEvent.SecondaryAirStatus {
    field public static final int DOWNSTREAM_OF_CATALYCIC_CONVERTER = 2; // 0x2
    field public static final int FROM_OUTSIDE_OR_OFF = 4; // 0x4
    field public static final int PUMP_ON_FOR_DIAGNOSTICS = 8; // 0x8
    field public static final int UPSTREAM = 1; // 0x1
  }

  @IntDef({android.car.diagnostic.CarDiagnosticEvent.SecondaryAirStatus.UPSTREAM, android.car.diagnostic.CarDiagnosticEvent.SecondaryAirStatus.DOWNSTREAM_OF_CATALYCIC_CONVERTER, android.car.diagnostic.CarDiagnosticEvent.SecondaryAirStatus.FROM_OUTSIDE_OR_OFF, android.car.diagnostic.CarDiagnosticEvent.SecondaryAirStatus.PUMP_ON_FOR_DIAGNOSTICS}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface CarDiagnosticEvent.SecondaryAirStatus.Status {
  }

  public static final class CarDiagnosticEvent.SparkIgnitionMonitors extends android.car.diagnostic.CarDiagnosticEvent.CommonIgnitionMonitors {
    field public final android.car.diagnostic.CarDiagnosticEvent.IgnitionMonitor ACRefrigerant;
    field public final android.car.diagnostic.CarDiagnosticEvent.IgnitionMonitor EGR;
    field public final android.car.diagnostic.CarDiagnosticEvent.IgnitionMonitor catalyst;
    field public final android.car.diagnostic.CarDiagnosticEvent.IgnitionMonitor evaporativeSystem;
    field public final android.car.diagnostic.CarDiagnosticEvent.IgnitionMonitor heatedCatalyst;
    field public final android.car.diagnostic.CarDiagnosticEvent.IgnitionMonitor oxygenSensor;
    field public final android.car.diagnostic.CarDiagnosticEvent.IgnitionMonitor oxygenSensorHeater;
    field public final android.car.diagnostic.CarDiagnosticEvent.IgnitionMonitor secondaryAirSystem;
  }

  public final class CarDiagnosticManager {
    method public boolean clearFreezeFrames(long...);
    method @Nullable public android.car.diagnostic.CarDiagnosticEvent getFreezeFrame(long);
    method public long[] getFreezeFrameTimestamps();
    method @Nullable public android.car.diagnostic.CarDiagnosticEvent getLatestLiveFrame();
    method public boolean isClearFreezeFramesSupported();
    method public boolean isFreezeFrameNotificationSupported();
    method public boolean isGetFreezeFrameSupported();
    method public boolean isLiveFrameSupported();
    method public boolean isSelectiveClearFreezeFramesSupported();
    method public void onCarDisconnected();
    method public boolean registerListener(android.car.diagnostic.CarDiagnosticManager.OnDiagnosticEventListener, @android.car.diagnostic.CarDiagnosticManager.FrameType int, int);
    method public void unregisterListener(android.car.diagnostic.CarDiagnosticManager.OnDiagnosticEventListener);
    field public static final int FRAME_TYPE_FREEZE = 1; // 0x1
    field public static final int FRAME_TYPE_LIVE = 0; // 0x0
  }

  @IntDef({android.car.diagnostic.CarDiagnosticManager.FRAME_TYPE_LIVE, android.car.diagnostic.CarDiagnosticManager.FRAME_TYPE_FREEZE}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface CarDiagnosticManager.FrameType {
  }

  public static interface CarDiagnosticManager.OnDiagnosticEventListener {
    method public void onDiagnosticEvent(android.car.diagnostic.CarDiagnosticEvent);
  }

  public final class FloatSensorIndex {
    field public static final int ABSOLUTE_EVAPORATION_SYSTEM_VAPOR_PRESSURE = 58; // 0x3a
    field public static final int ABSOLUTE_LOAD_VALUE = 48; // 0x30
    field public static final int ABSOLUTE_THROTTLE_POSITION_B = 51; // 0x33
    field public static final int ABSOLUTE_THROTTLE_POSITION_C = 52; // 0x34
    field public static final int ACCELERATOR_PEDAL_POSITION_D = 53; // 0x35
    field public static final int ACCELERATOR_PEDAL_POSITION_E = 54; // 0x36
    field public static final int ACCELERATOR_PEDAL_POSITION_F = 55; // 0x37
    field public static final int CALCULATED_ENGINE_LOAD = 0; // 0x0
    field public static final int CATALYST_TEMPERATURE_BANK1_SENSOR1 = 44; // 0x2c
    field public static final int CATALYST_TEMPERATURE_BANK1_SENSOR2 = 46; // 0x2e
    field public static final int CATALYST_TEMPERATURE_BANK2_SENSOR1 = 45; // 0x2d
    field public static final int CATALYST_TEMPERATURE_BANK2_SENSOR2 = 47; // 0x2f
    field public static final int COMMANDED_EVAPORATIVE_PURGE = 41; // 0x29
    field public static final int COMMANDED_EXHAUST_GAS_RECIRCULATION = 39; // 0x27
    field public static final int COMMANDED_THROTTLE_ACTUATOR = 56; // 0x38
    field public static final int ENGINE_COOLANT_TEMPERATURE = 1; // 0x1
    field public static final int ENGINE_FUEL_RATE = 70; // 0x46
    field public static final int ENGINE_RPM = 8; // 0x8
    field public static final int ETHANOL_FUEL_PERCENTAGE = 57; // 0x39
    field public static final int EVAPORATION_SYSTEM_VAPOR_PRESSURE = 43; // 0x2b
    field public static final int EXHAUST_GAS_RECIRCULATION_ERROR = 40; // 0x28
    field public static final int FUEL_AIR_COMMANDED_EQUIVALENCE_RATIO = 49; // 0x31
    field public static final int FUEL_INJECTION_TIMING = 69; // 0x45
    field public static final int FUEL_PRESSURE = 6; // 0x6
    field public static final int FUEL_RAIL_GAUGE_PRESSURE = 38; // 0x26
    field public static final int FUEL_RAIL_PRESSURE = 37; // 0x25
    field public static final int FUEL_TANK_LEVEL_INPUT = 42; // 0x2a
    field public static final int HYBRID_BATTERY_PACK_REMAINING_LIFE = 68; // 0x44
    field public static final int INTAKE_MANIFOLD_ABSOLUTE_PRESSURE = 7; // 0x7
    field public static final int LAST_SYSTEM = 70; // 0x46
    field public static final int LONG_TERM_FUEL_TRIM_BANK1 = 3; // 0x3
    field public static final int LONG_TERM_FUEL_TRIM_BANK2 = 5; // 0x5
    field public static final int LONG_TERM_SECONDARY_OXYGEN_SENSOR_TRIM_BANK1 = 63; // 0x3f
    field public static final int LONG_TERM_SECONDARY_OXYGEN_SENSOR_TRIM_BANK2 = 64; // 0x40
    field public static final int LONG_TERM_SECONDARY_OXYGEN_SENSOR_TRIM_BANK3 = 65; // 0x41
    field public static final int LONG_TERM_SECONDARY_OXYGEN_SENSOR_TRIM_BANK4 = 66; // 0x42
    field public static final int MAF_AIR_FLOW_RATE = 11; // 0xb
    field public static final int OXYGEN_SENSOR1_FUEL_AIR_EQUIVALENCE_RATIO = 15; // 0xf
    field public static final int OXYGEN_SENSOR1_SHORT_TERM_FUEL_TRIM = 14; // 0xe
    field public static final int OXYGEN_SENSOR1_VOLTAGE = 13; // 0xd
    field public static final int OXYGEN_SENSOR2_FUEL_AIR_EQUIVALENCE_RATIO = 18; // 0x12
    field public static final int OXYGEN_SENSOR2_SHORT_TERM_FUEL_TRIM = 17; // 0x11
    field public static final int OXYGEN_SENSOR2_VOLTAGE = 16; // 0x10
    field public static final int OXYGEN_SENSOR3_FUEL_AIR_EQUIVALENCE_RATIO = 21; // 0x15
    field public static final int OXYGEN_SENSOR3_SHORT_TERM_FUEL_TRIM = 20; // 0x14
    field public static final int OXYGEN_SENSOR3_VOLTAGE = 19; // 0x13
    field public static final int OXYGEN_SENSOR4_FUEL_AIR_EQUIVALENCE_RATIO = 24; // 0x18
    field public static final int OXYGEN_SENSOR4_SHORT_TERM_FUEL_TRIM = 23; // 0x17
    field public static final int OXYGEN_SENSOR4_VOLTAGE = 22; // 0x16
    field public static final int OXYGEN_SENSOR5_FUEL_AIR_EQUIVALENCE_RATIO = 27; // 0x1b
    field public static final int OXYGEN_SENSOR5_SHORT_TERM_FUEL_TRIM = 26; // 0x1a
    field public static final int OXYGEN_SENSOR5_VOLTAGE = 25; // 0x19
    field public static final int OXYGEN_SENSOR6_FUEL_AIR_EQUIVALENCE_RATIO = 30; // 0x1e
    field public static final int OXYGEN_SENSOR6_SHORT_TERM_FUEL_TRIM = 29; // 0x1d
    field public static final int OXYGEN_SENSOR6_VOLTAGE = 28; // 0x1c
    field public static final int OXYGEN_SENSOR7_FUEL_AIR_EQUIVALENCE_RATIO = 33; // 0x21
    field public static final int OXYGEN_SENSOR7_SHORT_TERM_FUEL_TRIM = 32; // 0x20
    field public static final int OXYGEN_SENSOR7_VOLTAGE = 31; // 0x1f
    field public static final int OXYGEN_SENSOR8_FUEL_AIR_EQUIVALENCE_RATIO = 36; // 0x24
    field public static final int OXYGEN_SENSOR8_SHORT_TERM_FUEL_TRIM = 35; // 0x23
    field public static final int OXYGEN_SENSOR8_VOLTAGE = 34; // 0x22
    field public static final int RELATIVE_ACCELERATOR_PEDAL_POSITION = 67; // 0x43
    field public static final int RELATIVE_THROTTLE_POSITION = 50; // 0x32
    field public static final int SHORT_TERM_FUEL_TRIM_BANK1 = 2; // 0x2
    field public static final int SHORT_TERM_FUEL_TRIM_BANK2 = 4; // 0x4
    field public static final int SHORT_TERM_SECONDARY_OXYGEN_SENSOR_TRIM_BANK1 = 59; // 0x3b
    field public static final int SHORT_TERM_SECONDARY_OXYGEN_SENSOR_TRIM_BANK2 = 60; // 0x3c
    field public static final int SHORT_TERM_SECONDARY_OXYGEN_SENSOR_TRIM_BANK3 = 61; // 0x3d
    field public static final int SHORT_TERM_SECONDARY_OXYGEN_SENSOR_TRIM_BANK4 = 62; // 0x3e
    field public static final int THROTTLE_POSITION = 12; // 0xc
    field public static final int TIMING_ADVANCE = 10; // 0xa
    field public static final int VEHICLE_SPEED = 9; // 0x9
    field public static final int VENDOR_START = 71; // 0x47
  }

  public final class IntegerSensorIndex {
    field public static final int ABSOLUTE_BAROMETRIC_PRESSURE = 11; // 0xb
    field public static final int AMBIENT_AIR_TEMPERATURE = 13; // 0xd
    field public static final int COMMANDED_SECONDARY_AIR_STATUS = 5; // 0x5
    field public static final int CONTROL_MODULE_VOLTAGE = 12; // 0xc
    field public static final int DISTANCE_TRAVELED_SINCE_CODES_CLEARED = 10; // 0xa
    field public static final int DISTANCE_TRAVELED_WITH_MALFUNCTION_INDICATOR_LIGHT_ON = 8; // 0x8
    field public static final int DRIVER_DEMAND_PERCENT_TORQUE = 24; // 0x18
    field public static final int ENGINE_ACTUAL_PERCENT_TORQUE = 25; // 0x19
    field public static final int ENGINE_OIL_TEMPERATURE = 23; // 0x17
    field public static final int ENGINE_PERCENT_TORQUE_DATA_IDLE = 27; // 0x1b
    field public static final int ENGINE_PERCENT_TORQUE_DATA_POINT1 = 28; // 0x1c
    field public static final int ENGINE_PERCENT_TORQUE_DATA_POINT2 = 29; // 0x1d
    field public static final int ENGINE_PERCENT_TORQUE_DATA_POINT3 = 30; // 0x1e
    field public static final int ENGINE_PERCENT_TORQUE_DATA_POINT4 = 31; // 0x1f
    field public static final int ENGINE_REFERENCE_PERCENT_TORQUE = 26; // 0x1a
    field public static final int FUEL_RAIL_ABSOLUTE_PRESSURE = 22; // 0x16
    field public static final int FUEL_SYSTEM_STATUS = 0; // 0x0
    field public static final int FUEL_TYPE = 21; // 0x15
    field public static final int IGNITION_MONITORS_SUPPORTED = 2; // 0x2
    field public static final int IGNITION_SPECIFIC_MONITORS = 3; // 0x3
    field public static final int INTAKE_AIR_TEMPERATURE = 4; // 0x4
    field public static final int LAST_SYSTEM = 31; // 0x1f
    field public static final int MALFUNCTION_INDICATOR_LIGHT_ON = 1; // 0x1
    field public static final int MAX_AIR_FLOW_RATE_FROM_MASS_AIR_FLOW_SENSOR = 20; // 0x14
    field public static final int MAX_FUEL_AIR_EQUIVALENCE_RATIO = 16; // 0x10
    field public static final int MAX_INTAKE_MANIFOLD_ABSOLUTE_PRESSURE = 19; // 0x13
    field public static final int MAX_OXYGEN_SENSOR_CURRENT = 18; // 0x12
    field public static final int MAX_OXYGEN_SENSOR_VOLTAGE = 17; // 0x11
    field public static final int NUM_OXYGEN_SENSORS_PRESENT = 6; // 0x6
    field public static final int RUNTIME_SINCE_ENGINE_START = 7; // 0x7
    field public static final int TIME_SINCE_TROUBLE_CODES_CLEARED = 15; // 0xf
    field public static final int TIME_WITH_MALFUNCTION_LIGHT_ON = 14; // 0xe
    field public static final int VENDOR_START = 32; // 0x20
    field public static final int WARMUPS_SINCE_CODES_CLEARED = 9; // 0x9
  }

}

package android.car.drivingstate {

  public final class CarDrivingStateEvent implements android.os.Parcelable {
    ctor public CarDrivingStateEvent(int, long);
    method public int describeContents();
    method public void writeToParcel(android.os.Parcel, int);
    field public static final android.os.Parcelable.Creator<android.car.drivingstate.CarDrivingStateEvent> CREATOR;
    field public static final int DRIVING_STATE_IDLING = 1; // 0x1
    field public static final int DRIVING_STATE_MOVING = 2; // 0x2
    field public static final int DRIVING_STATE_PARKED = 0; // 0x0
    field public static final int DRIVING_STATE_UNKNOWN = -1; // 0xffffffff
    field public final int eventValue;
    field public final long timeStamp;
  }

  public final class CarDrivingStateManager {
    method @Nullable public android.car.drivingstate.CarDrivingStateEvent getCurrentCarDrivingState();
    method public void injectDrivingState(int);
    method public void registerListener(@NonNull android.car.drivingstate.CarDrivingStateManager.CarDrivingStateEventListener);
    method public void unregisterListener();
  }

  public static interface CarDrivingStateManager.CarDrivingStateEventListener {
    method public void onDrivingStateChanged(android.car.drivingstate.CarDrivingStateEvent);
  }

  public final class CarUxRestrictionsConfiguration implements android.os.Parcelable {
    method public int describeContents();
    method @Nullable public Integer getPhysicalPort();
    method @NonNull public android.car.drivingstate.CarUxRestrictions getUxRestrictions(int, float);
    method @NonNull public android.car.drivingstate.CarUxRestrictions getUxRestrictions(int, @FloatRange(from=0.0f) float, @NonNull String);
    method public void writeToParcel(@NonNull android.os.Parcel, int);
    field @NonNull public static final android.os.Parcelable.Creator<android.car.drivingstate.CarUxRestrictionsConfiguration> CREATOR;
  }

  public final class CarUxRestrictionsManager {
    method @Nullable @RequiresPermission(android.car.Car.PERMISSION_CAR_UX_RESTRICTIONS_CONFIGURATION) public java.util.List<android.car.drivingstate.CarUxRestrictionsConfiguration> getConfigs();
    method @Nullable public android.car.drivingstate.CarUxRestrictions getCurrentCarUxRestrictions(int);
    method @NonNull @RequiresPermission(android.car.Car.PERMISSION_CAR_UX_RESTRICTIONS_CONFIGURATION) public String getRestrictionMode();
    method @Nullable @RequiresPermission(android.car.Car.PERMISSION_CAR_UX_RESTRICTIONS_CONFIGURATION) public java.util.List<android.car.drivingstate.CarUxRestrictionsConfiguration> getStagedConfigs();
    method public void onCarDisconnected();
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_UX_RESTRICTIONS_CONFIGURATION) public boolean saveUxRestrictionsConfigurationForNextBoot(@NonNull java.util.List<android.car.drivingstate.CarUxRestrictionsConfiguration>);
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_UX_RESTRICTIONS_CONFIGURATION) public boolean saveUxRestrictionsConfigurationForNextBoot(@NonNull android.car.drivingstate.CarUxRestrictionsConfiguration);
    method public void setListener(int, @NonNull android.car.drivingstate.CarUxRestrictionsManager.OnUxRestrictionsChangedListener);
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_UX_RESTRICTIONS_CONFIGURATION) public boolean setRestrictionMode(@NonNull String);
    field public static final String UX_RESTRICTION_MODE_BASELINE = "baseline";
  }

}

package android.car.evs {

  public final class CarEvsBufferDescriptor implements android.os.Parcelable {
    ctor public CarEvsBufferDescriptor(int, @NonNull android.hardware.HardwareBuffer);
    method public int describeContents();
    method @NonNull public android.hardware.HardwareBuffer getHardwareBuffer();
    method public int getId();
    method public void writeToParcel(@NonNull android.os.Parcel, int);
    field @NonNull public static final android.os.Parcelable.Creator<android.car.evs.CarEvsBufferDescriptor> CREATOR;
  }

  public final class CarEvsManager {
    method @RequiresPermission(android.car.Car.PERMISSION_MONITOR_CAR_EVS_STATUS) public void clearStatusListener();
    method @NonNull @RequiresPermission(android.car.Car.PERMISSION_CONTROL_CAR_EVS_ACTIVITY) public android.os.IBinder generateSessionToken();
    method @NonNull @RequiresPermission(android.car.Car.PERMISSION_MONITOR_CAR_EVS_STATUS) public android.car.evs.CarEvsStatus getCurrentStatus();
    method @RequiresPermission(android.car.Car.PERMISSION_MONITOR_CAR_EVS_STATUS) public boolean isSupported(int);
    method @RequiresPermission(android.car.Car.PERMISSION_USE_CAR_EVS_CAMERA) public void returnFrameBuffer(@NonNull android.car.evs.CarEvsBufferDescriptor);
    method @RequiresPermission(android.car.Car.PERMISSION_MONITOR_CAR_EVS_STATUS) public void setStatusListener(@NonNull java.util.concurrent.Executor, @NonNull android.car.evs.CarEvsManager.CarEvsStatusListener);
    method @RequiresPermission(android.car.Car.PERMISSION_REQUEST_CAR_EVS_ACTIVITY) public int startActivity(int);
    method @RequiresPermission(android.car.Car.PERMISSION_USE_CAR_EVS_CAMERA) public int startVideoStream(int, @Nullable android.os.IBinder, @NonNull java.util.concurrent.Executor, @NonNull android.car.evs.CarEvsManager.CarEvsStreamCallback);
    method @RequiresPermission(android.car.Car.PERMISSION_REQUEST_CAR_EVS_ACTIVITY) public void stopActivity();
    method @RequiresPermission(android.car.Car.PERMISSION_USE_CAR_EVS_CAMERA) public void stopVideoStream();
    field public static final int ERROR_BUSY = -2; // 0xfffffffe
    field public static final int ERROR_NONE = 0; // 0x0
    field public static final int ERROR_UNAVAILABLE = -1; // 0xffffffff
    field public static final String EXTRA_SESSION_TOKEN = "android.car.evs.extra.SESSION_TOKEN";
    field public static final int SERVICE_STATE_ACTIVE = 3; // 0x3
    field public static final int SERVICE_STATE_INACTIVE = 1; // 0x1
    field public static final int SERVICE_STATE_REQUESTED = 2; // 0x2
    field public static final int SERVICE_STATE_UNAVAILABLE = 0; // 0x0
    field public static final int SERVICE_TYPE_REARVIEW = 0; // 0x0
    field public static final int SERVICE_TYPE_SURROUNDVIEW = 1; // 0x1
    field public static final int STREAM_EVENT_FRAME_DROPPED = 3; // 0x3
    field public static final int STREAM_EVENT_NONE = 0; // 0x0
    field public static final int STREAM_EVENT_OTHER_ERRORS = 7; // 0x7
    field public static final int STREAM_EVENT_PARAMETER_CHANGED = 5; // 0x5
    field public static final int STREAM_EVENT_PRIMARY_OWNER_CHANGED = 6; // 0x6
    field public static final int STREAM_EVENT_STREAM_STARTED = 1; // 0x1
    field public static final int STREAM_EVENT_STREAM_STOPPED = 2; // 0x2
    field public static final int STREAM_EVENT_TIMEOUT = 4; // 0x4
  }

  public static interface CarEvsManager.CarEvsStatusListener {
    method public void onStatusChanged(@NonNull android.car.evs.CarEvsStatus);
  }

  public static interface CarEvsManager.CarEvsStreamCallback {
    method public default void onNewFrame(@NonNull android.car.evs.CarEvsBufferDescriptor);
    method public default void onStreamEvent(int);
  }

  public final class CarEvsStatus implements android.os.Parcelable {
    ctor public CarEvsStatus(int, int);
    method public int describeContents();
    method public int getServiceType();
    method public int getState();
    method public void writeToParcel(@NonNull android.os.Parcel, int);
    field @NonNull public static final android.os.Parcelable.Creator<android.car.evs.CarEvsStatus> CREATOR;
  }

}

package android.car.hardware {

  public final class CarHvacFanDirection {
    field public static final int DEFROST = 4; // 0x4
    field public static final int DEFROST_AND_FLOOR = 6; // 0x6
    field public static final int FACE = 1; // 0x1
    field public static final int FACE_AND_FLOOR = 3; // 0x3
    field public static final int FLOOR = 2; // 0x2
    field public static final int UNKNOWN = 0; // 0x0
  }

  public final class CarPropertyConfig<T> implements android.os.Parcelable {
    method public static <T> android.car.hardware.CarPropertyConfig.Builder<T> newBuilder(Class<T>, int, int, int);
  }

  public static class CarPropertyConfig.Builder<T> {
    method public android.car.hardware.CarPropertyConfig.Builder<T> addArea(int);
    method public android.car.hardware.CarPropertyConfig.Builder<T> addAreaConfig(int, T, T);
    method public android.car.hardware.CarPropertyConfig.Builder<T> addAreas(int[]);
    method public android.car.hardware.CarPropertyConfig<T> build();
    method public android.car.hardware.CarPropertyConfig.Builder<T> setAccess(int);
    method public android.car.hardware.CarPropertyConfig.Builder<T> setChangeMode(int);
    method public android.car.hardware.CarPropertyConfig.Builder<T> setConfigArray(java.util.ArrayList<java.lang.Integer>);
    method public android.car.hardware.CarPropertyConfig.Builder<T> setConfigString(String);
    method public android.car.hardware.CarPropertyConfig.Builder<T> setMaxSampleRate(float);
    method public android.car.hardware.CarPropertyConfig.Builder<T> setMinSampleRate(float);
  }

  @Deprecated public final class CarVendorExtensionManager {
    method @Deprecated public <E> E getGlobalProperty(Class<E>, int);
    method @Deprecated public java.util.List<android.car.hardware.CarPropertyConfig> getProperties();
    method @Deprecated public <E> E getProperty(Class<E>, int, int);
    method @Deprecated public boolean isPropertyAvailable(int, int);
    method @Deprecated public void registerCallback(android.car.hardware.CarVendorExtensionManager.CarVendorExtensionCallback);
    method @Deprecated public <E> void setGlobalProperty(Class<E>, int, E);
    method @Deprecated public <E> void setProperty(Class<E>, int, int, E);
    method @Deprecated public void unregisterCallback(android.car.hardware.CarVendorExtensionManager.CarVendorExtensionCallback);
  }

  @Deprecated public static interface CarVendorExtensionManager.CarVendorExtensionCallback {
    method @Deprecated public void onChangeEvent(android.car.hardware.CarPropertyValue);
    method @Deprecated public void onErrorEvent(int, int);
  }

}

package android.car.hardware.cabin {

  @Deprecated public final class CarCabinManager {
    method @Deprecated public boolean getBooleanProperty(int, int);
    method @Deprecated public float getFloatProperty(int, int);
    method @Deprecated public int getIntProperty(int, int);
    method @Deprecated public java.util.List<android.car.hardware.CarPropertyConfig> getPropertyList();
    method @Deprecated public static boolean isZonedProperty(int);
    method @Deprecated public void registerCallback(android.car.hardware.cabin.CarCabinManager.CarCabinEventCallback);
    method @Deprecated public void setBooleanProperty(int, int, boolean);
    method @Deprecated public void setFloatProperty(int, int, float);
    method @Deprecated public void setIntProperty(int, int, int);
    method @Deprecated public void unregisterCallback(android.car.hardware.cabin.CarCabinManager.CarCabinEventCallback);
    field @Deprecated public static final int ID_DOOR_LOCK = 371198722; // 0x16200b02
    field @Deprecated public static final int ID_DOOR_MOVE = 373295873; // 0x16400b01
    field @Deprecated public static final int ID_DOOR_POS = 373295872; // 0x16400b00
    field @Deprecated public static final int ID_MIRROR_FOLD = 287312709; // 0x11200b45
    field @Deprecated public static final int ID_MIRROR_LOCK = 287312708; // 0x11200b44
    field @Deprecated public static final int ID_MIRROR_Y_MOVE = 339741507; // 0x14400b43
    field @Deprecated public static final int ID_MIRROR_Y_POS = 339741506; // 0x14400b42
    field @Deprecated public static final int ID_MIRROR_Z_MOVE = 339741505; // 0x14400b41
    field @Deprecated public static final int ID_MIRROR_Z_POS = 339741504; // 0x14400b40
    field @Deprecated public static final int ID_SEAT_BACKREST_ANGLE_1_MOVE = 356518792; // 0x15400b88
    field @Deprecated public static final int ID_SEAT_BACKREST_ANGLE_1_POS = 356518791; // 0x15400b87
    field @Deprecated public static final int ID_SEAT_BACKREST_ANGLE_2_MOVE = 356518794; // 0x15400b8a
    field @Deprecated public static final int ID_SEAT_BACKREST_ANGLE_2_POS = 356518793; // 0x15400b89
    field @Deprecated public static final int ID_SEAT_BELT_BUCKLED = 354421634; // 0x15200b82
    field @Deprecated public static final int ID_SEAT_BELT_HEIGHT_MOVE = 356518788; // 0x15400b84
    field @Deprecated public static final int ID_SEAT_BELT_HEIGHT_POS = 356518787; // 0x15400b83
    field @Deprecated public static final int ID_SEAT_DEPTH_MOVE = 356518798; // 0x15400b8e
    field @Deprecated public static final int ID_SEAT_DEPTH_POS = 356518797; // 0x15400b8d
    field @Deprecated public static final int ID_SEAT_FORE_AFT_MOVE = 356518790; // 0x15400b86
    field @Deprecated public static final int ID_SEAT_FORE_AFT_POS = 356518789; // 0x15400b85
    field @Deprecated public static final int ID_SEAT_HEADREST_ANGLE_MOVE = 356518808; // 0x15400b98
    field @Deprecated public static final int ID_SEAT_HEADREST_ANGLE_POS = 356518807; // 0x15400b97
    field @Deprecated public static final int ID_SEAT_HEADREST_FORE_AFT_MOVE = 356518810; // 0x15400b9a
    field @Deprecated public static final int ID_SEAT_HEADREST_FORE_AFT_POS = 356518809; // 0x15400b99
    field @Deprecated public static final int ID_SEAT_HEADREST_HEIGHT_MOVE = 356518806; // 0x15400b96
    field @Deprecated public static final int ID_SEAT_HEADREST_HEIGHT_POS = 356518805; // 0x15400b95
    field @Deprecated public static final int ID_SEAT_HEIGHT_MOVE = 356518796; // 0x15400b8c
    field @Deprecated public static final int ID_SEAT_HEIGHT_POS = 356518795; // 0x15400b8b
    field @Deprecated public static final int ID_SEAT_LUMBAR_FORE_AFT_MOVE = 356518802; // 0x15400b92
    field @Deprecated public static final int ID_SEAT_LUMBAR_FORE_AFT_POS = 356518801; // 0x15400b91
    field @Deprecated public static final int ID_SEAT_LUMBAR_SIDE_SUPPORT_MOVE = 356518804; // 0x15400b94
    field @Deprecated public static final int ID_SEAT_LUMBAR_SIDE_SUPPORT_POS = 356518803; // 0x15400b93
    field @Deprecated public static final int ID_SEAT_MEMORY_SELECT = 356518784; // 0x15400b80
    field @Deprecated public static final int ID_SEAT_MEMORY_SET = 356518785; // 0x15400b81
    field @Deprecated public static final int ID_SEAT_TILT_MOVE = 356518800; // 0x15400b90
    field @Deprecated public static final int ID_SEAT_TILT_POS = 356518799; // 0x15400b8f
    field @Deprecated public static final int ID_WINDOW_LOCK = 322964420; // 0x13400bc4
    field @Deprecated public static final int ID_WINDOW_MOVE = 322964417; // 0x13400bc1
    field @Deprecated public static final int ID_WINDOW_POS = 322964416; // 0x13400bc0
  }

  @Deprecated public static interface CarCabinManager.CarCabinEventCallback {
    method @Deprecated public void onChangeEvent(android.car.hardware.CarPropertyValue);
    method @Deprecated public void onErrorEvent(int, int);
  }

}

package android.car.hardware.hvac {

  @Deprecated public final class CarHvacManager {
    method @Deprecated public boolean getBooleanProperty(int, int);
    method @Deprecated public float getFloatProperty(int, int);
    method @Deprecated public int getIntProperty(int, int);
    method @Deprecated public java.util.List<android.car.hardware.CarPropertyConfig> getPropertyList();
    method @Deprecated public boolean isPropertyAvailable(int, int);
    method @Deprecated public void registerCallback(android.car.hardware.hvac.CarHvacManager.CarHvacEventCallback);
    method @Deprecated public void setBooleanProperty(int, int, boolean);
    method @Deprecated public void setFloatProperty(int, int, float);
    method @Deprecated public void setIntProperty(int, int, int);
    method @Deprecated public void unregisterCallback(android.car.hardware.hvac.CarHvacManager.CarHvacEventCallback);
    field @Deprecated public static final int FAN_DIRECTION_DEFROST = 4; // 0x4
    field @Deprecated public static final int FAN_DIRECTION_FACE = 1; // 0x1
    field @Deprecated public static final int FAN_DIRECTION_FLOOR = 2; // 0x2
    field @Deprecated public static final int ID_MIRROR_DEFROSTER_ON = 339739916; // 0x1440050c
    field @Deprecated public static final int ID_OUTSIDE_AIR_TEMP = 291505923; // 0x11600703
    field @Deprecated public static final int ID_STEERING_WHEEL_HEAT = 289408269; // 0x1140050d
    field @Deprecated public static final int ID_TEMPERATURE_DISPLAY_UNITS = 289408270; // 0x1140050e
    field @Deprecated public static final int ID_WINDOW_DEFROSTER_ON = 320865540; // 0x13200504
    field @Deprecated public static final int ID_ZONED_AC_ON = 354419973; // 0x15200505
    field @Deprecated public static final int ID_ZONED_AIR_RECIRCULATION_ON = 354419976; // 0x15200508
    field @Deprecated public static final int ID_ZONED_AUTOMATIC_MODE_ON = 354419978; // 0x1520050a
    field @Deprecated public static final int ID_ZONED_DUAL_ZONE_ON = 354419977; // 0x15200509
    field @Deprecated public static final int ID_ZONED_FAN_DIRECTION = 356517121; // 0x15400501
    field @Deprecated public static final int ID_ZONED_FAN_DIRECTION_AVAILABLE = 356582673; // 0x15410511
    field @Deprecated public static final int ID_ZONED_FAN_SPEED_RPM = 356517135; // 0x1540050f
    field @Deprecated public static final int ID_ZONED_FAN_SPEED_SETPOINT = 356517120; // 0x15400500
    field @Deprecated public static final int ID_ZONED_HVAC_AUTO_RECIRC_ON = 354419986; // 0x15200512
    field @Deprecated public static final int ID_ZONED_HVAC_POWER_ON = 354419984; // 0x15200510
    field @Deprecated public static final int ID_ZONED_MAX_AC_ON = 354419974; // 0x15200506
    field @Deprecated public static final int ID_ZONED_MAX_DEFROST_ON = 354419975; // 0x15200507
    field @Deprecated public static final int ID_ZONED_SEAT_TEMP = 356517131; // 0x1540050b
    field @Deprecated public static final int ID_ZONED_TEMP_ACTUAL = 358614274; // 0x15600502
    field @Deprecated public static final int ID_ZONED_TEMP_SETPOINT = 358614275; // 0x15600503
  }

  @Deprecated public static interface CarHvacManager.CarHvacEventCallback {
    method @Deprecated public void onChangeEvent(android.car.hardware.CarPropertyValue);
    method @Deprecated public void onErrorEvent(int, int);
  }

}

package android.car.hardware.power {

  public class CarPowerManager {
    method @RequiresPermission(android.car.Car.PERMISSION_CONTROL_CAR_POWER_POLICY) public void applyPowerPolicy(@NonNull String);
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_POWER) public void clearListener();
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_POWER) public int getPowerState();
    method public static boolean isCompletionAllowed(int);
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_POWER) public void setListener(@NonNull java.util.concurrent.Executor, @NonNull android.car.hardware.power.CarPowerManager.CarPowerStateListener);
    method @RequiresPermission(android.car.Car.PERMISSION_CONTROL_SHUTDOWN_PROCESS) public void setListenerWithCompletion(@NonNull java.util.concurrent.Executor, @NonNull android.car.hardware.power.CarPowerManager.CarPowerStateListenerWithCompletion);
    method @RequiresPermission(android.car.Car.PERMISSION_CONTROL_CAR_POWER_POLICY) public void setPowerPolicyGroup(@NonNull String);
    field public static final int STATE_HIBERNATION_ENTER = 9; // 0x9
    field public static final int STATE_HIBERNATION_EXIT = 10; // 0xa
    field public static final int STATE_INVALID = 0; // 0x0
    field public static final int STATE_ON = 6; // 0x6
    field public static final int STATE_POST_HIBERNATION_ENTER = 14; // 0xe
    field public static final int STATE_POST_SHUTDOWN_ENTER = 13; // 0xd
    field public static final int STATE_POST_SUSPEND_ENTER = 12; // 0xc
    field public static final int STATE_PRE_SHUTDOWN_PREPARE = 11; // 0xb
    field public static final int STATE_SHUTDOWN_CANCELLED = 8; // 0x8
    field public static final int STATE_SHUTDOWN_ENTER = 5; // 0x5
    field public static final int STATE_SHUTDOWN_PREPARE = 7; // 0x7
    field public static final int STATE_SUSPEND_ENTER = 2; // 0x2
    field public static final int STATE_SUSPEND_EXIT = 3; // 0x3
    field public static final int STATE_WAIT_FOR_VHAL = 1; // 0x1
  }

  public static interface CarPowerManager.CarPowerStateListener {
    method public void onStateChanged(int);
  }

  public static interface CarPowerManager.CarPowerStateListenerWithCompletion {
    method public void onStateChanged(int, @Nullable android.car.hardware.power.CarPowerManager.CompletablePowerStateChangeFuture);
  }

  public static interface CarPowerManager.CompletablePowerStateChangeFuture {
    method public void complete();
    method public long getExpirationTime();
  }

}

package android.car.hardware.property {

  public final class VehicleVendorPermission {
    field public static final String PERMISSION_GET_CAR_VENDOR_CATEGORY_1 = "android.car.permission.GET_CAR_VENDOR_CATEGORY_1";
    field public static final String PERMISSION_GET_CAR_VENDOR_CATEGORY_10 = "android.car.permission.GET_CAR_VENDOR_CATEGORY_10";
    field public static final String PERMISSION_GET_CAR_VENDOR_CATEGORY_2 = "android.car.permission.GET_CAR_VENDOR_CATEGORY_2";
    field public static final String PERMISSION_GET_CAR_VENDOR_CATEGORY_3 = "android.car.permission.GET_CAR_VENDOR_CATEGORY_3";
    field public static final String PERMISSION_GET_CAR_VENDOR_CATEGORY_4 = "android.car.permission.GET_CAR_VENDOR_CATEGORY_4";
    field public static final String PERMISSION_GET_CAR_VENDOR_CATEGORY_5 = "android.car.permission.GET_CAR_VENDOR_CATEGORY_5";
    field public static final String PERMISSION_GET_CAR_VENDOR_CATEGORY_6 = "android.car.permission.GET_CAR_VENDOR_CATEGORY_6";
    field public static final String PERMISSION_GET_CAR_VENDOR_CATEGORY_7 = "android.car.permission.GET_CAR_VENDOR_CATEGORY_7";
    field public static final String PERMISSION_GET_CAR_VENDOR_CATEGORY_8 = "android.car.permission.GET_CAR_VENDOR_CATEGORY_8";
    field public static final String PERMISSION_GET_CAR_VENDOR_CATEGORY_9 = "android.car.permission.GET_CAR_VENDOR_CATEGORY_9";
    field public static final String PERMISSION_GET_CAR_VENDOR_CATEGORY_DOOR = "android.car.permission.GET_CAR_VENDOR_CATEGORY_DOOR";
    field public static final String PERMISSION_GET_CAR_VENDOR_CATEGORY_ENGINE = "android.car.permission.GET_CAR_VENDOR_CATEGORY_ENGINE";
    field public static final String PERMISSION_GET_CAR_VENDOR_CATEGORY_HVAC = "android.car.permission.GET_CAR_VENDOR_CATEGORY_HVAC";
    field public static final String PERMISSION_GET_CAR_VENDOR_CATEGORY_INFO = "android.car.permission.GET_CAR_VENDOR_CATEGORY_INFO";
    field public static final String PERMISSION_GET_CAR_VENDOR_CATEGORY_LIGHT = "android.car.permission.GET_CAR_VENDOR_CATEGORY_LIGHT";
    field public static final String PERMISSION_GET_CAR_VENDOR_CATEGORY_MIRROR = "android.car.permission.GET_CAR_VENDOR_CATEGORY_MIRROR";
    field public static final String PERMISSION_GET_CAR_VENDOR_CATEGORY_SEAT = "android.car.permission.GET_CAR_VENDOR_CATEGORY_SEAT";
    field public static final String PERMISSION_GET_CAR_VENDOR_CATEGORY_WINDOW = "android.car.permission.GET_CAR_VENDOR_CATEGORY_WINDOW";
    field public static final String PERMISSION_SET_CAR_VENDOR_CATEGORY_1 = "android.car.permission.SET_CAR_VENDOR_CATEGORY_1";
    field public static final String PERMISSION_SET_CAR_VENDOR_CATEGORY_10 = "android.car.permission.SET_CAR_VENDOR_CATEGORY_10";
    field public static final String PERMISSION_SET_CAR_VENDOR_CATEGORY_2 = "android.car.permission.SET_CAR_VENDOR_CATEGORY_2";
    field public static final String PERMISSION_SET_CAR_VENDOR_CATEGORY_3 = "android.car.permission.SET_CAR_VENDOR_CATEGORY_3";
    field public static final String PERMISSION_SET_CAR_VENDOR_CATEGORY_4 = "android.car.permission.SET_CAR_VENDOR_CATEGORY_4";
    field public static final String PERMISSION_SET_CAR_VENDOR_CATEGORY_5 = "android.car.permission.SET_CAR_VENDOR_CATEGORY_5";
    field public static final String PERMISSION_SET_CAR_VENDOR_CATEGORY_6 = "android.car.permission.SET_CAR_VENDOR_CATEGORY_6";
    field public static final String PERMISSION_SET_CAR_VENDOR_CATEGORY_7 = "android.car.permission.SET_CAR_VENDOR_CATEGORY_7";
    field public static final String PERMISSION_SET_CAR_VENDOR_CATEGORY_8 = "android.car.permission.SET_CAR_VENDOR_CATEGORY_8";
    field public static final String PERMISSION_SET_CAR_VENDOR_CATEGORY_9 = "android.car.permission.SET_CAR_VENDOR_CATEGORY_9";
    field public static final String PERMISSION_SET_CAR_VENDOR_CATEGORY_DOOR = "android.car.permission.SET_CAR_VENDOR_CATEGORY_DOOR";
    field public static final String PERMISSION_SET_CAR_VENDOR_CATEGORY_ENGINE = "android.car.permission.SET_CAR_VENDOR_CATEGORY_ENGINE";
    field public static final String PERMISSION_SET_CAR_VENDOR_CATEGORY_HVAC = "android.car.permission.SET_CAR_VENDOR_CATEGORY_HVAC";
    field public static final String PERMISSION_SET_CAR_VENDOR_CATEGORY_INFO = "android.car.permission.SET_CAR_VENDOR_CATEGORY_INFO";
    field public static final String PERMISSION_SET_CAR_VENDOR_CATEGORY_LIGHT = "android.car.permission.SET_CAR_VENDOR_CATEGORY_LIGHT";
    field public static final String PERMISSION_SET_CAR_VENDOR_CATEGORY_MIRROR = "android.car.permission.SET_CAR_VENDOR_CATEGORY_MIRROR";
    field public static final String PERMISSION_SET_CAR_VENDOR_CATEGORY_SEAT = "android.car.permission.SET_CAR_VENDOR_CATEGORY_SEAT";
    field public static final String PERMISSION_SET_CAR_VENDOR_CATEGORY_WINDOW = "android.car.permission.SET_CAR_VENDOR_CATEGORY_WINDOW";
  }

}

package android.car.input {

  public final class CarInputManager {
    method @RequiresPermission(android.Manifest.permission.INJECT_EVENTS) public void injectKeyEvent(@NonNull android.view.KeyEvent, int);
    method public void releaseInputEventCapture(int);
    method @RequiresPermission(anyOf={"android.permission.MONITOR_INPUT", android.car.Car.PERMISSION_CAR_MONITOR_INPUT}) public int requestInputEventCapture(int, @NonNull int[], int, @NonNull android.car.input.CarInputManager.CarInputCaptureCallback);
    method @RequiresPermission(anyOf={"android.permission.MONITOR_INPUT", android.car.Car.PERMISSION_CAR_MONITOR_INPUT}) public int requestInputEventCapture(int, @NonNull int[], int, @NonNull java.util.concurrent.Executor, @NonNull android.car.input.CarInputManager.CarInputCaptureCallback);
    field public static final int CAPTURE_REQ_FLAGS_ALLOW_DELAYED_GRANT = 1; // 0x1
    field public static final int CAPTURE_REQ_FLAGS_TAKE_ALL_EVENTS_FOR_DISPLAY = 2; // 0x2
    field public static final int INPUT_CAPTURE_RESPONSE_DELAYED = 2; // 0x2
    field public static final int INPUT_CAPTURE_RESPONSE_FAILED = 1; // 0x1
    field public static final int INPUT_CAPTURE_RESPONSE_SUCCEEDED = 0; // 0x0
    field public static final int INPUT_TYPE_ALL_INPUTS = 1; // 0x1
    field public static final int INPUT_TYPE_CUSTOM_INPUT_EVENT = 200; // 0xc8
    field public static final int INPUT_TYPE_DPAD_KEYS = 100; // 0x64
    field public static final int INPUT_TYPE_NAVIGATE_KEYS = 101; // 0x65
    field public static final int INPUT_TYPE_ROTARY_NAVIGATION = 10; // 0xa
    field public static final int INPUT_TYPE_ROTARY_VOLUME = 11; // 0xb
    field public static final int INPUT_TYPE_SYSTEM_NAVIGATE_KEYS = 102; // 0x66
  }

  public static interface CarInputManager.CarInputCaptureCallback {
    method public default void onCaptureStateChanged(int, @NonNull int[]);
    method public default void onCustomInputEvents(int, @NonNull java.util.List<android.car.input.CustomInputEvent>);
    method public default void onKeyEvents(int, @NonNull java.util.List<android.view.KeyEvent>);
    method public default void onRotaryEvents(int, @NonNull java.util.List<android.car.input.RotaryEvent>);
  }

  public final class CustomInputEvent implements android.os.Parcelable {
    ctor public CustomInputEvent(int, int, int);
    method public int describeContents();
    method public int getInputCode();
    method public int getRepeatCounter();
    method public int getTargetDisplayType();
    method @NonNull public static String inputCodeToString(int);
    method public void writeToParcel(@NonNull android.os.Parcel, int);
    field @NonNull public static final android.os.Parcelable.Creator<android.car.input.CustomInputEvent> CREATOR;
    field public static final int INPUT_CODE_F1 = 1001; // 0x3e9
    field public static final int INPUT_CODE_F10 = 1010; // 0x3f2
    field public static final int INPUT_CODE_F2 = 1002; // 0x3ea
    field public static final int INPUT_CODE_F3 = 1003; // 0x3eb
    field public static final int INPUT_CODE_F4 = 1004; // 0x3ec
    field public static final int INPUT_CODE_F5 = 1005; // 0x3ed
    field public static final int INPUT_CODE_F6 = 1006; // 0x3ee
    field public static final int INPUT_CODE_F7 = 1007; // 0x3ef
    field public static final int INPUT_CODE_F8 = 1008; // 0x3f0
    field public static final int INPUT_CODE_F9 = 1009; // 0x3f1
  }

  public final class RotaryEvent implements android.os.Parcelable {
    ctor public RotaryEvent(int, boolean, @NonNull long[]);
    method public int describeContents();
    method public int getInputType();
    method public int getNumberOfClicks();
    method public long getUptimeMillisForClick(int);
    method @NonNull public long[] getUptimeMillisForClicks();
    method public boolean isClockwise();
    method public void writeToParcel(@NonNull android.os.Parcel, int);
    field @NonNull public static final android.os.Parcelable.Creator<android.car.input.RotaryEvent> CREATOR;
  }

}

package android.car.media {

  public final class CarAudioManager {
    method @Deprecated @RequiresPermission(android.car.Car.PERMISSION_CAR_CONTROL_AUDIO_SETTINGS) public android.car.media.CarAudioPatchHandle createAudioPatch(String, int, int);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull @RequiresPermission(android.car.Car.PERMISSION_CAR_CONTROL_AUDIO_VOLUME) public java.util.List<android.media.AudioAttributes> getAudioAttributesForVolumeGroup(@NonNull android.car.media.CarVolumeGroupInfo);
    method @NonNull @RequiresPermission(android.car.Car.PERMISSION_CAR_CONTROL_AUDIO_SETTINGS) public java.util.List<java.lang.Integer> getAudioZoneIds();
    method @Deprecated @NonNull @RequiresPermission(android.car.Car.PERMISSION_CAR_CONTROL_AUDIO_SETTINGS) public String[] getExternalSources();
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_CONTROL_AUDIO_VOLUME) public int getGroupMaxVolume(int);
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_CONTROL_AUDIO_VOLUME) public int getGroupMaxVolume(int, int);
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_CONTROL_AUDIO_VOLUME) public int getGroupMinVolume(int);
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_CONTROL_AUDIO_VOLUME) public int getGroupMinVolume(int, int);
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_CONTROL_AUDIO_VOLUME) public int getGroupVolume(int);
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_CONTROL_AUDIO_VOLUME) public int getGroupVolume(int, int);
    method @NonNull @RequiresPermission(android.car.Car.PERMISSION_CAR_CONTROL_AUDIO_SETTINGS) public java.util.List<android.media.AudioDeviceInfo> getInputDevicesForZoneId(int);
    method @Nullable @RequiresPermission(android.car.Car.PERMISSION_CAR_CONTROL_AUDIO_SETTINGS) public android.media.AudioDeviceInfo getOutputDeviceForUsage(int, int);
    method @NonNull @RequiresPermission(android.car.Car.PERMISSION_CAR_CONTROL_AUDIO_VOLUME) public int[] getUsagesForVolumeGroupId(int);
    method @NonNull @RequiresPermission(android.car.Car.PERMISSION_CAR_CONTROL_AUDIO_VOLUME) public int[] getUsagesForVolumeGroupId(int, int);
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_CONTROL_AUDIO_VOLUME) public int getVolumeGroupCount();
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_CONTROL_AUDIO_VOLUME) public int getVolumeGroupCount(int);
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_CONTROL_AUDIO_VOLUME) public int getVolumeGroupIdForUsage(int);
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_CONTROL_AUDIO_VOLUME) public int getVolumeGroupIdForUsage(int, int);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @Nullable @RequiresPermission(android.car.Car.PERMISSION_CAR_CONTROL_AUDIO_VOLUME) public android.car.media.CarVolumeGroupInfo getVolumeGroupInfo(int, int);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull @RequiresPermission(android.car.Car.PERMISSION_CAR_CONTROL_AUDIO_VOLUME) public java.util.List<android.car.media.CarVolumeGroupInfo> getVolumeGroupInfosForZone(int);
    method @Deprecated public boolean isDynamicRoutingEnabled();
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_CONTROL_AUDIO_VOLUME) public boolean isPlaybackOnVolumeGroupActive(int, int);
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_CONTROL_AUDIO_VOLUME) public boolean isVolumeGroupMuted(int, int);
    method @Deprecated @RequiresPermission(android.car.Car.PERMISSION_CAR_CONTROL_AUDIO_SETTINGS) public void releaseAudioPatch(android.car.media.CarAudioPatchHandle);
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_CONTROL_AUDIO_VOLUME) public void setBalanceTowardRight(float);
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_CONTROL_AUDIO_VOLUME) public void setFadeTowardFront(float);
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_CONTROL_AUDIO_VOLUME) public void setGroupVolume(int, int, int);
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_CONTROL_AUDIO_VOLUME) public void setGroupVolume(int, int, int, int);
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_CONTROL_AUDIO_VOLUME) public void setVolumeGroupMute(int, int, boolean, int);
    field public static final String AUDIOFOCUS_EXTRA_RECEIVE_DUCKING_EVENTS = "android.car.media.AUDIOFOCUS_EXTRA_RECEIVE_DUCKING_EVENTS";
    field public static final int INVALID_AUDIO_ZONE = -1; // 0xffffffff
    field public static final int PRIMARY_AUDIO_ZONE = 0; // 0x0
  }

  public final class CarAudioPatchHandle implements android.os.Parcelable {
    method public int describeContents();
    method public void writeToParcel(android.os.Parcel, int);
    field public static final android.os.Parcelable.Creator<android.car.media.CarAudioPatchHandle> CREATOR;
  }

  public final class CarMediaManager {
    method @RequiresPermission(android.Manifest.permission.MEDIA_CONTENT_CONTROL) public void addMediaSourceListener(@NonNull android.car.media.CarMediaManager.MediaSourceChangedListener, int);
    method @NonNull @RequiresPermission(android.Manifest.permission.MEDIA_CONTENT_CONTROL) public java.util.List<android.content.ComponentName> getLastMediaSources(int);
    method @NonNull @RequiresPermission(android.Manifest.permission.MEDIA_CONTENT_CONTROL) public android.content.ComponentName getMediaSource(int);
    method @RequiresPermission(android.Manifest.permission.MEDIA_CONTENT_CONTROL) public void removeMediaSourceListener(@NonNull android.car.media.CarMediaManager.MediaSourceChangedListener, int);
    method @RequiresPermission(android.Manifest.permission.MEDIA_CONTENT_CONTROL) public void setMediaSource(@NonNull android.content.ComponentName, int);
    field public static final int MEDIA_SOURCE_MODE_BROWSE = 1; // 0x1
    field public static final int MEDIA_SOURCE_MODE_PLAYBACK = 0; // 0x0
  }

  public static interface CarMediaManager.MediaSourceChangedListener {
    method public void onMediaSourceChanged(@NonNull android.content.ComponentName);
  }

  @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public final class CarVolumeGroupInfo implements android.os.Parcelable {
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public int describeContents();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public int getId();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public int getMaxVolumeGainIndex();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public int getMinVolumeGainIndex();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public String getName();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public int getVolumeGainIndex();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public int getZoneId();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public boolean isAttenuated();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public boolean isBlocked();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public boolean isMuted();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public boolean isSameVolumeGroup(@Nullable android.car.media.CarVolumeGroupInfo);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public void writeToParcel(@NonNull android.os.Parcel, int);
    field @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public static final android.os.Parcelable.Creator<android.car.media.CarVolumeGroupInfo> CREATOR;
  }

  @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public static final class CarVolumeGroupInfo.Builder {
    ctor public CarVolumeGroupInfo.Builder(@NonNull String, int, int);
    ctor public CarVolumeGroupInfo.Builder(@NonNull android.car.media.CarVolumeGroupInfo);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.media.CarVolumeGroupInfo build();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.media.CarVolumeGroupInfo.Builder setAttenuated(boolean);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.media.CarVolumeGroupInfo.Builder setBlocked(boolean);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.media.CarVolumeGroupInfo.Builder setMaxVolumeGainIndex(int);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.media.CarVolumeGroupInfo.Builder setMinVolumeGainIndex(int);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.media.CarVolumeGroupInfo.Builder setMuted(boolean);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.media.CarVolumeGroupInfo.Builder setVolumeGainIndex(int);
  }

}

package android.car.navigation {

  public final class CarNavigationInstrumentCluster implements android.os.Parcelable {
    ctor public CarNavigationInstrumentCluster(android.car.navigation.CarNavigationInstrumentCluster);
    method public static android.car.navigation.CarNavigationInstrumentCluster createCluster(int);
    method public static android.car.navigation.CarNavigationInstrumentCluster createCustomImageCluster(int, int, int, int);
    method public int describeContents();
    method public int getImageColorDepthBits();
    method public int getImageHeight();
    method public int getImageWidth();
    method public int getMinIntervalMillis();
    method public int getType();
    method public boolean supportsCustomImages();
    method public void writeToParcel(android.os.Parcel, int);
    field public static final int CLUSTER_TYPE_CUSTOM_IMAGES_SUPPORTED = 1; // 0x1
    field public static final int CLUSTER_TYPE_IMAGE_CODES_ONLY = 2; // 0x2
    field public static final android.os.Parcelable.Creator<android.car.navigation.CarNavigationInstrumentCluster> CREATOR;
  }

  public final class CarNavigationStatusManager {
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_NAVIGATION_MANAGER) public android.car.navigation.CarNavigationInstrumentCluster getInstrumentClusterInfo();
    method @Deprecated @RequiresPermission(android.car.Car.PERMISSION_CAR_NAVIGATION_MANAGER) public void sendEvent(int, android.os.Bundle);
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_NAVIGATION_MANAGER) public void sendNavigationStateChange(android.os.Bundle);
  }

}

package android.car.oem {

  @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public final class AudioFocusEntry implements android.os.Parcelable {
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public int describeContents();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public int getAudioContextId();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.media.AudioFocusInfo getAudioFocusInfo();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public int getAudioFocusResult();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public int getAudioVolumeGroupId();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public void writeToParcel(@NonNull android.os.Parcel, int);
    field @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public static final android.os.Parcelable.Creator<android.car.oem.AudioFocusEntry> CREATOR;
  }

  @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public static final class AudioFocusEntry.Builder {
    ctor public AudioFocusEntry.Builder(@NonNull android.car.oem.AudioFocusEntry);
    ctor public AudioFocusEntry.Builder(@NonNull android.media.AudioFocusInfo, int, int, int);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.oem.AudioFocusEntry build();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.oem.AudioFocusEntry.Builder setAudioContextId(int);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.oem.AudioFocusEntry.Builder setAudioFocusInfo(@NonNull android.media.AudioFocusInfo);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.oem.AudioFocusEntry.Builder setAudioFocusResult(int);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.oem.AudioFocusEntry.Builder setAudioVolumeGroupId(int);
  }

  public interface OemCarAudioDuckingService extends android.car.oem.OemCarServiceComponent {
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public java.util.List<android.media.AudioAttributes> evaluateAttributesToDuck(@NonNull android.car.oem.OemCarAudioVolumeRequest);
  }

  @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public final class OemCarAudioFocusEvaluationRequest implements android.os.Parcelable {
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public int describeContents();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @Nullable public android.car.oem.AudioFocusEntry getAudioFocusRequest();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public int getAudioZoneId();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public java.util.List<android.car.oem.AudioFocusEntry> getFocusHolders();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public java.util.List<android.car.oem.AudioFocusEntry> getFocusLosers();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public java.util.List<android.car.media.CarVolumeGroupInfo> getMutedVolumeGroups();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public void writeToParcel(@NonNull android.os.Parcel, int);
    field @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public static final android.os.Parcelable.Creator<android.car.oem.OemCarAudioFocusEvaluationRequest> CREATOR;
  }

  @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public static final class OemCarAudioFocusEvaluationRequest.Builder {
    ctor public OemCarAudioFocusEvaluationRequest.Builder(@NonNull java.util.List<android.car.media.CarVolumeGroupInfo>, @NonNull java.util.List<android.car.oem.AudioFocusEntry>, @NonNull java.util.List<android.car.oem.AudioFocusEntry>, int);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.oem.OemCarAudioFocusEvaluationRequest.Builder addFocusHolders(@NonNull android.car.oem.AudioFocusEntry);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.oem.OemCarAudioFocusEvaluationRequest.Builder addFocusLosers(@NonNull android.car.oem.AudioFocusEntry);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.oem.OemCarAudioFocusEvaluationRequest.Builder addMutedVolumeGroups(@NonNull android.car.media.CarVolumeGroupInfo);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.oem.OemCarAudioFocusEvaluationRequest build();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.oem.OemCarAudioFocusEvaluationRequest.Builder setAudioFocusRequest(@NonNull android.car.oem.AudioFocusEntry);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.oem.OemCarAudioFocusEvaluationRequest.Builder setAudioZoneId(int);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.oem.OemCarAudioFocusEvaluationRequest.Builder setFocusHolders(@NonNull java.util.List<android.car.oem.AudioFocusEntry>);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.oem.OemCarAudioFocusEvaluationRequest.Builder setFocusLosers(@NonNull java.util.List<android.car.oem.AudioFocusEntry>);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.oem.OemCarAudioFocusEvaluationRequest.Builder setMutedVolumeGroups(@NonNull java.util.List<android.car.media.CarVolumeGroupInfo>);
  }

  @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public final class OemCarAudioFocusResult implements android.os.Parcelable {
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public int describeContents();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @Nullable public android.car.oem.AudioFocusEntry getAudioFocusEntry();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public int getAudioFocusResult();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public java.util.List<android.car.oem.AudioFocusEntry> getNewlyBlockedAudioFocusEntries();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public java.util.List<android.car.oem.AudioFocusEntry> getNewlyLostAudioFocusEntries();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public void writeToParcel(@NonNull android.os.Parcel, int);
    field @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public static final android.os.Parcelable.Creator<android.car.oem.OemCarAudioFocusResult> CREATOR;
    field @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public static final android.car.oem.OemCarAudioFocusResult EMPTY_OEM_CAR_AUDIO_FOCUS_RESULTS;
  }

  public static final class OemCarAudioFocusResult.Builder {
    ctor public OemCarAudioFocusResult.Builder(@NonNull java.util.List<android.car.oem.AudioFocusEntry>, @NonNull java.util.List<android.car.oem.AudioFocusEntry>, int);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.oem.OemCarAudioFocusResult.Builder addNewlyBlockedAudioFocusEntry(@NonNull android.car.oem.AudioFocusEntry);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.oem.OemCarAudioFocusResult.Builder addNewlyLostAudioFocusEntry(@NonNull android.car.oem.AudioFocusEntry);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.oem.OemCarAudioFocusResult build();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.oem.OemCarAudioFocusResult.Builder setAudioFocusEntry(@NonNull android.car.oem.AudioFocusEntry);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.oem.OemCarAudioFocusResult.Builder setAudioFocusResult(int);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.oem.OemCarAudioFocusResult.Builder setNewlyBlockedAudioFocusEntries(@NonNull java.util.List<android.car.oem.AudioFocusEntry>);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.oem.OemCarAudioFocusResult.Builder setNewlyLostAudioFocusEntries(@NonNull java.util.List<android.car.oem.AudioFocusEntry>);
  }

  public interface OemCarAudioFocusService extends android.car.oem.OemCarServiceComponent {
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.oem.OemCarAudioFocusResult evaluateAudioFocusRequest(@NonNull android.car.oem.OemCarAudioFocusEvaluationRequest);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public void notifyAudioFocusChange(@NonNull java.util.List<android.media.AudioFocusInfo>, @NonNull java.util.List<android.media.AudioFocusInfo>, int);
  }

  @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public final class OemCarAudioVolumeRequest implements android.os.Parcelable {
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public int describeContents();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public java.util.List<android.media.AudioAttributes> getActivePlaybackAttributes();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public int getAudioZoneId();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public int getCallState();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public java.util.List<android.car.media.CarVolumeGroupInfo> getCarVolumeGroupInfos();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public java.util.List<android.media.AudioAttributes> getDuckedAudioAttributes();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public void writeToParcel(@NonNull android.os.Parcel, int);
    field @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public static final android.os.Parcelable.Creator<android.car.oem.OemCarAudioVolumeRequest> CREATOR;
  }

  @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public static final class OemCarAudioVolumeRequest.Builder {
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.oem.OemCarAudioVolumeRequest.Builder addActivePlaybackAttributes(@NonNull android.media.AudioAttributes);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.oem.OemCarAudioVolumeRequest.Builder addCarVolumeGroupInfos(@NonNull android.car.media.CarVolumeGroupInfo);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.oem.OemCarAudioVolumeRequest.Builder addDuckedAudioAttributes(@NonNull android.media.AudioAttributes);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.oem.OemCarAudioVolumeRequest build();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.oem.OemCarAudioVolumeRequest.Builder setActivePlaybackAttributes(@NonNull java.util.List<android.media.AudioAttributes>);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.oem.OemCarAudioVolumeRequest.Builder setCallState(int);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.oem.OemCarAudioVolumeRequest.Builder setCarVolumeGroupInfos(@NonNull java.util.List<android.car.media.CarVolumeGroupInfo>);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.oem.OemCarAudioVolumeRequest.Builder setDuckedAudioAttributes(@NonNull java.util.List<android.media.AudioAttributes>);
  }

  public interface OemCarAudioVolumeService extends android.car.oem.OemCarServiceComponent {
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.oem.OemCarVolumeChangeInfo getSuggestedGroupForVolumeChange(@NonNull android.car.oem.OemCarAudioVolumeRequest, int);
  }

  public abstract class OemCarService extends android.app.Service {
    ctor public OemCarService();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_2, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @CallSuper public void dump(@Nullable java.io.FileDescriptor, @Nullable java.io.PrintWriter, @Nullable String[]);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @Nullable public android.car.oem.OemCarAudioDuckingService getOemAudioDuckingService();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @Nullable public android.car.oem.OemCarAudioFocusService getOemAudioFocusService();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @Nullable public android.car.oem.OemCarAudioVolumeService getOemAudioVolumeService();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_2, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public abstract android.car.CarVersion getSupportedCarVersion();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_2, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public final android.os.IBinder onBind(@Nullable android.content.Intent);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_2, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public abstract void onCarServiceReady();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_2, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public final int onStartCommand(@Nullable android.content.Intent, int, int);
  }

  public interface OemCarServiceComponent {
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_2, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public void dump(@Nullable java.io.PrintWriter, @Nullable String[]);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_2, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public void init();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_2, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public void onCarServiceReady();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_2, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public void release();
  }

  @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public final class OemCarVolumeChangeInfo implements android.os.Parcelable {
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public int describeContents();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @Nullable public android.car.media.CarVolumeGroupInfo getChangedVolumeGroup();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public boolean isVolumeChanged();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public void writeToParcel(@NonNull android.os.Parcel, int);
    field @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public static final android.os.Parcelable.Creator<android.car.oem.OemCarVolumeChangeInfo> CREATOR;
    field @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public static final android.car.oem.OemCarVolumeChangeInfo EMPTY_OEM_VOLUME_CHANGE;
  }

  @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) public static final class OemCarVolumeChangeInfo.Builder {
    ctor public OemCarVolumeChangeInfo.Builder(boolean);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.oem.OemCarVolumeChangeInfo build();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_3, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @NonNull public android.car.oem.OemCarVolumeChangeInfo.Builder setChangedVolumeGroup(@NonNull android.car.media.CarVolumeGroupInfo);
  }

}

package android.car.os {

  public final class CarPerformanceManager {
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_1, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_1) @NonNull @RequiresPermission(android.car.Car.PERMISSION_MANAGE_THREAD_PRIORITY) public android.car.os.ThreadPolicyWithPriority getThreadPriority();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_1, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_1) @RequiresPermission(android.car.Car.PERMISSION_MANAGE_THREAD_PRIORITY) public void setThreadPriority(@NonNull android.car.os.ThreadPolicyWithPriority) throws android.car.os.CarPerformanceManager.SetSchedulerFailedException;
  }

  @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_1, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_1) public static final class CarPerformanceManager.SetSchedulerFailedException extends java.lang.Exception {
  }

  public final class ThreadPolicyWithPriority implements android.os.Parcelable {
    ctor public ThreadPolicyWithPriority(int, @IntRange(from=0, to=99) int);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_1, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_1) public int describeContents();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_1, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_1) public int getPolicy();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_1, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_1) @IntRange(from=0, to=99) public int getPriority();
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_1, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_1) public void writeToParcel(@NonNull android.os.Parcel, int);
    field @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_1, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_1) @NonNull public static final android.os.Parcelable.Creator<android.car.os.ThreadPolicyWithPriority> CREATOR;
    field @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_1, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_1) public static final int PRIORITY_MAX = 99; // 0x63
    field @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_1, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_1) public static final int PRIORITY_MIN = 1; // 0x1
    field @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_1, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_1) public static final int SCHED_DEFAULT = 0; // 0x0
    field @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_1, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_1) public static final int SCHED_FIFO = 1; // 0x1
    field @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_1, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_1) public static final int SCHED_RR = 2; // 0x2
  }

}

package android.car.projection {

  public class ProjectionOptions {
    ctor public ProjectionOptions(android.os.Bundle);
    method @Nullable public android.app.ActivityOptions getActivityOptions();
    method @Nullable public android.content.ComponentName getConsentActivity();
    method public int getProjectionAccessPointMode();
    method public int getUiMode();
    method @NonNull public android.os.Bundle toBundle();
    field public static final int AP_MODE_LOHS_DYNAMIC_CREDENTIALS = 2; // 0x2
    field public static final int AP_MODE_LOHS_STATIC_CREDENTIALS = 3; // 0x3
    field public static final int AP_MODE_NOT_SPECIFIED = 0; // 0x0
    field public static final int AP_MODE_TETHERED = 1; // 0x1
    field public static final int UI_MODE_BLENDED = 1; // 0x1
    field public static final int UI_MODE_FULL_SCREEN = 0; // 0x0
  }

  public final class ProjectionStatus implements android.os.Parcelable {
    method @NonNull public static android.car.projection.ProjectionStatus.Builder builder(String, int);
    method public int describeContents();
    method @NonNull public java.util.List<android.car.projection.ProjectionStatus.MobileDevice> getConnectedMobileDevices();
    method @NonNull public android.os.Bundle getExtras();
    method @NonNull public String getPackageName();
    method public int getState();
    method public int getTransport();
    method public boolean isActive();
    method public void writeToParcel(android.os.Parcel, int);
    field public static final android.os.Parcelable.Creator<android.car.projection.ProjectionStatus> CREATOR;
    field public static final int PROJECTION_STATE_ACTIVE_BACKGROUND = 3; // 0x3
    field public static final int PROJECTION_STATE_ACTIVE_FOREGROUND = 2; // 0x2
    field public static final int PROJECTION_STATE_INACTIVE = 0; // 0x0
    field public static final int PROJECTION_STATE_READY_TO_PROJECT = 1; // 0x1
    field public static final int PROJECTION_TRANSPORT_NONE = 0; // 0x0
    field public static final int PROJECTION_TRANSPORT_USB = 1; // 0x1
    field public static final int PROJECTION_TRANSPORT_WIFI = 2; // 0x2
  }

  public static final class ProjectionStatus.Builder {
    method @NonNull public android.car.projection.ProjectionStatus.Builder addMobileDevice(android.car.projection.ProjectionStatus.MobileDevice);
    method public android.car.projection.ProjectionStatus build();
    method @NonNull public android.car.projection.ProjectionStatus.Builder setExtras(android.os.Bundle);
    method @NonNull public android.car.projection.ProjectionStatus.Builder setProjectionTransport(int);
  }

  public static final class ProjectionStatus.MobileDevice implements android.os.Parcelable {
    method @NonNull public static android.car.projection.ProjectionStatus.MobileDevice.Builder builder(int, String);
    method public int describeContents();
    method @NonNull public java.util.List<java.lang.Integer> getAvailableTransports();
    method @NonNull public android.os.Bundle getExtras();
    method public int getId();
    method @NonNull public String getName();
    method public boolean isProjecting();
    method public void writeToParcel(android.os.Parcel, int);
    field public static final android.os.Parcelable.Creator<android.car.projection.ProjectionStatus.MobileDevice> CREATOR;
  }

  public static final class ProjectionStatus.MobileDevice.Builder {
    method @NonNull public android.car.projection.ProjectionStatus.MobileDevice.Builder addTransport(int);
    method @NonNull public android.car.projection.ProjectionStatus.MobileDevice build();
    method @NonNull public android.car.projection.ProjectionStatus.MobileDevice.Builder setExtras(android.os.Bundle);
    method @NonNull public android.car.projection.ProjectionStatus.MobileDevice.Builder setProjecting(boolean);
  }

}

package android.car.settings {

  public class CarSettings {
  }

  public static final class CarSettings.Secure {
    field public static final String KEY_AUDIO_FOCUS_NAVIGATION_REJECTED_DURING_CALL = "android.car.KEY_AUDIO_FOCUS_NAVIGATION_REJECTED_DURING_CALL";
    field public static final String KEY_AUDIO_PERSIST_VOLUME_GROUP_MUTE_STATES = "android.car.KEY_AUDIO_PERSIST_VOLUME_GROUP_MUTE_STATES";
    field public static final String KEY_ENABLE_INITIAL_NOTICE_SCREEN_TO_USER = "android.car.ENABLE_INITIAL_NOTICE_SCREEN_TO_USER";
    field public static final String KEY_PACKAGES_DISABLED_ON_RESOURCE_OVERUSE = "android.car.KEY_PACKAGES_DISABLED_ON_RESOURCE_OVERUSE";
    field public static final String KEY_ROTARY_KEY_EVENT_FILTER = "android.car.ROTARY_KEY_EVENT_FILTER";
    field public static final String KEY_SETUP_WIZARD_IN_PROGRESS = "android.car.SETUP_WIZARD_IN_PROGRESS";
  }

}

package android.car.storagemonitoring {

  public final class CarStorageMonitoringManager {
    method @Deprecated @RequiresPermission(android.car.Car.PERMISSION_STORAGE_MONITORING) public java.util.List<android.car.storagemonitoring.IoStatsEntry> getAggregateIoStats();
    method @Deprecated @RequiresPermission(android.car.Car.PERMISSION_STORAGE_MONITORING) public java.util.List<android.car.storagemonitoring.IoStatsEntry> getBootIoStats();
    method @Deprecated @RequiresPermission(android.car.Car.PERMISSION_STORAGE_MONITORING) public java.util.List<android.car.storagemonitoring.IoStats> getIoStatsDeltas();
    method @RequiresPermission(android.car.Car.PERMISSION_STORAGE_MONITORING) public int getPreEolIndicatorStatus();
    method @Deprecated @RequiresPermission(android.car.Car.PERMISSION_STORAGE_MONITORING) public long getShutdownDiskWriteAmount();
    method @Deprecated @RequiresPermission(android.car.Car.PERMISSION_STORAGE_MONITORING) public android.car.storagemonitoring.WearEstimate getWearEstimate();
    method @Deprecated @RequiresPermission(android.car.Car.PERMISSION_STORAGE_MONITORING) public java.util.List<android.car.storagemonitoring.WearEstimateChange> getWearEstimateHistory();
    method @Deprecated @RequiresPermission(android.car.Car.PERMISSION_STORAGE_MONITORING) public void registerListener(android.car.storagemonitoring.CarStorageMonitoringManager.IoStatsListener);
    method @Deprecated @RequiresPermission(android.car.Car.PERMISSION_STORAGE_MONITORING) public void unregisterListener(android.car.storagemonitoring.CarStorageMonitoringManager.IoStatsListener);
    field public static final String INTENT_EXCESSIVE_IO = "android.car.storagemonitoring.EXCESSIVE_IO";
    field public static final int PRE_EOL_INFO_NORMAL = 1; // 0x1
    field public static final int PRE_EOL_INFO_UNKNOWN = 0; // 0x0
    field public static final int PRE_EOL_INFO_URGENT = 3; // 0x3
    field public static final int PRE_EOL_INFO_WARNING = 2; // 0x2
    field public static final long SHUTDOWN_COST_INFO_MISSING = -1L; // 0xffffffffffffffffL
  }

  @Deprecated public static interface CarStorageMonitoringManager.IoStatsListener {
    method @Deprecated public void onSnapshot(android.car.storagemonitoring.IoStats);
  }

  @Deprecated public final class IoStats implements android.os.Parcelable {
    ctor @Deprecated public IoStats(java.util.List<android.car.storagemonitoring.IoStatsEntry>, long);
    ctor @Deprecated public IoStats(android.os.Parcel);
    method @Deprecated public int describeContents();
    method @Deprecated public android.car.storagemonitoring.IoStatsEntry.Metrics getBackgroundTotals();
    method @Deprecated public android.car.storagemonitoring.IoStatsEntry.Metrics getForegroundTotals();
    method @Deprecated public java.util.List<android.car.storagemonitoring.IoStatsEntry> getStats();
    method @Deprecated public long getTimestamp();
    method @Deprecated public android.car.storagemonitoring.IoStatsEntry.Metrics getTotals();
    method @Deprecated public android.car.storagemonitoring.IoStatsEntry getUserIdStats(int);
    method @Deprecated public void writeToParcel(android.os.Parcel, int);
    field @Deprecated public static final android.os.Parcelable.Creator<android.car.storagemonitoring.IoStats> CREATOR;
  }

  @Deprecated public final class IoStatsEntry implements android.os.Parcelable {
    ctor @Deprecated public IoStatsEntry(int, long, android.car.storagemonitoring.IoStatsEntry.Metrics, android.car.storagemonitoring.IoStatsEntry.Metrics);
    ctor @Deprecated public IoStatsEntry(android.os.Parcel);
    ctor @Deprecated public IoStatsEntry(android.car.storagemonitoring.UidIoRecord, long);
    method @Deprecated public int describeContents();
    method @Deprecated public void writeToParcel(android.os.Parcel, int);
    field @Deprecated public static final android.os.Parcelable.Creator<android.car.storagemonitoring.IoStatsEntry> CREATOR;
    field @Deprecated public final android.car.storagemonitoring.IoStatsEntry.Metrics background;
    field @Deprecated public final android.car.storagemonitoring.IoStatsEntry.Metrics foreground;
    field @Deprecated public final long runtimeMillis;
    field @Deprecated public final int uid;
  }

  @Deprecated public static final class IoStatsEntry.Metrics implements android.os.Parcelable {
    ctor @Deprecated public IoStatsEntry.Metrics(long, long, long, long, long);
    ctor @Deprecated public IoStatsEntry.Metrics(android.os.Parcel);
    method @Deprecated public int describeContents();
    method @Deprecated public void writeToParcel(android.os.Parcel, int);
    field @Deprecated public static final android.os.Parcelable.Creator<android.car.storagemonitoring.IoStatsEntry.Metrics> CREATOR;
    field @Deprecated public final long bytesRead;
    field @Deprecated public final long bytesReadFromStorage;
    field @Deprecated public final long bytesWritten;
    field @Deprecated public final long bytesWrittenToStorage;
    field @Deprecated public final long fsyncCalls;
  }

  public final class LifetimeWriteInfo implements android.os.Parcelable {
    ctor public LifetimeWriteInfo(String, String, long);
    ctor public LifetimeWriteInfo(android.os.Parcel);
    method public int describeContents();
    method public void writeToParcel(android.os.Parcel, int);
    field public static final android.os.Parcelable.Creator<android.car.storagemonitoring.IoStats> CREATOR;
    field public final String fstype;
    field public final String partition;
    field public final long writtenBytes;
  }

  public final class UidIoRecord {
    ctor public UidIoRecord(int, long, long, long, long, long, long, long, long, long, long);
    field public final long background_fsync;
    field public final long background_rchar;
    field public final long background_read_bytes;
    field public final long background_wchar;
    field public final long background_write_bytes;
    field public final long foreground_fsync;
    field public final long foreground_rchar;
    field public final long foreground_read_bytes;
    field public final long foreground_wchar;
    field public final long foreground_write_bytes;
    field public final int uid;
  }

  public final class WearEstimate implements android.os.Parcelable {
    ctor public WearEstimate(int, int);
    ctor public WearEstimate(android.os.Parcel);
    method public int describeContents();
    method public void writeToParcel(android.os.Parcel, int);
    field public static final android.os.Parcelable.Creator<android.car.storagemonitoring.WearEstimate> CREATOR;
    field public static final int UNKNOWN = -1; // 0xffffffff
    field @IntRange(from=0xffffffff, to=100) public final int typeA;
    field @IntRange(from=0xffffffff, to=100) public final int typeB;
  }

  public final class WearEstimateChange implements android.os.Parcelable {
    ctor public WearEstimateChange(android.car.storagemonitoring.WearEstimate, android.car.storagemonitoring.WearEstimate, long, java.time.Instant, boolean);
    ctor public WearEstimateChange(android.os.Parcel);
    method public int describeContents();
    method public void writeToParcel(android.os.Parcel, int);
    field public static final android.os.Parcelable.Creator<android.car.storagemonitoring.WearEstimateChange> CREATOR;
    field @NonNull public final java.time.Instant dateAtChange;
    field public final boolean isAcceptableDegradation;
    field @NonNull public final android.car.storagemonitoring.WearEstimate newEstimate;
    field @NonNull public final android.car.storagemonitoring.WearEstimate oldEstimate;
    field public final long uptimeAtChange;
  }

}

package android.car.telemetry {

  public final class CarTelemetryManager {
    method @RequiresPermission(android.car.Car.PERMISSION_USE_CAR_TELEMETRY_SERVICE) public void addMetricsConfig(@NonNull String, @NonNull byte[], @NonNull java.util.concurrent.Executor, @NonNull android.car.telemetry.CarTelemetryManager.AddMetricsConfigCallback);
    method @RequiresPermission(android.car.Car.PERMISSION_USE_CAR_TELEMETRY_SERVICE) public void clearReportReadyListener();
    method @RequiresPermission(android.car.Car.PERMISSION_USE_CAR_TELEMETRY_SERVICE) public void getAllFinishedReports(@NonNull java.util.concurrent.Executor, @NonNull android.car.telemetry.CarTelemetryManager.MetricsReportCallback);
    method @RequiresPermission(android.car.Car.PERMISSION_USE_CAR_TELEMETRY_SERVICE) public void getFinishedReport(@NonNull String, @NonNull java.util.concurrent.Executor, @NonNull android.car.telemetry.CarTelemetryManager.MetricsReportCallback);
    method @RequiresPermission(android.car.Car.PERMISSION_USE_CAR_TELEMETRY_SERVICE) public void removeAllMetricsConfigs();
    method @RequiresPermission(android.car.Car.PERMISSION_USE_CAR_TELEMETRY_SERVICE) public void removeMetricsConfig(@NonNull String);
    method @RequiresPermission(android.car.Car.PERMISSION_USE_CAR_TELEMETRY_SERVICE) public void setReportReadyListener(@NonNull java.util.concurrent.Executor, @NonNull android.car.telemetry.CarTelemetryManager.ReportReadyListener);
    field public static final int STATUS_ADD_METRICS_CONFIG_ALREADY_EXISTS = 1; // 0x1
    field public static final int STATUS_ADD_METRICS_CONFIG_PARSE_FAILED = 3; // 0x3
    field public static final int STATUS_ADD_METRICS_CONFIG_SIGNATURE_VERIFICATION_FAILED = 4; // 0x4
    field public static final int STATUS_ADD_METRICS_CONFIG_SUCCEEDED = 0; // 0x0
    field public static final int STATUS_ADD_METRICS_CONFIG_UNKNOWN = 5; // 0x5
    field public static final int STATUS_ADD_METRICS_CONFIG_VERSION_TOO_OLD = 2; // 0x2
    field public static final int STATUS_GET_METRICS_CONFIG_DOES_NOT_EXIST = 4; // 0x4
    field public static final int STATUS_GET_METRICS_CONFIG_FINISHED = 0; // 0x0
    field public static final int STATUS_GET_METRICS_CONFIG_INTERIM_RESULTS = 2; // 0x2
    field public static final int STATUS_GET_METRICS_CONFIG_PENDING = 1; // 0x1
    field public static final int STATUS_GET_METRICS_CONFIG_RUNTIME_ERROR = 3; // 0x3
  }

  public static interface CarTelemetryManager.AddMetricsConfigCallback {
    method public void onAddMetricsConfigStatus(@NonNull String, int);
  }

  public static interface CarTelemetryManager.MetricsReportCallback {
    method public void onResult(@NonNull String, @Nullable android.os.PersistableBundle, @Nullable byte[], int);
  }

  public static interface CarTelemetryManager.ReportReadyListener {
    method public void onReady(@NonNull String);
  }

}

package android.car.test {

  public final class CarTestManager {
    ctor public CarTestManager(@NonNull android.car.Car, @NonNull android.os.IBinder);
    method @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_2, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_0) @RequiresPermission(android.car.Car.PERMISSION_CAR_TEST_SERVICE) public String getOemServiceName() throws android.os.RemoteException;
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_TEST_SERVICE) public void startCarService(@NonNull android.os.IBinder);
    method @RequiresPermission(android.car.Car.PERMISSION_CAR_TEST_SERVICE) public void stopCarService(@NonNull android.os.IBinder);
  }

}

package android.car.user {

  public final class CarUserManager {
    method @RequiresPermission(anyOf={android.Manifest.permission.INTERACT_ACROSS_USERS, android.Manifest.permission.INTERACT_ACROSS_USERS_FULL}) public void addListener(@NonNull java.util.concurrent.Executor, @NonNull android.car.user.CarUserManager.UserLifecycleListener);
    method @RequiresPermission(anyOf={android.Manifest.permission.INTERACT_ACROSS_USERS, android.Manifest.permission.INTERACT_ACROSS_USERS_FULL}) public void addListener(@NonNull java.util.concurrent.Executor, @NonNull android.car.user.UserLifecycleEventFilter, @NonNull android.car.user.CarUserManager.UserLifecycleListener);
    method public static String lifecycleEventTypeToString(int);
    method @RequiresPermission(anyOf={android.Manifest.permission.INTERACT_ACROSS_USERS, android.Manifest.permission.INTERACT_ACROSS_USERS_FULL}) public void removeListener(@NonNull android.car.user.CarUserManager.UserLifecycleListener);
    method @RequiresPermission(anyOf={android.Manifest.permission.MANAGE_USERS, android.Manifest.permission.CREATE_USERS}) public android.car.util.concurrent.AsyncFuture<android.car.user.UserSwitchResult> switchUser(int);
    field @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_1, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_1) public static final int USER_LIFECYCLE_EVENT_TYPE_CREATED = 8; // 0x8
    field @android.car.annotation.ApiRequirements(minCarVersion=android.car.annotation.ApiRequirements.CarVersion.TIRAMISU_1, minPlatformVersion=android.car.annotation.ApiRequirements.PlatformVersion.TIRAMISU_1) public static final int USER_LIFECYCLE_EVENT_TYPE_REMOVED = 9; // 0x9
    field public static final int USER_LIFECYCLE_EVENT_TYPE_STARTING = 1; // 0x1
    field public static final int USER_LIFECYCLE_EVENT_TYPE_STOPPED = 6; // 0x6
    field public static final int USER_LIFECYCLE_EVENT_TYPE_STOPPING = 5; // 0x5
    field public static final int USER_LIFECYCLE_EVENT_TYPE_SWITCHING = 2; // 0x2
    field public static final int USER_LIFECYCLE_EVENT_TYPE_UNLOCKED = 4; // 0x4
    field public static final int USER_LIFECYCLE_EVENT_TYPE_UNLOCKING = 3; // 0x3
  }

  public static final class CarUserManager.UserLifecycleEvent {
    method public int getEventType();
    method @Nullable public android.os.UserHandle getPreviousUserHandle();
    method @NonNull public android.os.UserHandle getUserHandle();
  }

  public static interface CarUserManager.UserLifecycleListener {
    method public void onEvent(@NonNull android.car.user.CarUserManager.UserLifecycleEvent);
  }

  public final class UserLifecycleEventFilter implements android.os.Parcelable {
    method public boolean apply(@NonNull android.car.user.CarUserManager.UserLifecycleEvent);
    method public int describeContents();
    method public void writeToParcel(@NonNull android.os.Parcel, int);
    field @NonNull public static final android.os.Parcelable.Creator<android.car.user.UserLifecycleEventFilter> CREATOR;
  }

  public final class UserSwitchResult implements android.os.Parcelable {
    method public int describeContents();
    method @Nullable public String getErrorMessage();
    method public int getStatus();
    method public boolean isSuccess();
    method public void writeToParcel(@NonNull android.os.Parcel, int);
    field @NonNull public static final android.os.Parcelable.Creator<android.car.user.UserSwitchResult> CREATOR;
    field public static final int STATUS_ANDROID_FAILURE = 2; // 0x2
    field public static final int STATUS_HAL_FAILURE = 3; // 0x3
    field public static final int STATUS_HAL_INTERNAL_FAILURE = 4; // 0x4
    field public static final int STATUS_INVALID_REQUEST = 5; // 0x5
    field public static final int STATUS_NOT_LOGGED_IN = 105; // 0x69
    field public static final int STATUS_NOT_SWITCHABLE = 104; // 0x68
    field public static final int STATUS_OK_USER_ALREADY_IN_FOREGROUND = 101; // 0x65
    field public static final int STATUS_SUCCESSFUL = 1; // 0x1
    field public static final int STATUS_TARGET_USER_ABANDONED_DUE_TO_A_NEW_REQUEST = 103; // 0x67
    field public static final int STATUS_TARGET_USER_ALREADY_BEING_SWITCHED_TO = 102; // 0x66
    field public static final int STATUS_UX_RESTRICTION_FAILURE = 6; // 0x6
  }

}

package android.car.util.concurrent {

  public interface AsyncFuture<T> {
    method @Nullable public T get() throws java.util.concurrent.ExecutionException, java.lang.InterruptedException;
    method @Nullable public T get(long, @NonNull java.util.concurrent.TimeUnit) throws java.util.concurrent.ExecutionException, java.lang.InterruptedException, java.util.concurrent.TimeoutException;
    method @NonNull public android.car.util.concurrent.AsyncFuture<T> whenCompleteAsync(@NonNull java.util.function.BiConsumer<? super T,? super java.lang.Throwable>, @NonNull java.util.concurrent.Executor);
  }

}

package android.car.vms {

  public final class VmsAssociatedLayer implements android.os.Parcelable {
    ctor public VmsAssociatedLayer(@NonNull android.car.vms.VmsLayer, @NonNull java.util.Set<java.lang.Integer>);
    method public int describeContents();
    method @NonNull public java.util.Set<java.lang.Integer> getProviderIds();
    method @Deprecated @NonNull public java.util.Set<java.lang.Integer> getPublisherIds();
    method @NonNull public android.car.vms.VmsLayer getVmsLayer();
    method public void writeToParcel(@NonNull android.os.Parcel, int);
    field @NonNull public static final android.os.Parcelable.Creator<android.car.vms.VmsAssociatedLayer> CREATOR;
  }

  public final class VmsAvailableLayers implements android.os.Parcelable {
    ctor @Deprecated public VmsAvailableLayers(@NonNull java.util.Set<android.car.vms.VmsAssociatedLayer>, int);
    ctor public VmsAvailableLayers(int, @NonNull java.util.Set<android.car.vms.VmsAssociatedLayer>);
    method public int describeContents();
    method @NonNull public java.util.Set<android.car.vms.VmsAssociatedLayer> getAssociatedLayers();
    method @Deprecated public int getSequence();
    method public int getSequenceNumber();
    method public void writeToParcel(@NonNull android.os.Parcel, int);
    field @NonNull public static final android.os.Parcelable.Creator<android.car.vms.VmsAvailableLayers> CREATOR;
  }

  public final class VmsClient {
    method @NonNull @RequiresPermission(anyOf={android.car.Car.PERMISSION_VMS_PUBLISHER, android.car.Car.PERMISSION_VMS_SUBSCRIBER}) public android.car.vms.VmsAvailableLayers getAvailableLayers();
    method @Nullable @RequiresPermission(anyOf={android.car.Car.PERMISSION_VMS_PUBLISHER, android.car.Car.PERMISSION_VMS_SUBSCRIBER}) public byte[] getProviderDescription(int);
    method @NonNull @RequiresPermission(anyOf={android.car.Car.PERMISSION_VMS_PUBLISHER, android.car.Car.PERMISSION_VMS_SUBSCRIBER}) public android.car.vms.VmsSubscriptionState getSubscriptionState();
    method @RequiresPermission(android.car.Car.PERMISSION_VMS_SUBSCRIBER) public boolean isMonitoringEnabled();
    method @RequiresPermission(android.car.Car.PERMISSION_VMS_PUBLISHER) public void publishPacket(int, @NonNull android.car.vms.VmsLayer, @NonNull byte[]);
    method @RequiresPermission(android.car.Car.PERMISSION_VMS_PUBLISHER) public int registerProvider(@NonNull byte[]);
    method @RequiresPermission(android.car.Car.PERMISSION_VMS_SUBSCRIBER) public void setMonitoringEnabled(boolean);
    method @RequiresPermission(android.car.Car.PERMISSION_VMS_PUBLISHER) public void setProviderOfferings(int, @NonNull java.util.Set<android.car.vms.VmsLayerDependency>);
    method @RequiresPermission(android.car.Car.PERMISSION_VMS_SUBSCRIBER) public void setSubscriptions(@NonNull java.util.Set<android.car.vms.VmsAssociatedLayer>);
    method @RequiresPermission(android.car.Car.PERMISSION_VMS_PUBLISHER) public void unregisterProvider(int);
  }

  public final class VmsClientManager {
    method @RequiresPermission(anyOf={android.car.Car.PERMISSION_VMS_PUBLISHER, android.car.Car.PERMISSION_VMS_SUBSCRIBER}) public void registerVmsClientCallback(@NonNull java.util.concurrent.Executor, @NonNull android.car.vms.VmsClientManager.VmsClientCallback);
    method @RequiresPermission(anyOf={android.car.Car.PERMISSION_VMS_PUBLISHER, android.car.Car.PERMISSION_VMS_SUBSCRIBER}) public void unregisterVmsClientCallback(@NonNull android.car.vms.VmsClientManager.VmsClientCallback);
  }

  public static interface VmsClientManager.VmsClientCallback {
    method public void onClientConnected(@NonNull android.car.vms.VmsClient);
    method public void onLayerAvailabilityChanged(@NonNull android.car.vms.VmsAvailableLayers);
    method public void onPacketReceived(int, @NonNull android.car.vms.VmsLayer, @NonNull byte[]);
    method public void onSubscriptionStateChanged(@NonNull android.car.vms.VmsSubscriptionState);
  }

  public final class VmsLayer implements android.os.Parcelable {
    ctor public VmsLayer(int, int, int);
    method public int describeContents();
    method public int getChannel();
    method @Deprecated public int getSubtype();
    method public int getType();
    method public int getVersion();
    method public void writeToParcel(@NonNull android.os.Parcel, int);
    field @NonNull public static final android.os.Parcelable.Creator<android.car.vms.VmsLayer> CREATOR;
  }

  public final class VmsLayerDependency implements android.os.Parcelable {
    ctor public VmsLayerDependency(@NonNull android.car.vms.VmsLayer);
    ctor public VmsLayerDependency(@NonNull android.car.vms.VmsLayer, @NonNull java.util.Set<android.car.vms.VmsLayer>);
    method public int describeContents();
    method @NonNull public java.util.Set<android.car.vms.VmsLayer> getDependencies();
    method @NonNull public android.car.vms.VmsLayer getLayer();
    method public void writeToParcel(@NonNull android.os.Parcel, int);
    field @NonNull public static final android.os.Parcelable.Creator<android.car.vms.VmsLayerDependency> CREATOR;
  }

  @Deprecated public final class VmsLayersOffering implements android.os.Parcelable {
    ctor @Deprecated public VmsLayersOffering(@NonNull java.util.Set<android.car.vms.VmsLayerDependency>, int);
    method @Deprecated public int describeContents();
    method @Deprecated @NonNull public java.util.Set<android.car.vms.VmsLayerDependency> getDependencies();
    method @Deprecated public int getPublisherId();
    method @Deprecated public void writeToParcel(@NonNull android.os.Parcel, int);
    field @Deprecated @NonNull public static final android.os.Parcelable.Creator<android.car.vms.VmsLayersOffering> CREATOR;
  }

  @Deprecated public final class VmsOperationRecorder {
    method @Deprecated public void addHalSubscription(int, android.car.vms.VmsLayer);
    method @Deprecated public void addPromiscuousSubscription(int);
    method @Deprecated public void addSubscription(int, android.car.vms.VmsLayer);
    method @Deprecated public static android.car.vms.VmsOperationRecorder get();
    method @Deprecated public void getPublisherId(int);
    method @Deprecated public void removeHalSubscription(int, android.car.vms.VmsLayer);
    method @Deprecated public void removePromiscuousSubscription(int);
    method @Deprecated public void removeSubscription(int, android.car.vms.VmsLayer);
    method @Deprecated public void setHalPublisherLayersOffering(android.car.vms.VmsLayersOffering);
    method @Deprecated public void setLayersOffering(android.car.vms.VmsLayersOffering);
    method @Deprecated public void setPublisherLayersOffering(android.car.vms.VmsLayersOffering);
    method @Deprecated public void startMonitoring();
    method @Deprecated public void stopMonitoring();
    method @Deprecated public void subscribe(android.car.vms.VmsLayer);
    method @Deprecated public void subscribe(android.car.vms.VmsLayer, int);
    method @Deprecated public void unsubscribe(android.car.vms.VmsLayer);
    method @Deprecated public void unsubscribe(android.car.vms.VmsLayer, int);
  }

  @Deprecated public abstract class VmsPublisherClientService extends android.app.Service {
    ctor @Deprecated public VmsPublisherClientService();
    method @Deprecated public final int getPublisherId(byte[]);
    method @Deprecated public final android.car.vms.VmsSubscriptionState getSubscriptions();
    method @Deprecated public android.os.IBinder onBind(android.content.Intent);
    method @Deprecated protected abstract void onVmsPublisherServiceReady();
    method @Deprecated public abstract void onVmsSubscriptionChange(@NonNull android.car.vms.VmsSubscriptionState);
    method @Deprecated public final void publish(@NonNull android.car.vms.VmsLayer, int, byte[]);
    method @Deprecated public final void setLayersOffering(@NonNull android.car.vms.VmsLayersOffering);
  }

  @Deprecated public final class VmsSubscriberManager {
    method @Deprecated public void clearVmsSubscriberClientCallback();
    method @Deprecated @NonNull public android.car.vms.VmsAvailableLayers getAvailableLayers();
    method @Deprecated @NonNull public byte[] getPublisherInfo(int);
    method @Deprecated public void setVmsSubscriberClientCallback(@NonNull java.util.concurrent.Executor, @NonNull android.car.vms.VmsSubscriberManager.VmsSubscriberClientCallback);
    method @Deprecated public void startMonitoring();
    method @Deprecated public void stopMonitoring();
    method @Deprecated public void subscribe(@NonNull android.car.vms.VmsLayer);
    method @Deprecated public void subscribe(@NonNull android.car.vms.VmsLayer, int);
    method @Deprecated public void unsubscribe(@NonNull android.car.vms.VmsLayer);
    method @Deprecated public void unsubscribe(@NonNull android.car.vms.VmsLayer, int);
  }

  @Deprecated public static interface VmsSubscriberManager.VmsSubscriberClientCallback {
    method @Deprecated public void onLayersAvailabilityChanged(@NonNull android.car.vms.VmsAvailableLayers);
    method @Deprecated public void onVmsMessageReceived(@NonNull android.car.vms.VmsLayer, byte[]);
  }

  public final class VmsSubscriptionState implements android.os.Parcelable {
    ctor public VmsSubscriptionState(int, @NonNull java.util.Set<android.car.vms.VmsLayer>, @NonNull java.util.Set<android.car.vms.VmsAssociatedLayer>);
    method public int describeContents();
    method @NonNull public java.util.Set<android.car.vms.VmsAssociatedLayer> getAssociatedLayers();
    method @NonNull public java.util.Set<android.car.vms.VmsLayer> getLayers();
    method public int getSequenceNumber();
    method public void writeToParcel(@NonNull android.os.Parcel, int);
    field @NonNull public static final android.os.Parcelable.Creator<android.car.vms.VmsSubscriptionState> CREATOR;
  }

}

package android.car.watchdog {

  public final class CarWatchdogManager {
    method @RequiresPermission(android.car.Car.PERMISSION_COLLECT_CAR_WATCHDOG_METRICS) public void addResourceOveruseListenerForSystem(@NonNull java.util.concurrent.Executor, int, @NonNull android.car.watchdog.CarWatchdogManager.ResourceOveruseListener);
    method @NonNull @RequiresPermission(android.car.Car.PERMISSION_COLLECT_CAR_WATCHDOG_METRICS) public java.util.List<android.car.watchdog.ResourceOveruseStats> getAllResourceOveruseStats(int, int, int);
    method @NonNull @RequiresPermission(android.car.Car.PERMISSION_CONTROL_CAR_WATCHDOG_CONFIG) public java.util.List<android.car.watchdog.PackageKillableState> getPackageKillableStatesAsUser(@NonNull android.os.UserHandle);
    method @Nullable @RequiresPermission(anyOf={android.car.Car.PERMISSION_CONTROL_CAR_WATCHDOG_CONFIG, android.car.Car.PERMISSION_COLLECT_CAR_WATCHDOG_METRICS}) public java.util.List<android.car.watchdog.ResourceOveruseConfiguration> getResourceOveruseConfigurations(int);
    method @NonNull @RequiresPermission(android.car.Car.PERMISSION_COLLECT_CAR_WATCHDOG_METRICS) public android.car.watchdog.ResourceOveruseStats getResourceOveruseStatsForUserPackage(@NonNull String, @NonNull android.os.UserHandle, int, int);
    method @RequiresPermission(android.car.Car.PERMISSION_USE_CAR_WATCHDOG) public void registerClient(@NonNull java.util.concurrent.Executor, @NonNull android.car.watchdog.CarWatchdogManager.CarWatchdogClientCallback, int);
    method @RequiresPermission(android.car.Car.PERMISSION_COLLECT_CAR_WATCHDOG_METRICS) public void removeResourceOveruseListenerForSystem(@NonNull android.car.watchdog.CarWatchdogManager.ResourceOveruseListener);
    method @RequiresPermission(android.car.Car.PERMISSION_CONTROL_CAR_WATCHDOG_CONFIG) public void setKillablePackageAsUser(@NonNull String, @NonNull android.os.UserHandle, boolean);
    method @RequiresPermission(android.car.Car.PERMISSION_CONTROL_CAR_WATCHDOG_CONFIG) public int setResourceOveruseConfigurations(@NonNull java.util.List<android.car.watchdog.ResourceOveruseConfiguration>, int);
    method @RequiresPermission(android.car.Car.PERMISSION_USE_CAR_WATCHDOG) public void tellClientAlive(@NonNull android.car.watchdog.CarWatchdogManager.CarWatchdogClientCallback, int);
    method @RequiresPermission(android.car.Car.PERMISSION_USE_CAR_WATCHDOG) public void unregisterClient(@NonNull android.car.watchdog.CarWatchdogManager.CarWatchdogClientCallback);
    field public static final int FLAG_MINIMUM_STATS_IO_100_MB = 2; // 0x2
    field public static final int FLAG_MINIMUM_STATS_IO_1_GB = 4; // 0x4
    field public static final int FLAG_MINIMUM_STATS_IO_1_MB = 1; // 0x1
    field public static final int RETURN_CODE_ERROR = -1; // 0xffffffff
    field public static final int RETURN_CODE_SUCCESS = 0; // 0x0
    field public static final int TIMEOUT_CRITICAL = 0; // 0x0
    field public static final int TIMEOUT_MODERATE = 1; // 0x1
    field public static final int TIMEOUT_NORMAL = 2; // 0x2
  }

  public abstract static class CarWatchdogManager.CarWatchdogClientCallback {
    ctor public CarWatchdogManager.CarWatchdogClientCallback();
    method public boolean onCheckHealthStatus(int, int);
    method public void onPrepareProcessTermination();
  }

  public final class IoOveruseAlertThreshold implements android.os.Parcelable {
    method public int describeContents();
    method public long getDurationInSeconds();
    method public long getWrittenBytesPerSecond();
    method public void writeToParcel(@NonNull android.os.Parcel, int);
    field @NonNull public static final android.os.Parcelable.Creator<android.car.watchdog.IoOveruseAlertThreshold> CREATOR;
  }

  public final class IoOveruseConfiguration implements android.os.Parcelable {
    method public int describeContents();
    method @NonNull public java.util.Map<java.lang.String,android.car.watchdog.PerStateBytes> getAppCategorySpecificThresholds();
    method @NonNull public android.car.watchdog.PerStateBytes getComponentLevelThresholds();
    method @NonNull public java.util.Map<java.lang.String,android.car.watchdog.PerStateBytes> getPackageSpecificThresholds();
    method @NonNull public java.util.List<android.car.watchdog.IoOveruseAlertThreshold> getSystemWideThresholds();
    method public void writeToParcel(@NonNull android.os.Parcel, int);
    field @NonNull public static final android.os.Parcelable.Creator<android.car.watchdog.IoOveruseConfiguration> CREATOR;
  }

  public static final class IoOveruseConfiguration.Builder {
    ctor public IoOveruseConfiguration.Builder(@NonNull android.car.watchdog.PerStateBytes, @NonNull java.util.Map<java.lang.String,android.car.watchdog.PerStateBytes>, @NonNull java.util.Map<java.lang.String,android.car.watchdog.PerStateBytes>, @NonNull java.util.List<android.car.watchdog.IoOveruseAlertThreshold>);
    method @NonNull public android.car.watchdog.IoOveruseConfiguration.Builder addAppCategorySpecificThresholds(@NonNull String, @NonNull android.car.watchdog.PerStateBytes);
    method @NonNull public android.car.watchdog.IoOveruseConfiguration.Builder addPackageSpecificThresholds(@NonNull String, @NonNull android.car.watchdog.PerStateBytes);
    method @NonNull public android.car.watchdog.IoOveruseConfiguration.Builder addSystemWideThresholds(@NonNull android.car.watchdog.IoOveruseAlertThreshold);
    method @NonNull public android.car.watchdog.IoOveruseConfiguration build();
    method @NonNull public android.car.watchdog.IoOveruseConfiguration.Builder setAppCategorySpecificThresholds(@NonNull java.util.Map<java.lang.String,android.car.watchdog.PerStateBytes>);
    method @NonNull public android.car.watchdog.IoOveruseConfiguration.Builder setComponentLevelThresholds(@NonNull android.car.watchdog.PerStateBytes);
    method @NonNull public android.car.watchdog.IoOveruseConfiguration.Builder setPackageSpecificThresholds(@NonNull java.util.Map<java.lang.String,android.car.watchdog.PerStateBytes>);
    method @NonNull public android.car.watchdog.IoOveruseConfiguration.Builder setSystemWideThresholds(@NonNull java.util.List<android.car.watchdog.IoOveruseAlertThreshold>);
  }

  public final class PackageKillableState implements android.os.Parcelable {
    method public int describeContents();
    method public int getKillableState();
    method @NonNull public String getPackageName();
    method public int getUserId();
    method public void writeToParcel(@NonNull android.os.Parcel, int);
    field @NonNull public static final android.os.Parcelable.Creator<android.car.watchdog.PackageKillableState> CREATOR;
    field public static final int KILLABLE_STATE_NEVER = 3; // 0x3
    field public static final int KILLABLE_STATE_NO = 2; // 0x2
    field public static final int KILLABLE_STATE_YES = 1; // 0x1
  }

  public final class ResourceOveruseConfiguration implements android.os.Parcelable {
    method public int describeContents();
    method public int getComponentType();
    method @Nullable public android.car.watchdog.IoOveruseConfiguration getIoOveruseConfiguration();
    method @NonNull public java.util.Map<java.lang.String,java.lang.String> getPackagesToAppCategoryTypes();
    method @NonNull public java.util.List<java.lang.String> getSafeToKillPackages();
    method @NonNull public java.util.List<java.lang.String> getVendorPackagePrefixes();
    method public void writeToParcel(@NonNull android.os.Parcel, int);
    field public static final String APPLICATION_CATEGORY_TYPE_MAPS = "android.car.watchdog.app.category.MAPS";
    field public static final String APPLICATION_CATEGORY_TYPE_MEDIA = "android.car.watchdog.app.category.MEDIA";
    field public static final int COMPONENT_TYPE_SYSTEM = 1; // 0x1
    field public static final int COMPONENT_TYPE_THIRD_PARTY = 3; // 0x3
    field public static final int COMPONENT_TYPE_VENDOR = 2; // 0x2
    field @NonNull public static final android.os.Parcelable.Creator<android.car.watchdog.ResourceOveruseConfiguration> CREATOR;
  }

  public static final class ResourceOveruseConfiguration.Builder {
    ctor public ResourceOveruseConfiguration.Builder(int, @NonNull java.util.List<java.lang.String>, @NonNull java.util.List<java.lang.String>, @NonNull java.util.Map<java.lang.String,java.lang.String>);
    method @NonNull public android.car.watchdog.ResourceOveruseConfiguration.Builder addPackagesToAppCategoryTypes(@NonNull String, @NonNull String);
    method @NonNull public android.car.watchdog.ResourceOveruseConfiguration.Builder addSafeToKillPackages(@NonNull String);
    method @NonNull public android.car.watchdog.ResourceOveruseConfiguration.Builder addVendorPackagePrefixes(@NonNull String);
    method @NonNull public android.car.watchdog.ResourceOveruseConfiguration build();
    method @NonNull public android.car.watchdog.ResourceOveruseConfiguration.Builder setComponentType(int);
    method @NonNull public android.car.watchdog.ResourceOveruseConfiguration.Builder setIoOveruseConfiguration(@NonNull android.car.watchdog.IoOveruseConfiguration);
    method @NonNull public android.car.watchdog.ResourceOveruseConfiguration.Builder setPackagesToAppCategoryTypes(@NonNull java.util.Map<java.lang.String,java.lang.String>);
    method @NonNull public android.car.watchdog.ResourceOveruseConfiguration.Builder setSafeToKillPackages(@NonNull java.util.List<java.lang.String>);
    method @NonNull public android.car.watchdog.ResourceOveruseConfiguration.Builder setVendorPackagePrefixes(@NonNull java.util.List<java.lang.String>);
  }

}

