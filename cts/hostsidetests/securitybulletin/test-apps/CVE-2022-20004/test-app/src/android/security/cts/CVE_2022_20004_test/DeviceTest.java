/*
 * Copyright (C) 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2022_20004_test;

import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assume.assumeNoException;
import static org.junit.Assume.assumeNotNull;
import static org.junit.Assume.assumeTrue;

import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.Intent;
import android.content.res.Resources;
import android.os.Bundle;
import android.os.RemoteCallback;
import androidx.test.runner.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {
    private static final int TIMEOUT_SEC = 10;

    @Test
    public void testCVE_2022_20004() {
        Context context = getInstrumentation().getContext();
        assumeNotNull(context);
        Resources res = context.getResources();
        assumeNotNull(res);

        PocStatus status = new PocStatus();
        CompletableFuture<PocStatus> callbackReturn = new CompletableFuture<>();
        RemoteCallback cb = new RemoteCallback((Bundle result) -> {
            PocStatus pocStatus = new PocStatus();
            pocStatus.setErrorMessage(result.getString(res.getString(R.string.message_key)));
            pocStatus.setStatusCode(result.getInt(res.getString(R.string.status_key)));
            callbackReturn.complete(pocStatus);
        });

        Intent intent = new Intent(context, PocActivity.class);
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        intent.putExtra(res.getString(R.string.callback_key), cb);
        try {
            context.startActivity(intent);
        } catch (ActivityNotFoundException e) {
            assumeNoException(res.getString(R.string.error_activity_not_found) + intent, e);
        }
        try {
            status = callbackReturn.get(TIMEOUT_SEC, TimeUnit.SECONDS);
        } catch (InterruptedException | ExecutionException | TimeoutException e) {
            assumeNoException(e);
        }
        assumeTrue(status.getErrorMessage(),
                status.getStatusCode() != res.getInteger(R.integer.assumption_failure));
        assertNotEquals(status.getErrorMessage(), status.getStatusCode(),
                res.getInteger(R.integer.fail));
    }

    private class PocStatus {
        int mStatusCode;
        String mErrorMessage;

        public void setStatusCode(int status) {
            mStatusCode = status;
        }

        public void setErrorMessage(String message) {
            mErrorMessage = message;
        }

        public int getStatusCode() {
            return mStatusCode;
        }

        public String getErrorMessage() {
            return mErrorMessage;
        }
    }
}
