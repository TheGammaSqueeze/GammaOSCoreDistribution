/*
 * Copyright (C) 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2022_20004_test;

import static org.junit.Assume.assumeNotNull;
import static org.junit.Assume.assumeTrue;

import android.app.Activity;
import android.app.slice.ISliceManager;
import android.content.Context;
import android.content.res.Resources;
import android.net.Uri;
import android.os.Bundle;
import android.os.IBinder;
import android.os.Parcel;
import android.os.Process;
import android.os.RemoteCallback;
import android.os.ServiceManager;

public class PocActivity extends Activity {

    private int getTransactionCode(String methodName) {
        int txCode = 1;
        String txName = ISliceManager.Stub.getDefaultTransactionName(txCode);
        if (txName == null) {
            return -1;
        }
        while (txName != null && txCode <= IBinder.LAST_CALL_TRANSACTION) {
            txName = ISliceManager.Stub.getDefaultTransactionName(++txCode);
            if (txName.equals(methodName)) break;
        }
        if (txName == null) {
            return -2;
        }
        return txCode;
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        IBinder binder = ServiceManager.getService(Context.SLICE_SERVICE);
        Resources resources = getResources();
        if (resources == null) {
            return;
        }
        if (binder == null) {
            sendTestResult(resources.getInteger(R.integer.assumption_failure),
                    getString(R.string.error_service_not_found));
            return;
        }
        String providerPkgOrAuthorityName = getString(R.string.provider_pkg);

        String description = "";
        try {
            description = binder.getInterfaceDescriptor();
        } catch (Exception e) {
            sendTestResult(resources.getInteger(R.integer.assumption_failure),
                    getString(R.string.error_getinterfacedesc));
            return;
        }
        Parcel data = Parcel.obtain();
        data.writeInterfaceToken(description);
        data.writeTypedObject(
                Uri.parse(getString(R.string.content_url_scheme) + providerPkgOrAuthorityName),
                1);
        data.writeString(providerPkgOrAuthorityName);
        data.writeString(this.getPackageName());
        data.writeInt(Process.myPid());
        data.writeInt(Process.myUid());
        data.writeStringArray(new String[] {getString(R.string.test_permission)});
        Parcel reply = Parcel.obtain();
        int transactMethodCode = getTransactionCode(getString(R.string.target_method));
        if (transactMethodCode == -1) {
            sendTestResult(resources.getInteger(R.integer.assumption_failure),
                    getString(R.string.error_no_method_found));
            return;
        } else if (transactMethodCode == -2) {
            sendTestResult(resources.getInteger(R.integer.assumption_failure),
                    getString(R.string.error_target_method_not_found));
            return;
        }
        boolean val = false;
        try {
            val = binder.transact(transactMethodCode, data, reply, 0);
            reply.readException();
        } catch (SecurityException e) {
            sendTestResult(resources.getInteger(R.integer.pass), "");
            return;
        } catch (Exception e) {
            sendTestResult(resources.getInteger(R.integer.assumption_failure),
                    getString(R.string.error_transact_exception));
            return;
        }
        if (!val) {
            sendTestResult(resources.getInteger(R.integer.assumption_failure),
                    getString(R.string.error_transact_ret_false));
            return;
        }
        sendTestResult(resources.getInteger(R.integer.fail), getString(R.string.fail_msg));
    }

    private void sendTestResult(int statusCode, String errorMessage) {
        Bundle extras = getIntent().getExtras();
        if (extras == null) {
            return;
        }
        RemoteCallback cb = (RemoteCallback) extras.get(getString(R.string.callback_key));
        if (cb != null) {
            Bundle res = new Bundle();
            res.putString(getString(R.string.message_key), errorMessage);
            res.putInt(getString(R.string.status_key), statusCode);
            finish();
            cb.sendResult(res);
        }
    }
}
