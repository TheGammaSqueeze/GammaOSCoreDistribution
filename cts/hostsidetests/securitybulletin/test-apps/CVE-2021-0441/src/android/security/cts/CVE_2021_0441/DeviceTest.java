/*
 * Copyright (C) 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2021_0441;

import static androidx.test.core.app.ApplicationProvider.getApplicationContext;
import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;
import static org.junit.Assume.assumeFalse;
import static org.junit.Assume.assumeNoException;
import static org.junit.Assume.assumeTrue;
import static org.junit.Assert.fail;

import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;

import androidx.annotation.IntegerRes;
import androidx.test.runner.AndroidJUnit4;
import androidx.test.uiautomator.By;
import androidx.test.uiautomator.BySelector;
import androidx.test.uiautomator.UiDevice;
import androidx.test.uiautomator.UiObject2;
import androidx.test.uiautomator.Until;

import java.util.List;
import java.util.regex.Pattern;

import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {
    Context mAppContext;

    int getInteger(@IntegerRes int resId) {
        return mAppContext.getResources().getInteger(resId);
    }

    String getString(@IntegerRes int resId) {
        return mAppContext.getResources().getString(resId);
    }

    @Test
    public void testCVE_2021_0441() {
        try {
            UiDevice device = UiDevice.getInstance(getInstrumentation());
            mAppContext = getApplicationContext();
            PackageManager packageManager = mAppContext.getPackageManager();
            String packageName = mAppContext.getPackageName();
            final Intent intent = packageManager.getLaunchIntentForPackage(packageName);
            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);
            mAppContext.startActivity(intent);

            // Selecting all visible objects with res-id: android:id/alertTitle
            Pattern patternAlert = Pattern.compile(getString(R.string.ui_id_alert));
            BySelector selectorAlert = By.res(patternAlert);

            // Selecting all visible objects with res-id: android:id/message
            Pattern patternMessage = Pattern.compile(getString(R.string.ui_id_message));
            BySelector selectorMessage = By.res(patternMessage);

            boolean isAlertTitleVisible =
                    device.wait(Until.hasObject(selectorAlert), getInteger(R.integer.wait_time_ms));
            boolean isMessageVisible = device.wait(Until.hasObject(selectorMessage),
                    getInteger(R.integer.wait_time_ms));
            assumeTrue(isAlertTitleVisible || isMessageVisible);

            List<UiObject2> objectsAlertTitle = device.findObjects(selectorAlert);
            List<UiObject2> objectsMessage = device.findObjects(selectorMessage);
            assumeFalse(objectsAlertTitle.isEmpty() && objectsMessage.isEmpty());

            if (!objectsAlertTitle.isEmpty() && objectsMessage.isEmpty()) {
                for (UiObject2 obj : objectsAlertTitle) {
                    String text = obj.getText();
                    if (text == null) {
                        continue;
                    }
                    if (text.contains(getString(R.string.app_name))
                            && text.contains(Integer.toString(getInteger(R.integer.pictures)))) {
                        fail("Vulnerable to b/174495520 !!");
                    }
                }
            }
        } catch (Exception e) {
            assumeNoException(e);
        }
    }
}
