/*
 * Copyright (C) 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2022_20115;

import static androidx.test.core.app.ApplicationProvider.getApplicationContext;
import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;

import static org.junit.Assert.assertNotEquals;
import static org.junit.Assume.assumeNoException;
import static org.junit.Assume.assumeNotNull;
import static org.junit.Assume.assumeTrue;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.OnSharedPreferenceChangeListener;
import android.content.pm.PackageManager;

import androidx.test.runner.AndroidJUnit4;
import androidx.test.uiautomator.By;
import androidx.test.uiautomator.UiDevice;
import androidx.test.uiautomator.Until;

import com.android.compatibility.common.util.TestUtils;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.io.IOException;
import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {
    static final int TIMEOUT_MS = 20000;
    static final int TIMEOUT_SP = 10;
    private UiDevice mDevice;
    private Context mContext;

    @Before
    public void enableAirplaneMode() {
        mContext = getApplicationContext();
        assumeNotNull(mContext);
        mDevice = UiDevice.getInstance(getInstrumentation());
        assumeNotNull(mDevice);
        try {
            mDevice.executeShellCommand(mContext.getResources().getString(R.string.sendBroadcast)
                    + " " + mContext.getResources().getString(R.string.airplaneModeEnable));
            TestUtils.waitUntil(mContext.getResources().getString(R.string.failedToEnable),
                    TIMEOUT_SP / 2, () -> isAirplaneModeOn());
        } catch (Exception e) {
            assumeNoException(mContext.getResources().getString(R.string.failedToExecute), e);
        }
    }

    boolean isAirplaneModeOn() {
        boolean isEnabled = false;
        try {
            isEnabled = mDevice
                    .executeShellCommand(
                            mContext.getResources().getString(R.string.getAirplaneModeStatus))
                    .trim().equals("1");
        } catch (IOException e) {
            assumeNoException(mContext.getResources().getString(R.string.failedToExecute), e);
        }
        return isEnabled;
    }

    boolean isAirplaneModeOff() {
        boolean isDisabled = false;
        try {
            isDisabled = mDevice
                    .executeShellCommand(
                            mContext.getResources().getString(R.string.getAirplaneModeStatus))
                    .trim().equals("0");
        } catch (IOException e) {
            assumeNoException(mContext.getResources().getString(R.string.failedToExecute), e);
        }
        return isDisabled;
    }

    @Test
    public void testCellLocation() {
        PackageManager packageManager = mContext.getPackageManager();
        assumeNotNull(packageManager);
        final Intent intent = packageManager.getLaunchIntentForPackage(mContext.getPackageName());
        assumeNotNull(intent);
        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);
        try {
            mContext.startActivity(intent);
        } catch (Exception e) {
            assumeNoException(mContext.getString(R.string.activityNotStartedException), e);
        }
        assumeTrue(mContext.getResources().getString(R.string.failedToOpenApp), mDevice
                .wait(Until.hasObject(By.pkg(mContext.getPackageName()).depth(0)), TIMEOUT_MS));

        /* Disable Airplane Mode */
        try {
            mDevice.executeShellCommand(mContext.getResources().getString(R.string.sendBroadcast)
                    + " " + mContext.getResources().getString(R.string.airplaneModeDisable));
            TestUtils.waitUntil(mContext.getResources().getString(R.string.failedToDisable),
                    TIMEOUT_SP / 2, () -> isAirplaneModeOff());
        } catch (Exception e) {
            assumeNoException(mContext.getResources().getString(R.string.failedToExecute), e);
        }

        int result = -1;
        String message = null;
        SharedPreferences sh = mContext.getSharedPreferences(
                mContext.getResources().getString(R.string.SHARED_PREFERENCE),
                mContext.MODE_APPEND);
        assumeNotNull(sh);
        final Semaphore preferenceChanged = new Semaphore(0);
        OnSharedPreferenceChangeListener listener = new OnSharedPreferenceChangeListener() {
            @Override
            public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {
                if (key.equals(mContext.getResources().getString(R.string.RESULT_KEY))) {
                    if (sharedPreferences.getInt(key, 0) == mContext.getResources()
                            .getInteger(R.integer.FAIL)) {
                        preferenceChanged.release();
                    }
                }
            }
        };
        sh.registerOnSharedPreferenceChangeListener(listener);
        try {
            preferenceChanged.tryAcquire(TIMEOUT_SP, TimeUnit.SECONDS);
        } catch (InterruptedException e) {
            assumeNoException(e);
        }
        result = sh.getInt(mContext.getResources().getString(R.string.RESULT_KEY),
                mContext.getResources().getInteger(R.integer.PASS));
        message = sh.getString(mContext.getResources().getString(R.string.MESSAGE_KEY),
                mContext.getResources().getString(R.string.passMessage));
        assumeTrue(message,
                result != mContext.getResources().getInteger(R.integer.ASSUMPTION_FAILURE));
        assertNotEquals(message, result, mContext.getResources().getInteger(R.integer.FAIL));
    }
}
