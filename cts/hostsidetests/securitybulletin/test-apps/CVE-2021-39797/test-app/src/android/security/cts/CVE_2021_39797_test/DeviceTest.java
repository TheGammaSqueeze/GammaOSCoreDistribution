/**
 * Copyright (C) 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2021_39797_test;

import static androidx.test.core.app.ApplicationProvider.getApplicationContext;
import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;

import static org.junit.Assert.assertFalse;
import static org.junit.Assume.assumeNoException;
import static org.junit.Assume.assumeNotNull;
import static org.junit.Assume.assumeTrue;

import android.content.ActivityNotFoundException;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.OnSharedPreferenceChangeListener;

import androidx.test.runner.AndroidJUnit4;
import androidx.test.uiautomator.By;
import androidx.test.uiautomator.UiDevice;
import androidx.test.uiautomator.Until;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {
    static final int TIMEOUT_MS = 10000;

    @Test
    public void testTaskOverride() {
        Context context = getApplicationContext();
        assumeNotNull(context);
        UiDevice device = UiDevice.getInstance(getInstrumentation());
        assumeNotNull(device);
        String targetPkg = context.getString(R.string.targetPkg);
        String targetActivityName = context.getString(R.string.targetActivityName);

        // Start the TargetActivity to make it a recent task when we start the PocActivity
        Intent targetIntent = new Intent();
        targetIntent.setComponent(new ComponentName(targetPkg, targetActivityName));
        targetIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        try {
            context.startActivity(targetIntent);
        } catch (ActivityNotFoundException e) {
            assumeNoException(context.getString(R.string.activityNotFoundMsg, targetIntent), e);
        }
        assumeTrue(context.getString(R.string.appUiErrorTargetApp),
                device.wait(Until.hasObject(By.pkg(targetPkg)), TIMEOUT_MS));

        // Start the PocActivity
        device.pressHome();
        Intent intent = new Intent(context, PocActivity.class);
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        try {
            context.startActivity(intent);
        } catch (ActivityNotFoundException e) {
            assumeNoException(context.getString(R.string.activityNotFoundMsg, intent), e);
        }

        // Wait on a result from PocActivity
        SharedPreferences sharedPrefs = context.getSharedPreferences(
                context.getString(R.string.sharedPreferences), Context.MODE_APPEND);
        assumeNotNull(sharedPrefs);
        final Semaphore preferenceChanged = new Semaphore(0);
        OnSharedPreferenceChangeListener listener = new OnSharedPreferenceChangeListener() {
            @Override
            public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {
                if (key.equals(context.getString(R.string.resultKey))) {
                    preferenceChanged.release();
                }
            }
        };
        sharedPrefs.registerOnSharedPreferenceChangeListener(listener);
        try {
            preferenceChanged.tryAcquire(TIMEOUT_MS, TimeUnit.MILLISECONDS);
        } catch (InterruptedException e) {
            assumeNoException(context.getString(R.string.timedOutPocActivity), e);
        }
        int result = sharedPrefs.getInt(context.getString(R.string.resultKey),
                context.getResources().getInteger(R.integer.assumptionFailure));
        String message = sharedPrefs.getString(context.getString(R.string.messageKey),
                context.getString(R.string.defaultSemaphoreMsg));
        assumeTrue(message,
                result != context.getResources().getInteger(R.integer.assumptionFailure));

        // Try launching the TargetActivity again. Without fix, it is supposed to be hijacked by
        // the PocActivity and PocActivity should be started in its place.
        try {
            context.startActivity(targetIntent);
        } catch (ActivityNotFoundException e) {
            assumeNoException(context.getString(R.string.activityNotFoundMsg, targetIntent), e);
        }

        // Wait for the UI of TargetActivity
        boolean targetActivityDisplayed =
                device.wait(Until.hasObject(By.pkg(targetPkg)), TIMEOUT_MS);

        // Check if the PocActivity task came up on the screen replacing the TargetActivity task
        boolean taskSwapped =
                sharedPrefs.getBoolean(context.getString(R.string.flagTaskSwapped), false);

        // Fail the test only if TargetActivity did not appear on the screen and the task of
        // TargetActivity is hijacked by the PocActivity
        assertFalse(context.getString(R.string.errorMessage),
                !targetActivityDisplayed && taskSwapped);
    }
}
