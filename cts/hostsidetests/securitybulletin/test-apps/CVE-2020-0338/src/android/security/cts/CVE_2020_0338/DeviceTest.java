/*
 * Copyright (C) 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2020_0338;

import static androidx.test.core.app.ApplicationProvider.getApplicationContext;
import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assume.assumeNoException;
import static org.junit.Assume.assumeTrue;

import android.content.Context;
import android.content.SharedPreferences;

import androidx.test.runner.AndroidJUnit4;
import androidx.test.uiautomator.UiDevice;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {
    public static final String TEST_PACKAGE = "android.security.cts.CVE_2020_0338";
    final int MAX_WAIT_TIME_MS = 10 * 1000;
    UiDevice mDevice;

    @Before
    public void setUp() {
        mDevice = UiDevice.getInstance(getInstrumentation());
    }

    @Test
    public void testCVE_2020_0338() {
        final Context context = getApplicationContext();
        try {
            mDevice.executeShellCommand("am start -n " + TEST_PACKAGE + "/.PocActivity");
        } catch (Exception e) {
            assumeNoException(e);
        }

        int result = -1;
        String message = null;
        long startTime = System.currentTimeMillis();
        while ((System.currentTimeMillis() - startTime) < MAX_WAIT_TIME_MS) {
            SharedPreferences sh = context.getSharedPreferences(
                    context.getResources().getString(R.string.SHARED_PREFERENCE),
                    Context.MODE_APPEND);
            result = sh.getInt(context.getResources().getString(R.string.RESULT_KEY), 0);
            message = sh.getString(context.getResources().getString(R.string.MESSAGE_KEY), null);
            if ((result > 0) && (message != null)) {
                assumeTrue(message,
                        result != context.getResources().getInteger(R.integer.ASSUMPTION_FAILURE));
                assertNotEquals(message, result, context.getResources().getInteger(R.integer.FAIL));
                break;
            }
        }
    }
}
