/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2022_20415;

import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;

import static org.junit.Assert.assertFalse;
import static org.junit.Assume.assumeNoException;

import android.app.Notification;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.drawable.Icon;

import androidx.test.runner.AndroidJUnit4;

import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;

import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {
    private Context mContext;
    private NotificationManager mNotificationManager;
    private Resources mResources;

    Icon createNotificationIcon() {
        Bitmap testBitmap = Bitmap.createBitmap(mResources.getInteger(R.integer.width),
                mResources.getInteger(R.integer.height), Bitmap.Config.ARGB_8888);
        final Canvas canvas = new Canvas(testBitmap);
        canvas.drawColor(Color.BLUE);
        return Icon.createWithBitmap(testBitmap);
    }

    public void tryNotificationStart() throws Exception {
        Icon icon = createNotificationIcon();
        PendingIntent pendingIntent = PendingIntent.getActivity(mContext,
                mResources.getInteger(R.integer.requestCodeIntent),
                new Intent(mContext, PocActivity.class), PendingIntent.FLAG_IMMUTABLE);
        NotificationChannel notificationChannel =
                new NotificationChannel(mContext.getString(R.string.idNotificationChannel),
                        mContext.getString(R.string.nameNotificationChannel),
                        NotificationManager.IMPORTANCE_MAX);
        notificationChannel.setDescription(mContext.getString(R.string.nameNotificationChannel));
        mNotificationManager.createNotificationChannel(notificationChannel);
        Notification summaryNotification = new Notification.Builder(mContext,
                mContext.getString(R.string.idNotificationChannel))
                        .setContentTitle(mContext.getString(R.string.titleSummaryNotification))
                        .setContentText(mContext.getString(R.string.textSummaryNotification))
                        .setSmallIcon(icon).setGroup(mContext.getPackageName())
                        .setGroupSummary(true /* make summaryNotification a group summary */)
                        .build();
        Notification pocNotification = new Notification.Builder(mContext,
                mContext.getString(R.string.idNotificationChannel)).setSmallIcon(icon)
                        .setContentTitle(mContext.getString(R.string.titlePocNotification))
                        .setGroupAlertBehavior(Notification.GROUP_ALERT_SUMMARY)
                        .setGroup(mContext.getPackageName())
                        .setFullScreenIntent(pendingIntent, true /* high priority */).build();

        mNotificationManager.notify(mContext.getString(R.string.tagNotify),
                mResources.getInteger(R.integer.idTestNotification), pocNotification);
        mNotificationManager.notify(mResources.getInteger(R.integer.idSummaryNotification),
                summaryNotification);
    }

    @Test
    public void testFullScreenIntent() {
        try {
            mContext = getInstrumentation().getTargetContext();
            mNotificationManager = mContext.getSystemService(NotificationManager.class);
            mResources = mContext.getResources();
            Semaphore mBroadcastReceived = new Semaphore(0);
            int timeoutMs = 20000;

            // Register a broadcast receiver to receive broadcast from PocActivity indicating
            // presence of vulnerability
            BroadcastReceiver broadcastReceiver = new BroadcastReceiver() {
                @Override
                public void onReceive(Context context, Intent intent) {
                    try {
                        if (intent.getAction()
                                .equals(mContext.getString(R.string.nameBroadcastActionString))) {
                            mBroadcastReceived.release();
                        }
                    } catch (Exception ignored) {
                        // ignore any exceptions
                    }
                }
            };
            IntentFilter filter =
                    new IntentFilter(mContext.getString(R.string.nameBroadcastActionString));
            mContext.registerReceiver(broadcastReceiver, filter);

            tryNotificationStart();
            assertFalse(mContext.getString(R.string.msgFailure),
                    mBroadcastReceived.tryAcquire(timeoutMs, TimeUnit.MILLISECONDS));
        } catch (Exception e) {
            assumeNoException(e);
        } finally {
            try {
                mNotificationManager.cancel(mResources.getInteger(R.integer.idSummaryNotification));
                mNotificationManager.cancel(mContext.getString(R.string.tagNotify),
                        mResources.getInteger(R.integer.idTestNotification));
            } catch (Exception e) {
                // ignore this exception
            }
        }
    }
}
