/*
 * Copyright (C) 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2021_0487;

import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.Resources;
import android.graphics.PixelFormat;
import android.os.IBinder;
import android.view.Gravity;
import android.view.WindowManager;
import android.widget.Button;

import androidx.annotation.IntegerRes;

public class PocService extends Service {
    private Button mButton;
    private WindowManager mWindowManager;
    private WindowManager.LayoutParams mLayoutParams;

    int getInteger(@IntegerRes int resId) {
        return getResources().getInteger(resId);
    }

    private static int getScreenWidth() {
        return Resources.getSystem().getDisplayMetrics().widthPixels;
    }

    private static int getScreenHeight() {
        return Resources.getSystem().getDisplayMetrics().heightPixels;
    }

    @Override
    public void onCreate() {
        super.onCreate();
        try {
            mWindowManager = getSystemService(WindowManager.class);
            mLayoutParams = new WindowManager.LayoutParams();
            mLayoutParams.type = WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY;
            mLayoutParams.flags = WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL
                    | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE;
            mLayoutParams.format = PixelFormat.OPAQUE;
            mLayoutParams.gravity = Gravity.LEFT | Gravity.TOP;
            mLayoutParams.width = getScreenWidth();
            mLayoutParams.height = getScreenHeight();
            mLayoutParams.x = getScreenWidth() / 2;
            mLayoutParams.y = getScreenHeight() / 2;
        } catch (Exception e) {
            sendTestResult(getInteger(R.integer.assumptionFailure), e.getMessage());
        }
    }

    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        try {
            showFloatingWindow();
            sendTestResult(getInteger(R.integer.pass), "");
        } catch (Exception e) {
            sendTestResult(getInteger(R.integer.assumptionFailure), e.getMessage());
        }
        return super.onStartCommand(intent, flags, startId);
    }

    @Override
    public void onDestroy() {
        try {
            mWindowManager.removeView(mButton);
            super.onDestroy();
        } catch (Exception e) {
            // ignore the exception
        }
    }

    private void showFloatingWindow() {
        mButton = new Button(this);
        mButton.setText(getString(R.string.overlayButtonText));
        mWindowManager.addView(mButton, mLayoutParams);
        mButton.setTag(mButton.getVisibility());
    }

    private void sendTestResult(int result, String message) {
        try {
            SharedPreferences sh = getSharedPreferences(getString(R.string.sharedPreferences),
                    Context.MODE_PRIVATE);
            SharedPreferences.Editor edit = sh.edit();
            edit.putInt(getString(R.string.resultKey), result);
            edit.putString(getString(R.string.messageKey), message);
            edit.commit();
        } catch (Exception e) {
            // ignore the exception
        }
    }
}
