/*
 * Copyright (C) 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2022_20360;

import static androidx.test.core.app.ApplicationProvider.getApplicationContext;
import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;

import static org.junit.Assert.assertFalse;
import static org.junit.Assume.assumeFalse;
import static org.junit.Assume.assumeNoException;
import static org.junit.Assume.assumeTrue;

import android.app.KeyguardManager;
import android.app.UiAutomation;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.nfc.NfcAdapter;
import android.nfc.NfcManager;
import android.os.PowerManager;
import android.os.UserManager;
import android.provider.Settings;

import androidx.test.runner.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.lang.reflect.Constructor;
import java.lang.reflect.Method;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {

    @Test
    public void testSecureNfcPreferenceController() {
        boolean secureNfcEnabled = false;
        NfcAdapter nfcAdapter = null;
        UiAutomation uiAutomation = null;
        try {
            Context context = getApplicationContext();
            NfcManager nfcManager = context.getSystemService(NfcManager.class);
            nfcAdapter = nfcManager.getDefaultAdapter();
            uiAutomation = getInstrumentation().getUiAutomation();

            // Secure NFC APIs require device to be unlocked hence check if device is unlocked
            PowerManager powerManager = context.getSystemService(PowerManager.class);
            KeyguardManager keyguardManager = context.getSystemService(KeyguardManager.class);
            assumeTrue(context.getString(R.string.msgDeviceLocked),
                    powerManager.isInteractive() && !keyguardManager.isKeyguardLocked());


            // Save secure NFC state(enabled/disabled) and disable secure NFC for test
            secureNfcEnabled = nfcAdapter.isSecureNfcEnabled();
            if (secureNfcEnabled) {
                nfcAdapter.enableSecureNfc(false);
            }
            assumeFalse(context.getString(R.string.disableSecureNfcFailed),
                    nfcAdapter.isSecureNfcEnabled());

            // Retrieve settings package name dynamically
            Intent settingsIntent = new Intent(Settings.ACTION_SETTINGS);
            ComponentName settingsComponent =
                    settingsIntent.resolveActivity(context.getPackageManager());
            String settingsPkgName = settingsComponent != null ? settingsComponent.getPackageName()
                    : context.getString(R.string.defaultSettingsPkg);

            // Get vulnerable method 'setChecked' using reflection
            Context settingsContext = context.createPackageContext(settingsPkgName,
                    Context.CONTEXT_INCLUDE_CODE | Context.CONTEXT_IGNORE_SECURITY);
            ClassLoader settingsClassLoader = settingsContext.getClassLoader();
            Class<?> targetClass = settingsClassLoader.loadClass(settingsPkgName
                    + context.getString(R.string.secureNfcPreferenceControllerClassName));
            Constructor<?> targetClassCstr =
                    targetClass.getConstructor(Context.class, String.class);
            Object targetClassobject =
                    targetClassCstr.newInstance(context, context.getString(R.string.key));
            Method setCheckedMethod = targetClass
                    .getDeclaredMethod(context.getString(R.string.setCheckedMethod), boolean.class);
            setCheckedMethod.setAccessible(true);

            // Check if current user is guest user
            uiAutomation.adoptShellPermissionIdentity(android.Manifest.permission.CREATE_USERS);
            UserManager userManager = context.getSystemService(UserManager.class);
            assumeTrue(userManager.isGuestUser());

            // Invoke vulnerable method 'setChecked'
            boolean retVal = (boolean) setCheckedMethod.invoke(targetClassobject, true);
            assertFalse(context.getString(R.string.msgTestFail), retVal);
        } catch (Exception e) {
            assumeNoException(e);
        } finally {
            try {
                // Disable secure NFC if it was disabled before the test
                if (!secureNfcEnabled) {
                    nfcAdapter.enableSecureNfc(false);
                }
            } catch (Exception ignored) {
                // Ignore any exception here
            } finally {
                uiAutomation.dropShellPermissionIdentity();
            }
        }
    }
}
