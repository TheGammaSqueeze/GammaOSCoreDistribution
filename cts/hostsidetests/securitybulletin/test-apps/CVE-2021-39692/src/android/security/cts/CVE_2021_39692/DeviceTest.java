/*
 * Copyright (C) 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2021_39692;

import static android.app.admin.DevicePolicyManager.ACTION_PROVISION_MANAGED_PROFILE;
import static android.app.admin.DevicePolicyManager.EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME;

import static androidx.test.core.app.ApplicationProvider.getApplicationContext;
import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;

import static org.junit.Assert.assertTrue;
import static org.junit.Assume.assumeNoException;
import static org.junit.Assume.assumeNotNull;
import static org.junit.Assume.assumeTrue;

import android.content.ActivityNotFoundException;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.SharedPreferences.OnSharedPreferenceChangeListener;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.content.res.Resources;
import android.provider.Settings;

import androidx.test.runner.AndroidJUnit4;
import androidx.test.uiautomator.By;
import androidx.test.uiautomator.UiDevice;
import androidx.test.uiautomator.Until;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.io.IOException;
import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {
    static final int TIMEOUT_MS = 20000;
    Context mContext;

    private void startOverlayService() {
        Intent intent = new Intent(mContext, PocService.class);
        assumeTrue(mContext.getString(R.string.canNotDrawOverlaysMsg),
                Settings.canDrawOverlays(mContext));
        try {
            mContext.startService(intent);
        } catch (Exception e) {
            assumeNoException(
                    mContext.getString(R.string.activityNotStartedException, "overlay service"), e);
        }
    }

    private void startVulnerableActivity() {
        Intent intent = new Intent(mContext, PocActivity.class);
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        try {
            mContext.startActivity(intent);
        } catch (ActivityNotFoundException e) {
            assumeNoException(
                    mContext.getString(R.string.activityNotStartedException, "PocActivity"), e);
        }
    }

    @Test
    public void testOverlayButtonPresence() {
        mContext = getApplicationContext();
        assumeNotNull(mContext);
        UiDevice device = UiDevice.getInstance(getInstrumentation());
        assumeNotNull(device);
        Resources resources = mContext.getResources();
        assumeNotNull(resources);

        /* Start the overlay service */
        startOverlayService();

        /* Wait for the overlay window */
        Pattern overlayTextPattern = Pattern
                .compile(resources.getString(R.string.overlayButtonText), Pattern.CASE_INSENSITIVE);
        assumeTrue(resources.getString(R.string.overlayUiScreenError),
                device.wait(Until.hasObject(By.text(overlayTextPattern)), TIMEOUT_MS));

        /* Start the PocActivity which starts vulnerable activity */
        startVulnerableActivity();

        /* Wait on a result from PocActivity */
        SharedPreferences sharedPrefs = mContext.getSharedPreferences(
                resources.getString(R.string.sharedPreferences), Context.MODE_APPEND);
        final Semaphore preferenceChanged = new Semaphore(0);
        OnSharedPreferenceChangeListener listener = new OnSharedPreferenceChangeListener() {
            @Override
            public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {
                if (key.equals(resources.getString(R.string.resultKey))) {
                    preferenceChanged.release();
                }
            }
        };
        sharedPrefs.registerOnSharedPreferenceChangeListener(listener);
        try {
            preferenceChanged.tryAcquire(TIMEOUT_MS, TimeUnit.MILLISECONDS);
        } catch (InterruptedException e) {
            assumeNoException(resources.getString(R.string.timedOutPocActivity), e);
        }
        int result = sharedPrefs.getInt(resources.getString(R.string.resultKey),
                resources.getInteger(R.integer.assumptionFailure));
        String message = sharedPrefs.getString(resources.getString(R.string.messageKey),
                resources.getString(R.string.defaultSemaphoreMsg));
        assumeTrue(message, result != resources.getInteger(R.integer.assumptionFailure));

        /* Wait until the object of launcher activity is gone */
        boolean overlayDisallowed =
                device.wait(Until.gone(By.pkg(mContext.getPackageName())), TIMEOUT_MS);

        /* Get the vulnerable activity name from the intent, this is required for the next step */
        Intent intent = new Intent(ACTION_PROVISION_MANAGED_PROFILE);
        intent.putExtra(EXTRA_PROVISIONING_DEVICE_ADMIN_COMPONENT_NAME,
                new ComponentName(mContext, PocDeviceAdminReceiver.class));
        PackageManager pm = mContext.getPackageManager();
        ResolveInfo ri = pm.resolveActivity(intent, PackageManager.MATCH_DEFAULT_ONLY);
        assumeTrue(resources.getString(R.string.activityNotFoundMsg, intent), ri != null);
        String testVulnerableActivity = ri.activityInfo.name;

        /* Check if the currently running activity is the vulnerable activity */
        String activityDump = "";
        try {
            activityDump = device.executeShellCommand(
                    resources.getString(R.string.dumpsysActivityCmd, testVulnerableActivity));
        } catch (IOException e) {
            assumeNoException(resources.getString(R.string.dumpsysActivityException), e);
        }
        Pattern activityPattern = Pattern.compile(resources.getString(R.string.mResumedTrue),
                Pattern.CASE_INSENSITIVE);
        assumeTrue(resources.getString(R.string.vulActivityNotRunningError, testVulnerableActivity),
                activityPattern.matcher(activityDump).find());

        /* Failing the test as fix is not present */
        assertTrue(resources.getString(R.string.overlayErrorMessage, testVulnerableActivity),
                overlayDisallowed);
    }
}
