/*
 * Copyright (C) 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2021_0315;

import static androidx.test.core.app.ApplicationProvider.getApplicationContext;
import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;
import static org.junit.Assert.assertTrue;
import static org.junit.Assume.assumeNoException;
import static org.junit.Assume.assumeNotNull;
import static org.junit.Assume.assumeTrue;

import android.accounts.Account;
import android.accounts.AccountAuthenticatorResponse;
import android.accounts.AccountManager;
import android.accounts.GrantCredentialsPermissionActivity;
import android.accounts.IAccountAuthenticatorResponse;
import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.os.Bundle;
import android.os.Process;
import android.provider.Settings;

import androidx.test.runner.AndroidJUnit4;
import androidx.test.uiautomator.By;
import androidx.test.uiautomator.UiDevice;
import androidx.test.uiautomator.Until;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.io.IOException;
import java.util.regex.Pattern;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {
    Context mContext;
    String mVulActivity = "";

    private void startOverlayService() {
        Intent intent = new Intent(mContext, PocService.class);
        assumeTrue(mContext.getString(R.string.canNotDrawOverlaysMsg),
                Settings.canDrawOverlays(mContext));
        try {
            mContext.startService(intent);
        } catch (Exception e) {
            assumeNoException(mContext.getString(R.string.startServiceExMsg, intent), e);
        }
    }

    public void startVulnerableActivity() {
        Intent intent = new Intent();
        intent.setClassName(mContext.getString(R.string.vulPkg),
                mContext.getString(R.string.vulClsName));
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        intent.putExtra(GrantCredentialsPermissionActivity.EXTRAS_ACCOUNT,
                new Account(mContext.getString(R.string.accountName),
                        mContext.getString(R.string.accountType)));
        intent.putExtra(GrantCredentialsPermissionActivity.EXTRAS_AUTH_TOKEN_TYPE,
                AccountManager.ACCOUNT_ACCESS_TOKEN_TYPE);
        intent.putExtra(GrantCredentialsPermissionActivity.EXTRAS_RESPONSE,
                new AccountAuthenticatorResponse(new IAccountAuthenticatorResponse.Stub() {
                    @Override
                    public void onResult(Bundle value) {
                    }

                    @Override
                    public void onRequestContinued() {
                    }

                    @Override
                    public void onError(int errorCode, String errorMessage) {
                        assumeTrue(mContext.getString(R.string.errorAuthResponse, errorCode,
                                errorMessage), false);
                    }
                }));
        intent.putExtra(GrantCredentialsPermissionActivity.EXTRAS_REQUESTING_UID, Process.myUid());
        PackageManager pm = mContext.getPackageManager();
        assumeNotNull(pm);
        ResolveInfo ri = pm.resolveActivity(intent, PackageManager.MATCH_DEFAULT_ONLY);
        assumeNotNull(mContext.getString(R.string.activityNotFoundMsg, intent), ri);
        assumeNotNull(ri.activityInfo);
        mVulActivity = ri.activityInfo.name;
        try {
            mContext.startActivity(intent);
        } catch (ActivityNotFoundException e) {
            assumeNoException(e);
        }
    }

    @Test
    public void testOverlayButtonPresence() {
        mContext = getApplicationContext();
        assumeNotNull(mContext);
        UiDevice device = UiDevice.getInstance(getInstrumentation());
        assumeNotNull(device);

        /* Start the overlay service */
        startOverlayService();

        /* Wait for the overlay window */
        Pattern overlayTextPattern = Pattern.compile(mContext.getString(R.string.overlayButtonText),
                Pattern.CASE_INSENSITIVE);
        final int launchTimeoutMs = 20000;
        assumeTrue(mContext.getString(R.string.overlayUiScreenError),
                device.wait(Until.hasObject(By.text(overlayTextPattern)), launchTimeoutMs));

        /* Start the vulnerable activity */
        startVulnerableActivity();

        /* Wait until an object of current activity is gone */
        boolean overlayDisallowed =
                device.wait(Until.gone(By.pkg(mContext.getPackageName())), launchTimeoutMs);

        /* Check if the currently running activity is the vulnerable activity */
        String activityDump = "";
        try {
            activityDump = device.executeShellCommand(
                    mContext.getString(R.string.cmdDumpsysActivity, mVulActivity));
        } catch (IOException e) {
            assumeNoException(mContext.getString(R.string.exShellCmdDumpsys), e);
        }
        Pattern activityPattern = Pattern.compile(mContext.getString(R.string.mResumedTrue),
                Pattern.CASE_INSENSITIVE);
        assumeTrue(mContext.getString(R.string.vulActivityNotRunningError, mVulActivity),
                activityPattern.matcher(activityDump).find());

        /* Failing the test as fix is not present */
        assertTrue(mContext.getString(R.string.failMsg, mVulActivity), overlayDisallowed);
    }
}
