/*
 * Copyright (C) 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.security.cts.CVE_2021_39795;

import static androidx.test.core.app.ApplicationProvider.getApplicationContext;
import static org.junit.Assert.fail;
import static org.junit.Assume.assumeNoException;

import android.content.Context;
import android.content.ContentResolver;
import android.content.ContentValues;
import android.content.res.Resources;
import android.provider.MediaStore;

import androidx.test.runner.AndroidJUnit4;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.io.OutputStream;
import java.lang.reflect.Method;

@RunWith(AndroidJUnit4.class)
public class DeviceTest {

    @Test
    public void testFilePresence() {
        boolean isSecondPatchAbsent = false;
        Resources resources = null;
        OutputStream outputStream = null;
        try {
            // Accessing FileUtils.isDataOrObbPath() to detect the presence of second patch of fix.
            Context context = getApplicationContext();
            resources = context.getResources();
            Context mediaProviderContext =
                    context.createPackageContext(resources.getString(R.string.mediaProviderPkg),
                            Context.CONTEXT_INCLUDE_CODE | Context.CONTEXT_IGNORE_SECURITY);
            ClassLoader fileUtilsClassLoader = mediaProviderContext.getClassLoader();
            Class<?> FileUtilsClass =
                    fileUtilsClassLoader.loadClass(resources.getString(R.string.fileUtilPkg));
            Method isDataOrObbPathMethod = FileUtilsClass.getDeclaredMethod(
                    resources.getString(R.string.isDataOrObbPathMethod), String.class);
            isDataOrObbPathMethod.setAccessible(true);
            isSecondPatchAbsent = (boolean) isDataOrObbPathMethod.invoke(this,
                    resources.getString(R.string.sampleFilePath));

            // Checking write into external directory.
            ContentValues values = new ContentValues();
            ContentResolver contentResolver = context.getContentResolver();
            values.put(MediaStore.MediaColumns.RELATIVE_PATH,
                    resources.getString(R.string.filePath));
            values.put(MediaStore.MediaColumns.DISPLAY_NAME,
                    resources.getString(R.string.fileName));
            outputStream = contentResolver.openOutputStream(contentResolver.insert(
                    MediaStore.Files.getContentUri(resources.getString(R.string.external)),
                    values));
            outputStream.write(resources.getString(R.string.fileContent).getBytes());

            /*
             * If control flow has reached till this point it means no exception anywhere and fix is
             * not present and it is vulnerable to the bug.
             */
            fail(resources.getString(R.string.failure));
        } catch (IllegalArgumentException e) {
            // First fix patch is applied, ignore this exception.
            if (isSecondPatchAbsent) {
                // Fail the test as Latest Fix Patch is not applied
                fail(resources.getString(R.string.secondFixFailure));
            }
        } catch (Exception e) {
            assumeNoException(e);
        } finally {
            try {
                outputStream.close();
            } catch (Exception e) {
                // ignore all exceptions
            }
        }
    }
}
