/*
 * Copyright (c) 2020-2021 The Linux Foundation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer in the documentation and/or other materials provided
 *      with the distribution.
 *    * Neither the name of The Linux Foundation. nor the names of its
 *      contributors may be used to endorse or promote products derived
 *      from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
 * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Changes from Qualcomm Innovation Center are provided under the following license:
 * Copyright (c) 2022 Qualcomm Innovation Center, Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted (subject to the limitations in the
 * disclaimer below) provided that the following conditions are met:
 *
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *
 *    * Redistributions in binary form must reproduce the above
 *      copyright notice, this list of conditions and the following
 *      disclaimer in the documentation and/or other materials provided
 *      with the distribution.
 *
 *    * Neither the name of Qualcomm Innovation Center, Inc. nor the names of its
 *      contributors may be used to endorse or promote products derived
 *      from this software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
 * GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
 * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package vendor.qti.hardware.camera.aon@1.3;

import vendor.qti.hardware.camera.aon@1.2;

enum AONServiceType     : @1.2::AONServiceType
{
    // No new ServiceType are added in 1.3
};

/**
 * The delivery mode of FD event
 */
enum FDDeliveryMode : int32_t
{
    /**
     * Invalid value
     */
    Invalid             = -1,

    /**
     * Face detection is triggered to run based on motion detected by sensor.
     */
    Motion_Based        = 0,

    /**
     * Face detection is triggered to run periodically
     */
    Time_Based          = 1
};

/**
 * The FD algo mode capability
 */
enum FDAlgoModeCap : int32_t
{
    /**
     * Invalid value
     */
    Invalid                  = -1,

    /**
     * FD algo mode run under non-island-mode
     */
    Non_Island_Mode          = 0,

    /**
     * FD algo mode is island-capable
     */
    Island_Mode_Capable      = 1
};

/**
 * The FD engine of fd algo
 */
enum FDEngine : uint32_t
{
    /**
     * CADL engine (Lower power, lower memory usage engine).
     */
    Fd_Engine_CADL      = 0,

    /**
     * eNPU engine (Higher power, higher memory usage engine).
     */
    Fd_Engine_ENPU      = 1
};

/**
 * The available modes for the fd algo type
 */
struct AONFDAlgoMode {
    /**
     * Image resolution used for FD processing in this FD algo mode.
     */
    uint32_t width;

    /**
     * Image resolution used for FD processing in this FD algo mode.
     */
    uint32_t height;

    /**
     * Indicates capability of FD algo mode
     */
    FDAlgoModeCap capability;

    /**
     * Indicates whether this FD algo mode supports the following
     */
    FDEngine fd_engine;

    /**
     * The native streaming rate of the image sensor
     */
    uint32_t fps;
};

/**
 * The FD register information filled by client
 */
struct AONFDRegInfo {
    /**
     * Algo mode index of fd algo.
     * The index to the vector returned in getFDAlgoModes
     * in which the client would like the fd algo to be run under.
     * Only applicable when service type is FaceDetect or FaceDetectPro
     */
    int32_t fd_algo_mode_idx;

    /**
     * The delivery mode of FD event
     * Only applicable when service type is FaceDetect or FaceDetectPro
     */
    FDDeliveryMode fd_delivery_mode;

    /**
     * Period in ms of FD event call back.
     * Only applicable when delivery mode is Time_Based
     */
    uint32_t delivery_period_ms;
};

/**
 * The register information filled by client
 */
struct AONRegInfo {
    /**
     * Service type registered by client.
     */
    AONServiceType srv_type;

    /**
     * The FD register information filled by client.
     * Only applicable when service type is FaceDetect or FaceDetectPro
     */
    AONFDRegInfo fd_reg_info;
};