From fc7fcc755cd5ad2dae58c4cb30b80c2805303915 Mon Sep 17 00:00:00 2001
From: Paul Lawrence <paullawrence@google.com>
Date: Thu, 1 Apr 2021 10:08:32 -0700
Subject: [PATCH 19/31] ANDROID: Incremental fs: stat should return actual used
 blocks

Test: incfs_test passes
Bug: 182182100
Signed-off-by: Paul Lawrence <paullawrence@google.com>
Change-Id: I4c9e5f111fbb659798ef79bc20d8a65b64b44ded
---
 fs/incfs/vfs.c | 27 +++++++++++++++++++--------
 1 file changed, 19 insertions(+), 8 deletions(-)

diff --git a/fs/incfs/vfs.c b/fs/incfs/vfs.c
index 8b728a3ec101..00279ae04878 100644
--- a/fs/incfs/vfs.c
+++ b/fs/incfs/vfs.c
@@ -1599,18 +1599,29 @@ static int incfs_getattr(const struct path *path,
 {
 	struct inode *inode = d_inode(path->dentry);
 
+	generic_fillattr(inode, stat);
+
+	stat->attributes &= ~STATX_ATTR_VERITY;
 	if (IS_VERITY(inode))
 		stat->attributes |= STATX_ATTR_VERITY;
 	stat->attributes_mask |= STATX_ATTR_VERITY;
-	generic_fillattr(inode, stat);
 
-	/*
-	 * TODO: stat->blocks is wrong at this point. It should be number of
-	 * blocks in the backing file. But that information is not (necessarily)
-	 * available yet - incfs_open_dir_file may not have been called.
-	 * Solution is probably to store the backing file block count in an
-	 * xattr whenever it's changed.
-	 */
+	if (request_mask & STATX_BLOCKS) {
+		struct kstat backing_kstat;
+		struct dentry_info *di = get_incfs_dentry(path->dentry);
+		int error = 0;
+		struct path *backing_path;
+
+		if (!di)
+			return -EFSCORRUPTED;
+		backing_path = &di->backing_path;
+		error = vfs_getattr(backing_path, &backing_kstat, STATX_BLOCKS,
+				    AT_STATX_SYNC_AS_STAT);
+		if (error)
+			return error;
+
+		stat->blocks = backing_kstat.blocks;
+	}
 
 	return 0;
 }
-- 
2.17.1

