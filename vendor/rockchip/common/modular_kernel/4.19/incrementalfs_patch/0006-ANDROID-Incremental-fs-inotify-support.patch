From befd418da0fcf28f817fe29e37274db26f7ebc2c Mon Sep 17 00:00:00 2001
From: Paul Lawrence <paullawrence@google.com>
Date: Tue, 22 Dec 2020 12:25:51 -0800
Subject: [PATCH 06/31] ANDROID: Incremental fs: inotify support

Bug: 175323815
Test: incfs_test passes
Signed-off-by: Paul Lawrence <paullawrence@google.com>
Change-Id: I0df482e225b85321703b442afdf6f175b9cc3ab7
---
 fs/incfs/pseudo_files.c            | 106 ++++++++++++++++++++++++++---
 fs/incfs/vfs.c                     |  93 ++++++++++++++++++++-----
 include/uapi/linux/incrementalfs.h |   2 +
 3 files changed, 173 insertions(+), 28 deletions(-)

diff --git a/fs/incfs/pseudo_files.c b/fs/incfs/pseudo_files.c
index c97df5a84695..9202e7699703 100644
--- a/fs/incfs/pseudo_files.c
+++ b/fs/incfs/pseudo_files.c
@@ -5,6 +5,7 @@
 
 #include <linux/file.h>
 #include <linux/fs.h>
+#include <linux/fsnotify.h>
 #include <linux/namei.h>
 #include <linux/poll.h>
 #include <linux/syscalls.h>
@@ -230,13 +231,16 @@ static int validate_name(char *file_name)
 static int dir_relative_path_resolve(
 			struct mount_info *mi,
 			const char __user *relative_path,
-			struct path *result_path)
+			struct path *result_path,
+			struct path *base_path)
 {
-	struct path *base_path = &mi->mi_backing_dir_path;
 	int dir_fd = get_unused_fd_flags(0);
 	struct file *dir_f = NULL;
 	int error = 0;
 
+	if (!base_path)
+		base_path = &mi->mi_backing_dir_path;
+
 	if (dir_fd < 0)
 		return dir_fd;
 
@@ -261,7 +265,7 @@ static int dir_relative_path_resolve(
 out:
 	ksys_close(dir_fd);
 	if (error)
-		pr_debug("incfs: %s %d\n", __func__, error);
+		pr_debug("Error: %d\n", error);
 	return error;
 }
 
@@ -363,6 +367,7 @@ static int init_new_file(struct mount_info *mi, struct dentry *dentry,
 
 	if (error)
 		goto out;
+
 out:
 	if (bfc) {
 		mutex_unlock(&bfc->bc_mutex);
@@ -376,9 +381,84 @@ static int init_new_file(struct mount_info *mi, struct dentry *dentry,
 	return error;
 }
 
-static long ioctl_create_file(struct mount_info *mi,
+static void notify_create(struct file *pending_reads_file,
+			  const char  __user *dir_name, const char *file_name,
+			  const char *file_id_str, bool incomplete_file)
+{
+	struct mount_info *mi =
+		get_mount_info(file_superblock(pending_reads_file));
+	struct path base_path = {
+		.mnt = pending_reads_file->f_path.mnt,
+		.dentry = pending_reads_file->f_path.dentry->d_parent,
+	};
+	struct path dir_path = {};
+	struct dentry *file = NULL;
+	struct dentry *dir = NULL;
+	int error;
+
+	error = dir_relative_path_resolve(mi, dir_name, &dir_path, &base_path);
+	if (error)
+		goto out;
+
+	file = incfs_lookup_dentry(dir_path.dentry, file_name);
+	if (IS_ERR(file)) {
+		error = PTR_ERR(file);
+		file = NULL;
+		goto out;
+	}
+
+	fsnotify_create(d_inode(dir_path.dentry), file);
+
+	dir = incfs_lookup_dentry(base_path.dentry, INCFS_INDEX_NAME);
+	if (IS_ERR(dir)) {
+		error = PTR_ERR(dir);
+		dir = NULL;
+		goto out;
+	}
+
+	dput(file);
+	file = incfs_lookup_dentry(dir, file_id_str);
+	if (IS_ERR(file)) {
+		error = PTR_ERR(file);
+		file = NULL;
+		goto out;
+	}
+
+	fsnotify_create(d_inode(dir), file);
+
+	if (incomplete_file) {
+		dput(dir);
+		dir = incfs_lookup_dentry(base_path.dentry,
+					  INCFS_INCOMPLETE_NAME);
+		if (IS_ERR(dir)) {
+			error = PTR_ERR(dir);
+			dir = NULL;
+			goto out;
+		}
+
+		dput(file);
+		file = incfs_lookup_dentry(dir, file_id_str);
+		if (IS_ERR(file)) {
+			error = PTR_ERR(file);
+			file = NULL;
+			goto out;
+		}
+
+		fsnotify_create(d_inode(dir), file);
+	}
+out:
+	if (error)
+		pr_warn("%s failed with error %d\n", __func__, error);
+
+	dput(dir);
+	dput(file);
+	path_put(&dir_path);
+}
+
+static long ioctl_create_file(struct file *file,
 			struct incfs_new_file_args __user *usr_args)
 {
+	struct mount_info *mi = get_mount_info(file_superblock(file));
 	struct incfs_new_file_args args;
 	char *file_id_str = NULL;
 	struct dentry *index_file_dentry = NULL;
@@ -430,7 +510,7 @@ static long ioctl_create_file(struct mount_info *mi,
 	/* Find a directory to put the file into. */
 	error = dir_relative_path_resolve(mi,
 			u64_to_user_ptr(args.directory_path),
-			&parent_dir_path);
+			&parent_dir_path, NULL);
 	if (error)
 		goto out;
 
@@ -589,6 +669,9 @@ static long ioctl_create_file(struct mount_info *mi,
 		incomplete_linked = true;
 	}
 
+	notify_create(file, u64_to_user_ptr(args.directory_path), file_name,
+		      file_id_str, args.size != 0);
+
 out:
 	if (error) {
 		pr_debug("incfs: %s err:%d\n", __func__, error);
@@ -609,6 +692,7 @@ static long ioctl_create_file(struct mount_info *mi,
 	path_put(&parent_dir_path);
 	if (locked)
 		mutex_unlock(&mi->mi_dir_struct_mutex);
+
 	return error;
 }
 
@@ -741,7 +825,7 @@ static long ioctl_create_mapped_file(struct mount_info *mi, void __user *arg)
 	/* Find a directory to put the file into. */
 	error = dir_relative_path_resolve(mi,
 			u64_to_user_ptr(args.directory_path),
-			&parent_dir_path);
+			&parent_dir_path, NULL);
 	if (error)
 		goto out;
 
@@ -901,7 +985,7 @@ static long pending_reads_dispatch_ioctl(struct file *f, unsigned int req,
 
 	switch (req) {
 	case INCFS_IOC_CREATE_FILE:
-		return ioctl_create_file(mi, (void __user *)arg);
+		return ioctl_create_file(f, (void __user *)arg);
 	case INCFS_IOC_PERMIT_FILL:
 		return ioctl_permit_fill(f, (void __user *)arg);
 	case INCFS_IOC_CREATE_MAPPED_FILE:
@@ -984,15 +1068,15 @@ static ssize_t log_read(struct file *f, char __user *buf, size_t len,
 			min_t(ssize_t, reads_to_collect, reads_per_page));
 		if (reads_collected <= 0) {
 			result = total_reads_collected ?
-					       total_reads_collected * record_size :
-					       reads_collected;
+				       total_reads_collected * record_size :
+				       reads_collected;
 			goto out;
 		}
 		if (copy_to_user(buf, (void *)page,
 				 reads_collected * record_size)) {
 			result = total_reads_collected ?
-					       total_reads_collected * record_size :
-					       -EFAULT;
+				       total_reads_collected * record_size :
+				       -EFAULT;
 			goto out;
 		}
 
diff --git a/fs/incfs/vfs.c b/fs/incfs/vfs.c
index 097f334d3658..3381cdda25fe 100644
--- a/fs/incfs/vfs.c
+++ b/fs/incfs/vfs.c
@@ -7,6 +7,7 @@
 #include <linux/file.h>
 #include <linux/fs.h>
 #include <linux/fs_stack.h>
+#include <linux/fsnotify.h>
 #include <linux/namei.h>
 #include <linux/parser.h>
 #include <linux/seq_file.h>
@@ -537,12 +538,62 @@ static int incfs_rmdir(struct dentry *dentry)
 	return error;
 }
 
-static void maybe_delete_incomplete_file(struct data_file *df)
+static void notify_unlink(struct dentry *dentry, const char *file_id_str,
+			  const char *special_directory)
+{
+	struct dentry *root = dentry;
+	struct dentry *file = NULL;
+	struct dentry *dir = NULL;
+	int error = 0;
+	bool take_lock = root->d_parent != root->d_parent->d_parent;
+
+	while (root != root->d_parent)
+		root = root->d_parent;
+
+	if (take_lock)
+		dir = incfs_lookup_dentry(root, special_directory);
+	else
+		dir = lookup_one_len(special_directory, root,
+				     strlen(special_directory));
+
+	if (IS_ERR(dir)) {
+		error = PTR_ERR(dir);
+		goto out;
+	}
+	if (d_is_negative(dir)) {
+		error = -ENOENT;
+		goto out;
+	}
+
+	file = incfs_lookup_dentry(dir, file_id_str);
+	if (IS_ERR(file)) {
+		error = PTR_ERR(file);
+		goto out;
+	}
+	if (d_is_negative(file)) {
+		error = -ENOENT;
+		goto out;
+	}
+
+	fsnotify_nameremove(file, 0);
+	d_delete(file);
+
+out:
+	if (error)
+		pr_warn("%s failed with error %d\n", __func__, error);
+
+	dput(dir);
+	dput(file);
+}
+
+static void maybe_delete_incomplete_file(struct file *f,
+					 struct data_file *df)
 {
 	struct mount_info *mi = df->df_mount_info;
 	char *file_id_str = NULL;
 	struct dentry *incomplete_file_dentry = NULL;
 	const struct cred *old_cred = override_creds(mi->mi_owner);
+	int error;
 
 	if (atomic_read(&df->df_data_blocks_written) < df->df_data_block_count)
 		goto out;
@@ -564,9 +615,16 @@ static void maybe_delete_incomplete_file(struct data_file *df)
 		goto out;
 
 	vfs_fsync(df->df_backing_file_context->bc_file, 0);
-	incfs_unlink(incomplete_file_dentry);
+	error = incfs_unlink(incomplete_file_dentry);
+	if (error)
+		goto out;
+
+	notify_unlink(f->f_path.dentry, file_id_str, INCFS_INCOMPLETE_NAME);
 
 out:
+	if (error)
+		pr_warn("incfs: Deleting incomplete file failed: %d\n", error);
+
 	dput(incomplete_file_dentry);
 	kfree(file_id_str);
 	revert_creds(old_cred);
@@ -633,7 +691,7 @@ static long ioctl_fill_blocks(struct file *f, void __user *arg)
 	if (data_buf)
 		free_pages((unsigned long)data_buf, get_order(data_buf_size));
 
-	maybe_delete_incomplete_file(df);
+	maybe_delete_incomplete_file(f, df);
 
 	/*
 	 * Only report the error if no records were processed, otherwise
@@ -910,9 +968,8 @@ static int dir_mkdir(struct inode *dir, struct dentry *dentry, umode_t mode)
  * Delete file referenced by backing_dentry and if appropriate its hardlink
  * from .index and .incomplete
  */
-static int file_delete(struct mount_info *mi,
-			struct dentry *backing_dentry,
-			int nlink)
+static int file_delete(struct mount_info *mi, struct dentry *dentry,
+			struct dentry *backing_dentry, int nlink)
 {
 	struct dentry *index_file_dentry = NULL;
 	struct dentry *incomplete_file_dentry = NULL;
@@ -965,15 +1022,19 @@ static int file_delete(struct mount_info *mi,
 	if (nlink > 1)
 		goto just_unlink;
 
-	if (d_really_is_positive(index_file_dentry))
+	if (d_really_is_positive(index_file_dentry)) {
 		error = incfs_unlink(index_file_dentry);
-	if (error)
-		goto out;
+		if (error)
+			goto out;
+		notify_unlink(dentry, file_id_str, INCFS_INDEX_NAME);
+	}
 
-	if (d_really_is_positive(incomplete_file_dentry))
+	if (d_really_is_positive(incomplete_file_dentry)) {
 		error = incfs_unlink(incomplete_file_dentry);
-	if (error)
-		goto out;
+		if (error)
+			goto out;
+		notify_unlink(dentry, file_id_str, INCFS_INCOMPLETE_NAME);
+	}
 
 just_unlink:
 	error = incfs_unlink(backing_dentry);
@@ -1023,7 +1084,7 @@ static int dir_unlink(struct inode *dir, struct dentry *dentry)
 	if (err)
 		goto out;
 
-	err = file_delete(mi, backing_path.dentry, stat.nlink);
+	err = file_delete(mi, dentry, backing_path.dentry, stat.nlink);
 
 	d_drop(dentry);
 out:
@@ -1509,8 +1570,6 @@ static ssize_t incfs_listxattr(struct dentry *d, char *list, size_t size)
 struct dentry *incfs_mount_fs(struct file_system_type *type, int flags,
 			      const char *dev_name, void *data)
 {
-	static const char index_name[] = ".index";
-	static const char incomplete_name[] = ".incomplete";
 	struct mount_options options = {};
 	struct mount_info *mi = NULL;
 	struct path backing_dir_path = {};
@@ -1569,7 +1628,7 @@ struct dentry *incfs_mount_fs(struct file_system_type *type, int flags,
 	}
 
 	index_dir = open_or_create_special_dir(backing_dir_path.dentry,
-					       index_name);
+					       INCFS_INDEX_NAME);
 	if (IS_ERR_OR_NULL(index_dir)) {
 		error = PTR_ERR(index_dir);
 		pr_err("incfs: Can't find or create .index dir in %s\n",
@@ -1580,7 +1639,7 @@ struct dentry *incfs_mount_fs(struct file_system_type *type, int flags,
 	mi->mi_index_dir = index_dir;
 
 	incomplete_dir = open_or_create_special_dir(backing_dir_path.dentry,
-						    incomplete_name);
+						    INCFS_INCOMPLETE_NAME);
 	if (IS_ERR_OR_NULL(incomplete_dir)) {
 		error = PTR_ERR(incomplete_dir);
 		pr_err("incfs: Can't find or create .incomplete dir in %s\n",
diff --git a/include/uapi/linux/incrementalfs.h b/include/uapi/linux/incrementalfs.h
index 625db40356f2..83fd521369ed 100644
--- a/include/uapi/linux/incrementalfs.h
+++ b/include/uapi/linux/incrementalfs.h
@@ -28,6 +28,8 @@
 #define INCFS_MAX_HASH_SIZE 32
 #define INCFS_MAX_FILE_ATTR_SIZE 512
 
+#define INCFS_INDEX_NAME ".index"
+#define INCFS_INCOMPLETE_NAME ".incomplete"
 #define INCFS_PENDING_READS_FILENAME ".pending_reads"
 #define INCFS_LOG_FILENAME ".log"
 #define INCFS_BLOCKS_WRITTEN_FILENAME ".blocks_written"
-- 
2.17.1

