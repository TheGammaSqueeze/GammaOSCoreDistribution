// *** THIS PACKAGE HAS SPECIAL LICENSING CONDITIONS.  PLEASE
//     CONSULT THE OWNERS AND opensource-licensing@google.com BEFORE
//     DEPENDING ON IT IN YOUR PROJECT. ***
package {
    default_applicable_licenses: [
        "device_generic_vulkan-cereal_third-party_angle_license",
    ],
}

// Added automatically by a large-scale-change that took the approach of
// 'apply every license found to every target'. While this makes sure we respect
// every license restriction, it may not be entirely correct.
//
// e.g. GPL in an MIT project might only apply to the contrib/ directory.
//
// Please consider splitting the single license below into multiple licenses,
// taking care not to lose any license_kind information, and overriding the
// default license using the 'licenses: [...]' property on targets as needed.
//
// For unused files, consider creating a 'fileGroup' with "//visibility:private"
// to attach the license to, and including a comment whether the files may be
// used in the current project.
// See: http://go/android-license-faq
license {
    name: "device_generic_vulkan-cereal_third-party_angle_license",
    visibility: [":__subpackages__"],
    license_kinds: [
        "SPDX-license-identifier-Apache-2.0",
        "SPDX-license-identifier-BSD",
        "SPDX-license-identifier-GPL",
        "SPDX-license-identifier-GPL-2.0",
        "SPDX-license-identifier-GPL-3.0",
        "SPDX-license-identifier-LGPL",
        "SPDX-license-identifier-MIT",
        "SPDX-license-identifier-Zlib",
        "legacy_by_exception_only", // by exception only
        "legacy_notice",
        "legacy_unencumbered",
    ],
    license_text: [
        "LICENSE",
    ],
}

cc_library_static {
    name: "gfxstream_angle_common",
    defaults: ["gfxstream_defaults"],
    srcs: [
        "./src/common/Float16ToFloat32.cpp",
        "./src/common/MemoryBuffer.cpp",
        "./src/common/PackedEGLEnums_autogen.cpp",
        "./src/common/PackedEnums.cpp",
        "./src/common/PackedGLEnums_autogen.cpp",
        "./src/common/PoolAlloc.cpp",
        "./src/common/aligned_memory.cpp",
        "./src/common/android_util.cpp",
        "./src/common/angleutils.cpp",
        "./src/common/debug.cpp",
        "./src/common/event_tracer.cpp",
        "./src/common/mathutil.cpp",
        "./src/common/matrix_utils.cpp",
        "./src/common/string_utils.cpp",
        "./src/common/system_utils.cpp",
        "./src/common/system_utils_posix.cpp",
        "./src/common/system_utils_linux.cpp",
        "./src/common/third_party/base/anglebase/sha1.cc",
        "./src/common/third_party/xxhash/xxhash_fuzzer.cpp",
        "./src/common/third_party/smhasher/src/PMurHash.cpp",
        "./src/common/tls.cpp",
        "./src/common/uniform_type_info_autogen.cpp",
        "./src/common/utilities.cpp",
    ],
    export_include_dirs: [
        "include",
        "src",
        "src/common",
        "src/common/third_party/base",
        "src/common/third_party/base/anglebase",
    ],
}

cc_library_static {
    name: "gfxstream_angle_shader_translator",
    cflags: [
        "-DANGLE_ENABLE_GLSL=1",
        "-DANGLE_ENABLE_ESSL=1",
    ],
    defaults: ["gfxstream_defaults"],
    srcs: [
        "src/compiler/translator/BuiltInFunctionEmulator.cpp",
        "src/compiler/translator/CallDAG.cpp",
        "src/compiler/translator/CodeGen.cpp",
        "src/compiler/translator/CollectVariables.cpp",
        "src/compiler/translator/Compiler.cpp",
        "src/compiler/translator/ConstantUnion.cpp",
        "src/compiler/translator/Declarator.cpp",
        "src/compiler/translator/Diagnostics.cpp",
        "src/compiler/translator/DirectiveHandler.cpp",
        "src/compiler/translator/ExtensionBehavior.cpp",
        "src/compiler/translator/FlagStd140Structs.cpp",
        "src/compiler/translator/FunctionLookup.cpp",
        "src/compiler/translator/HashNames.cpp",
        "src/compiler/translator/ImmutableStringBuilder.cpp",
        "src/compiler/translator/InfoSink.cpp",
        "src/compiler/translator/Initialize.cpp",
        "src/compiler/translator/InitializeDll.cpp",
        "src/compiler/translator/IntermNode.cpp",
        "src/compiler/translator/IsASTDepthBelowLimit.cpp",
        "src/compiler/translator/Operator.cpp",
        "src/compiler/translator/OutputTree.cpp",
        "src/compiler/translator/ParseContext.cpp",
        "src/compiler/translator/PoolAlloc.cpp",
        "src/compiler/translator/QualifierTypes.cpp",
        "src/compiler/translator/ShaderLang.cpp",
        "src/compiler/translator/ShaderVars.cpp",
        "src/compiler/translator/Symbol.cpp",
        "src/compiler/translator/SymbolTable.cpp",
        "src/compiler/translator/SymbolUniqueId.cpp",
        "src/compiler/translator/Types.cpp",
        "src/compiler/translator/ValidateAST.cpp",
        "src/compiler/translator/ValidateGlobalInitializer.cpp",
        "src/compiler/translator/ValidateLimitations.cpp",
        "src/compiler/translator/ValidateMaxParameters.cpp",
        "src/compiler/translator/ValidateOutputs.cpp",
        "src/compiler/translator/ValidateSwitch.cpp",
        "src/compiler/translator/ValidateVaryingLocations.cpp",
        "src/compiler/translator/VariablePacker.cpp",
        "src/compiler/translator/blocklayout.cpp",
        "src/compiler/translator/glslang_lex_autogen.cpp",
        "src/compiler/translator/glslang_tab_autogen.cpp",
        "src/compiler/translator/tree_ops/AddAndTrueToLoopCondition.cpp",
        "src/compiler/translator/tree_ops/BreakVariableAliasingInInnerLoops.cpp",
        "src/compiler/translator/tree_ops/ClampFragDepth.cpp",
        "src/compiler/translator/tree_ops/ClampPointSize.cpp",
        "src/compiler/translator/tree_ops/DeclareAndInitBuiltinsForInstancedMultiview.cpp",
        "src/compiler/translator/tree_ops/DeferGlobalInitializers.cpp",
        "src/compiler/translator/tree_ops/EarlyFragmentTestsOptimization.cpp",
        "src/compiler/translator/tree_ops/EmulateGLFragColorBroadcast.cpp",
        "src/compiler/translator/tree_ops/EmulateMultiDrawShaderBuiltins.cpp",
        "src/compiler/translator/tree_ops/EmulatePrecision.cpp",
        "src/compiler/translator/tree_ops/ExpandIntegerPowExpressions.cpp",
        "src/compiler/translator/tree_ops/FoldExpressions.cpp",
        "src/compiler/translator/tree_ops/InitializeVariables.cpp",
        "src/compiler/translator/tree_ops/NameEmbeddedUniformStructs.cpp",
        "src/compiler/translator/tree_ops/PruneEmptyCases.cpp",
        "src/compiler/translator/tree_ops/PruneNoOps.cpp",
        "src/compiler/translator/tree_ops/RecordConstantPrecision.cpp",
        "src/compiler/translator/tree_ops/RegenerateStructNames.cpp",
        "src/compiler/translator/tree_ops/RemoveArrayLengthMethod.cpp",
        "src/compiler/translator/tree_ops/RemoveAtomicCounterBuiltins.cpp",
        "src/compiler/translator/tree_ops/RemoveDynamicIndexing.cpp",
        "src/compiler/translator/tree_ops/RemoveInactiveInterfaceVariables.cpp",
        "src/compiler/translator/tree_ops/RemoveInvariantDeclaration.cpp",
        "src/compiler/translator/tree_ops/RemovePow.cpp",
        "src/compiler/translator/tree_ops/RemoveUnreferencedVariables.cpp",
        "src/compiler/translator/tree_ops/RewriteAtomicCounters.cpp",
        "src/compiler/translator/tree_ops/RewriteAtomicFunctionExpressions.cpp",
        "src/compiler/translator/tree_ops/RewriteCubeMapSamplersAs2DArray.cpp",
        "src/compiler/translator/tree_ops/RewriteDfdy.cpp",
        "src/compiler/translator/tree_ops/RewriteDoWhile.cpp",
        "src/compiler/translator/tree_ops/RewriteExpressionsWithShaderStorageBlock.cpp",
        "src/compiler/translator/tree_ops/RewriteRepeatedAssignToSwizzled.cpp",
        "src/compiler/translator/tree_ops/RewriteRowMajorMatrices.cpp",
        "src/compiler/translator/tree_ops/RewriteStructSamplers.cpp",
        "src/compiler/translator/tree_ops/RewriteStructSamplersOld.cpp",
        "src/compiler/translator/tree_ops/RewriteTexelFetchOffset.cpp",
        "src/compiler/translator/tree_ops/RewriteUnaryMinusOperatorFloat.cpp",
        "src/compiler/translator/tree_ops/RewriteUnaryMinusOperatorInt.cpp",
        "src/compiler/translator/tree_ops/ScalarizeVecAndMatConstructorArgs.cpp",
        "src/compiler/translator/tree_ops/SeparateDeclarations.cpp",
        "src/compiler/translator/tree_ops/SimplifyLoopConditions.cpp",
        "src/compiler/translator/tree_ops/SplitSequenceOperator.cpp",
        "src/compiler/translator/tree_ops/UnfoldShortCircuitAST.cpp",
        "src/compiler/translator/tree_ops/UseInterfaceBlockFields.cpp",
        "src/compiler/translator/tree_ops/VectorizeVectorScalarArithmetic.cpp",
        "src/compiler/translator/tree_util/FindFunction.cpp",
        "src/compiler/translator/tree_util/FindMain.cpp",
        "src/compiler/translator/tree_util/FindSymbolNode.cpp",
        "src/compiler/translator/tree_util/IntermNodePatternMatcher.cpp",
        "src/compiler/translator/tree_util/IntermNode_util.cpp",
        "src/compiler/translator/tree_util/IntermTraverse.cpp",
        "src/compiler/translator/tree_util/ReplaceClipDistanceVariable.cpp",
        "src/compiler/translator/tree_util/ReplaceShadowingVariables.cpp",
        "src/compiler/translator/tree_util/ReplaceVariable.cpp",
        "src/compiler/translator/tree_util/RunAtTheEndOfShader.cpp",
        "src/compiler/translator/util.cpp",
        "src/third_party/compiler/ArrayBoundsClamper.cpp",
        "src/compiler/translator/OutputESSL.cpp",
        "src/compiler/translator/TranslatorESSL.cpp",
        "src/compiler/translator/BuiltInFunctionEmulatorGLSL.cpp",
        "src/compiler/translator/BuiltinsWorkaroundGLSL.cpp",
        "src/compiler/translator/ExtensionGLSL.cpp",
        "src/compiler/translator/OutputGLSL.cpp",
        "src/compiler/translator/OutputGLSLBase.cpp",
        "src/compiler/translator/TranslatorGLSL.cpp",
        "src/compiler/translator/VersionGLSL.cpp",
        "src/compiler/translator/emulated_builtin_functions_hlsl_autogen.cpp",
        "src/compiler/translator/tree_ops/AddDefaultReturnStatements.cpp",
        "src/compiler/translator/tree_ops/ArrayReturnValueToOutParameter.cpp",
        "src/compiler/translator/tree_ops/RemoveSwitchFallThrough.cpp",
        "src/compiler/translator/tree_ops/RewriteElseBlocks.cpp",
        "src/compiler/translator/tree_ops/SeparateArrayConstructorStatements.cpp",
        "src/compiler/translator/tree_ops/SeparateArrayInitialization.cpp",
        "src/compiler/translator/tree_ops/SeparateExpressionsReturningArrays.cpp",
        "src/compiler/translator/tree_ops/UnfoldShortCircuitToIf.cpp",
        "src/compiler/translator/tree_ops/WrapSwitchStatementsInBlocks.cpp",
        "src/compiler/translator/OutputVulkanGLSL.cpp",
        "src/compiler/translator/TranslatorVulkan.cpp",
        "src/compiler/translator/ImmutableString_autogen.cpp",
        "src/compiler/translator/SymbolTable_autogen.cpp",
        "src/compiler/preprocessor/DiagnosticsBase.cpp",
        "src/compiler/preprocessor/DirectiveHandlerBase.cpp",
        "src/compiler/preprocessor/DirectiveParser.cpp",
        "src/compiler/preprocessor/Input.cpp",
        "src/compiler/preprocessor/Lexer.cpp",
        "src/compiler/preprocessor/Macro.cpp",
        "src/compiler/preprocessor/MacroExpander.cpp",
        "src/compiler/preprocessor/Preprocessor.cpp",
        "src/compiler/preprocessor/Token.cpp",
        "src/compiler/preprocessor/preprocessor_lex_autogen.cpp",
        "src/compiler/preprocessor/preprocessor_tab_autogen.cpp",
        "src/libShaderTranslator/libShaderTranslator.cpp",
    ],
    //include_dirs: [ "src", ],
    export_include_dirs: [
        "include",
        "src",
        "src/common/third_party/base",
        "src/libShaderTranslator",
    ],
    static_libs: [
        "gfxstream_angle_common",
    ],
}

cc_library_static {
    name: "gfxstream_angle_stub",
    defaults: ["gfxstream_defaults"],
    srcs: [
        "gfxstreamAngleShaderTranslatorStub.cpp",
    ],
    export_include_dirs: [ "src/libShaderTranslator", ],
}
