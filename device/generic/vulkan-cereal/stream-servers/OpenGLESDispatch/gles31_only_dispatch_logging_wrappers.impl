// Auto-generated with: android/scripts/gen-entries.py --mode=dispatch_logging_wrappers stream-servers/OpenGLESDispatch/gles31_only.entries --output=stream-servers/OpenGLESDispatch/gles31_only_dispatch_logging_wrappers.impl
// DO NOT EDIT THIS FILE

void glGetBooleani_v_dispatchLoggingWrapper(GLenum target, GLuint index, GLboolean * data) {
	DISPATCH_DEBUG_LOG("glGetBooleani_v(target:0x%X, index:%d, data:%p)", target, index, data);
	GLDispatch::glGetBooleani_v_underlying(target, index, data);
}

void glMemoryBarrier_dispatchLoggingWrapper(GLbitfield barriers) {
	DISPATCH_DEBUG_LOG("glMemoryBarrier(barriers:%d)", barriers);
	GLDispatch::glMemoryBarrier_underlying(barriers);
}

void glMemoryBarrierByRegion_dispatchLoggingWrapper(GLbitfield barriers) {
	DISPATCH_DEBUG_LOG("glMemoryBarrierByRegion(barriers:%d)", barriers);
	GLDispatch::glMemoryBarrierByRegion_underlying(barriers);
}

void glGenProgramPipelines_dispatchLoggingWrapper(GLsizei n, GLuint * pipelines) {
	DISPATCH_DEBUG_LOG("glGenProgramPipelines(n:%d, pipelines:%p)", n, pipelines);
	GLDispatch::glGenProgramPipelines_underlying(n, pipelines);
}

void glDeleteProgramPipelines_dispatchLoggingWrapper(GLsizei n, const GLuint * pipelines) {
	DISPATCH_DEBUG_LOG("glDeleteProgramPipelines(n:%d, pipelines:%p)", n, pipelines);
	GLDispatch::glDeleteProgramPipelines_underlying(n, pipelines);
}

void glBindProgramPipeline_dispatchLoggingWrapper(GLuint pipeline) {
	DISPATCH_DEBUG_LOG("glBindProgramPipeline(pipeline:%d)", pipeline);
	GLDispatch::glBindProgramPipeline_underlying(pipeline);
}

void glGetProgramPipelineiv_dispatchLoggingWrapper(GLuint pipeline, GLenum pname, GLint * params) {
	DISPATCH_DEBUG_LOG("glGetProgramPipelineiv(pipeline:%d, pname:0x%X, params:%p)", pipeline, pname, params);
	GLDispatch::glGetProgramPipelineiv_underlying(pipeline, pname, params);
}

void glGetProgramPipelineInfoLog_dispatchLoggingWrapper(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog) {
	DISPATCH_DEBUG_LOG("glGetProgramPipelineInfoLog(pipeline:%d, bufSize:%d, length:%p, infoLog:%p)", pipeline, bufSize, length, infoLog);
	GLDispatch::glGetProgramPipelineInfoLog_underlying(pipeline, bufSize, length, infoLog);
}

void glValidateProgramPipeline_dispatchLoggingWrapper(GLuint pipeline) {
	DISPATCH_DEBUG_LOG("glValidateProgramPipeline(pipeline:%d)", pipeline);
	GLDispatch::glValidateProgramPipeline_underlying(pipeline);
}

GLboolean glIsProgramPipeline_dispatchLoggingWrapper(GLuint pipeline) {
	DISPATCH_DEBUG_LOG("glIsProgramPipeline(pipeline:%d)", pipeline);
	return GLDispatch::glIsProgramPipeline_underlying(pipeline);
}

void glUseProgramStages_dispatchLoggingWrapper(GLuint pipeline, GLbitfield stages, GLuint program) {
	DISPATCH_DEBUG_LOG("glUseProgramStages(pipeline:%d, stages:%d, program:%d)", pipeline, stages, program);
	GLDispatch::glUseProgramStages_underlying(pipeline, stages, program);
}

void glActiveShaderProgram_dispatchLoggingWrapper(GLuint pipeline, GLuint program) {
	DISPATCH_DEBUG_LOG("glActiveShaderProgram(pipeline:%d, program:%d)", pipeline, program);
	GLDispatch::glActiveShaderProgram_underlying(pipeline, program);
}

GLuint glCreateShaderProgramv_dispatchLoggingWrapper(GLenum type, GLsizei count, const char ** strings) {
	DISPATCH_DEBUG_LOG("glCreateShaderProgramv(type:0x%X, count:%d, strings:%p)", type, count, strings);
	return GLDispatch::glCreateShaderProgramv_underlying(type, count, strings);
}

void glProgramUniform1f_dispatchLoggingWrapper(GLuint program, GLint location, GLfloat v0) {
	DISPATCH_DEBUG_LOG("glProgramUniform1f(program:%d, location:%d, v0:%f)", program, location, v0);
	GLDispatch::glProgramUniform1f_underlying(program, location, v0);
}

void glProgramUniform2f_dispatchLoggingWrapper(GLuint program, GLint location, GLfloat v0, GLfloat v1) {
	DISPATCH_DEBUG_LOG("glProgramUniform2f(program:%d, location:%d, v0:%f, v1:%f)", program, location, v0, v1);
	GLDispatch::glProgramUniform2f_underlying(program, location, v0, v1);
}

void glProgramUniform3f_dispatchLoggingWrapper(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2) {
	DISPATCH_DEBUG_LOG("glProgramUniform3f(program:%d, location:%d, v0:%f, v1:%f, v2:%f)", program, location, v0, v1, v2);
	GLDispatch::glProgramUniform3f_underlying(program, location, v0, v1, v2);
}

void glProgramUniform4f_dispatchLoggingWrapper(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3) {
	DISPATCH_DEBUG_LOG("glProgramUniform4f(program:%d, location:%d, v0:%f, v1:%f, v2:%f, v3:%f)", program, location, v0, v1, v2, v3);
	GLDispatch::glProgramUniform4f_underlying(program, location, v0, v1, v2, v3);
}

void glProgramUniform1i_dispatchLoggingWrapper(GLuint program, GLint location, GLint v0) {
	DISPATCH_DEBUG_LOG("glProgramUniform1i(program:%d, location:%d, v0:%d)", program, location, v0);
	GLDispatch::glProgramUniform1i_underlying(program, location, v0);
}

void glProgramUniform2i_dispatchLoggingWrapper(GLuint program, GLint location, GLint v0, GLint v1) {
	DISPATCH_DEBUG_LOG("glProgramUniform2i(program:%d, location:%d, v0:%d, v1:%d)", program, location, v0, v1);
	GLDispatch::glProgramUniform2i_underlying(program, location, v0, v1);
}

void glProgramUniform3i_dispatchLoggingWrapper(GLuint program, GLint location, GLint v0, GLint v1, GLint v2) {
	DISPATCH_DEBUG_LOG("glProgramUniform3i(program:%d, location:%d, v0:%d, v1:%d, v2:%d)", program, location, v0, v1, v2);
	GLDispatch::glProgramUniform3i_underlying(program, location, v0, v1, v2);
}

void glProgramUniform4i_dispatchLoggingWrapper(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3) {
	DISPATCH_DEBUG_LOG("glProgramUniform4i(program:%d, location:%d, v0:%d, v1:%d, v2:%d, v3:%d)", program, location, v0, v1, v2, v3);
	GLDispatch::glProgramUniform4i_underlying(program, location, v0, v1, v2, v3);
}

void glProgramUniform1ui_dispatchLoggingWrapper(GLuint program, GLint location, GLuint v0) {
	DISPATCH_DEBUG_LOG("glProgramUniform1ui(program:%d, location:%d, v0:%d)", program, location, v0);
	GLDispatch::glProgramUniform1ui_underlying(program, location, v0);
}

void glProgramUniform2ui_dispatchLoggingWrapper(GLuint program, GLint location, GLint v0, GLuint v1) {
	DISPATCH_DEBUG_LOG("glProgramUniform2ui(program:%d, location:%d, v0:%d, v1:%d)", program, location, v0, v1);
	GLDispatch::glProgramUniform2ui_underlying(program, location, v0, v1);
}

void glProgramUniform3ui_dispatchLoggingWrapper(GLuint program, GLint location, GLint v0, GLint v1, GLuint v2) {
	DISPATCH_DEBUG_LOG("glProgramUniform3ui(program:%d, location:%d, v0:%d, v1:%d, v2:%d)", program, location, v0, v1, v2);
	GLDispatch::glProgramUniform3ui_underlying(program, location, v0, v1, v2);
}

void glProgramUniform4ui_dispatchLoggingWrapper(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLuint v3) {
	DISPATCH_DEBUG_LOG("glProgramUniform4ui(program:%d, location:%d, v0:%d, v1:%d, v2:%d, v3:%d)", program, location, v0, v1, v2, v3);
	GLDispatch::glProgramUniform4ui_underlying(program, location, v0, v1, v2, v3);
}

void glProgramUniform1fv_dispatchLoggingWrapper(GLuint program, GLint location, GLsizei count, const GLfloat * value) {
	DISPATCH_DEBUG_LOG("glProgramUniform1fv(program:%d, location:%d, count:%d, value:%p)", program, location, count, value);
	GLDispatch::glProgramUniform1fv_underlying(program, location, count, value);
}

void glProgramUniform2fv_dispatchLoggingWrapper(GLuint program, GLint location, GLsizei count, const GLfloat * value) {
	DISPATCH_DEBUG_LOG("glProgramUniform2fv(program:%d, location:%d, count:%d, value:%p)", program, location, count, value);
	GLDispatch::glProgramUniform2fv_underlying(program, location, count, value);
}

void glProgramUniform3fv_dispatchLoggingWrapper(GLuint program, GLint location, GLsizei count, const GLfloat * value) {
	DISPATCH_DEBUG_LOG("glProgramUniform3fv(program:%d, location:%d, count:%d, value:%p)", program, location, count, value);
	GLDispatch::glProgramUniform3fv_underlying(program, location, count, value);
}

void glProgramUniform4fv_dispatchLoggingWrapper(GLuint program, GLint location, GLsizei count, const GLfloat * value) {
	DISPATCH_DEBUG_LOG("glProgramUniform4fv(program:%d, location:%d, count:%d, value:%p)", program, location, count, value);
	GLDispatch::glProgramUniform4fv_underlying(program, location, count, value);
}

void glProgramUniform1iv_dispatchLoggingWrapper(GLuint program, GLint location, GLsizei count, const GLint * value) {
	DISPATCH_DEBUG_LOG("glProgramUniform1iv(program:%d, location:%d, count:%d, value:%p)", program, location, count, value);
	GLDispatch::glProgramUniform1iv_underlying(program, location, count, value);
}

void glProgramUniform2iv_dispatchLoggingWrapper(GLuint program, GLint location, GLsizei count, const GLint * value) {
	DISPATCH_DEBUG_LOG("glProgramUniform2iv(program:%d, location:%d, count:%d, value:%p)", program, location, count, value);
	GLDispatch::glProgramUniform2iv_underlying(program, location, count, value);
}

void glProgramUniform3iv_dispatchLoggingWrapper(GLuint program, GLint location, GLsizei count, const GLint * value) {
	DISPATCH_DEBUG_LOG("glProgramUniform3iv(program:%d, location:%d, count:%d, value:%p)", program, location, count, value);
	GLDispatch::glProgramUniform3iv_underlying(program, location, count, value);
}

void glProgramUniform4iv_dispatchLoggingWrapper(GLuint program, GLint location, GLsizei count, const GLint * value) {
	DISPATCH_DEBUG_LOG("glProgramUniform4iv(program:%d, location:%d, count:%d, value:%p)", program, location, count, value);
	GLDispatch::glProgramUniform4iv_underlying(program, location, count, value);
}

void glProgramUniform1uiv_dispatchLoggingWrapper(GLuint program, GLint location, GLsizei count, const GLuint * value) {
	DISPATCH_DEBUG_LOG("glProgramUniform1uiv(program:%d, location:%d, count:%d, value:%p)", program, location, count, value);
	GLDispatch::glProgramUniform1uiv_underlying(program, location, count, value);
}

void glProgramUniform2uiv_dispatchLoggingWrapper(GLuint program, GLint location, GLsizei count, const GLuint * value) {
	DISPATCH_DEBUG_LOG("glProgramUniform2uiv(program:%d, location:%d, count:%d, value:%p)", program, location, count, value);
	GLDispatch::glProgramUniform2uiv_underlying(program, location, count, value);
}

void glProgramUniform3uiv_dispatchLoggingWrapper(GLuint program, GLint location, GLsizei count, const GLuint * value) {
	DISPATCH_DEBUG_LOG("glProgramUniform3uiv(program:%d, location:%d, count:%d, value:%p)", program, location, count, value);
	GLDispatch::glProgramUniform3uiv_underlying(program, location, count, value);
}

void glProgramUniform4uiv_dispatchLoggingWrapper(GLuint program, GLint location, GLsizei count, const GLuint * value) {
	DISPATCH_DEBUG_LOG("glProgramUniform4uiv(program:%d, location:%d, count:%d, value:%p)", program, location, count, value);
	GLDispatch::glProgramUniform4uiv_underlying(program, location, count, value);
}

void glProgramUniformMatrix2fv_dispatchLoggingWrapper(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
	DISPATCH_DEBUG_LOG("glProgramUniformMatrix2fv(program:%d, location:%d, count:%d, transpose:%d, value:%p)", program, location, count, transpose, value);
	GLDispatch::glProgramUniformMatrix2fv_underlying(program, location, count, transpose, value);
}

void glProgramUniformMatrix3fv_dispatchLoggingWrapper(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
	DISPATCH_DEBUG_LOG("glProgramUniformMatrix3fv(program:%d, location:%d, count:%d, transpose:%d, value:%p)", program, location, count, transpose, value);
	GLDispatch::glProgramUniformMatrix3fv_underlying(program, location, count, transpose, value);
}

void glProgramUniformMatrix4fv_dispatchLoggingWrapper(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
	DISPATCH_DEBUG_LOG("glProgramUniformMatrix4fv(program:%d, location:%d, count:%d, transpose:%d, value:%p)", program, location, count, transpose, value);
	GLDispatch::glProgramUniformMatrix4fv_underlying(program, location, count, transpose, value);
}

void glProgramUniformMatrix2x3fv_dispatchLoggingWrapper(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
	DISPATCH_DEBUG_LOG("glProgramUniformMatrix2x3fv(program:%d, location:%d, count:%d, transpose:%d, value:%p)", program, location, count, transpose, value);
	GLDispatch::glProgramUniformMatrix2x3fv_underlying(program, location, count, transpose, value);
}

void glProgramUniformMatrix3x2fv_dispatchLoggingWrapper(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
	DISPATCH_DEBUG_LOG("glProgramUniformMatrix3x2fv(program:%d, location:%d, count:%d, transpose:%d, value:%p)", program, location, count, transpose, value);
	GLDispatch::glProgramUniformMatrix3x2fv_underlying(program, location, count, transpose, value);
}

void glProgramUniformMatrix2x4fv_dispatchLoggingWrapper(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
	DISPATCH_DEBUG_LOG("glProgramUniformMatrix2x4fv(program:%d, location:%d, count:%d, transpose:%d, value:%p)", program, location, count, transpose, value);
	GLDispatch::glProgramUniformMatrix2x4fv_underlying(program, location, count, transpose, value);
}

void glProgramUniformMatrix4x2fv_dispatchLoggingWrapper(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
	DISPATCH_DEBUG_LOG("glProgramUniformMatrix4x2fv(program:%d, location:%d, count:%d, transpose:%d, value:%p)", program, location, count, transpose, value);
	GLDispatch::glProgramUniformMatrix4x2fv_underlying(program, location, count, transpose, value);
}

void glProgramUniformMatrix3x4fv_dispatchLoggingWrapper(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
	DISPATCH_DEBUG_LOG("glProgramUniformMatrix3x4fv(program:%d, location:%d, count:%d, transpose:%d, value:%p)", program, location, count, transpose, value);
	GLDispatch::glProgramUniformMatrix3x4fv_underlying(program, location, count, transpose, value);
}

void glProgramUniformMatrix4x3fv_dispatchLoggingWrapper(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value) {
	DISPATCH_DEBUG_LOG("glProgramUniformMatrix4x3fv(program:%d, location:%d, count:%d, transpose:%d, value:%p)", program, location, count, transpose, value);
	GLDispatch::glProgramUniformMatrix4x3fv_underlying(program, location, count, transpose, value);
}

void glGetProgramInterfaceiv_dispatchLoggingWrapper(GLuint program, GLenum programInterface, GLenum pname, GLint * params) {
	DISPATCH_DEBUG_LOG("glGetProgramInterfaceiv(program:%d, programInterface:0x%X, pname:0x%X, params:%p)", program, programInterface, pname, params);
	GLDispatch::glGetProgramInterfaceiv_underlying(program, programInterface, pname, params);
}

void glGetProgramResourceiv_dispatchLoggingWrapper(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei bufSize, GLsizei * length, GLint * params) {
	DISPATCH_DEBUG_LOG("glGetProgramResourceiv(program:%d, programInterface:0x%X, index:%d, propCount:%d, props:%p, bufSize:%d, length:%p, params:%p)", program, programInterface, index, propCount, props, bufSize, length, params);
	GLDispatch::glGetProgramResourceiv_underlying(program, programInterface, index, propCount, props, bufSize, length, params);
}

GLuint glGetProgramResourceIndex_dispatchLoggingWrapper(GLuint program, GLenum programInterface, const char * name) {
	DISPATCH_DEBUG_LOG("glGetProgramResourceIndex(program:%d, programInterface:0x%X, name:%p)", program, programInterface, name);
	return GLDispatch::glGetProgramResourceIndex_underlying(program, programInterface, name);
}

GLint glGetProgramResourceLocation_dispatchLoggingWrapper(GLuint program, GLenum programInterface, const char * name) {
	DISPATCH_DEBUG_LOG("glGetProgramResourceLocation(program:%d, programInterface:0x%X, name:%p)", program, programInterface, name);
	return GLDispatch::glGetProgramResourceLocation_underlying(program, programInterface, name);
}

void glGetProgramResourceName_dispatchLoggingWrapper(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, char * name) {
	DISPATCH_DEBUG_LOG("glGetProgramResourceName(program:%d, programInterface:0x%X, index:%d, bufSize:%d, length:%p, name:%p)", program, programInterface, index, bufSize, length, name);
	GLDispatch::glGetProgramResourceName_underlying(program, programInterface, index, bufSize, length, name);
}

void glBindImageTexture_dispatchLoggingWrapper(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format) {
	DISPATCH_DEBUG_LOG("glBindImageTexture(unit:%d, texture:%d, level:%d, layered:%d, layer:%d, access:0x%X, format:0x%X)", unit, texture, level, layered, layer, access, format);
	GLDispatch::glBindImageTexture_underlying(unit, texture, level, layered, layer, access, format);
}

void glDispatchCompute_dispatchLoggingWrapper(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z) {
	DISPATCH_DEBUG_LOG("glDispatchCompute(num_groups_x:%d, num_groups_y:%d, num_groups_z:%d)", num_groups_x, num_groups_y, num_groups_z);
	GLDispatch::glDispatchCompute_underlying(num_groups_x, num_groups_y, num_groups_z);
}

void glDispatchComputeIndirect_dispatchLoggingWrapper(GLintptr indirect) {
	DISPATCH_DEBUG_LOG("glDispatchComputeIndirect(indirect:%ld)", indirect);
	GLDispatch::glDispatchComputeIndirect_underlying(indirect);
}

void glBindVertexBuffer_dispatchLoggingWrapper(GLuint bindingindex, GLuint buffer, GLintptr offset, GLintptr stride) {
	DISPATCH_DEBUG_LOG("glBindVertexBuffer(bindingindex:%d, buffer:%d, offset:%ld, stride:%ld)", bindingindex, buffer, offset, stride);
	GLDispatch::glBindVertexBuffer_underlying(bindingindex, buffer, offset, stride);
}

void glVertexAttribBinding_dispatchLoggingWrapper(GLuint attribindex, GLuint bindingindex) {
	DISPATCH_DEBUG_LOG("glVertexAttribBinding(attribindex:%d, bindingindex:%d)", attribindex, bindingindex);
	GLDispatch::glVertexAttribBinding_underlying(attribindex, bindingindex);
}

void glVertexAttribFormat_dispatchLoggingWrapper(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset) {
	DISPATCH_DEBUG_LOG("glVertexAttribFormat(attribindex:%d, size:%d, type:0x%X, normalized:%d, relativeoffset:%d)", attribindex, size, type, normalized, relativeoffset);
	GLDispatch::glVertexAttribFormat_underlying(attribindex, size, type, normalized, relativeoffset);
}

void glVertexAttribIFormat_dispatchLoggingWrapper(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset) {
	DISPATCH_DEBUG_LOG("glVertexAttribIFormat(attribindex:%d, size:%d, type:0x%X, relativeoffset:%d)", attribindex, size, type, relativeoffset);
	GLDispatch::glVertexAttribIFormat_underlying(attribindex, size, type, relativeoffset);
}

void glVertexBindingDivisor_dispatchLoggingWrapper(GLuint bindingindex, GLuint divisor) {
	DISPATCH_DEBUG_LOG("glVertexBindingDivisor(bindingindex:%d, divisor:%d)", bindingindex, divisor);
	GLDispatch::glVertexBindingDivisor_underlying(bindingindex, divisor);
}

void glDrawArraysIndirect_dispatchLoggingWrapper(GLenum mode, const void * indirect) {
	DISPATCH_DEBUG_LOG("glDrawArraysIndirect(mode:0x%X, indirect:%p)", mode, indirect);
	GLDispatch::glDrawArraysIndirect_underlying(mode, indirect);
}

void glDrawElementsIndirect_dispatchLoggingWrapper(GLenum mode, GLenum type, const void * indirect) {
	DISPATCH_DEBUG_LOG("glDrawElementsIndirect(mode:0x%X, type:0x%X, indirect:%p)", mode, type, indirect);
	GLDispatch::glDrawElementsIndirect_underlying(mode, type, indirect);
}

void glTexStorage2DMultisample_dispatchLoggingWrapper(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations) {
	DISPATCH_DEBUG_LOG("glTexStorage2DMultisample(target:0x%X, samples:%d, internalformat:0x%X, width:%d, height:%d, fixedsamplelocations:%d)", target, samples, internalformat, width, height, fixedsamplelocations);
	GLDispatch::glTexStorage2DMultisample_underlying(target, samples, internalformat, width, height, fixedsamplelocations);
}

void glSampleMaski_dispatchLoggingWrapper(GLuint maskNumber, GLbitfield mask) {
	DISPATCH_DEBUG_LOG("glSampleMaski(maskNumber:%d, mask:%d)", maskNumber, mask);
	GLDispatch::glSampleMaski_underlying(maskNumber, mask);
}

void glGetMultisamplefv_dispatchLoggingWrapper(GLenum pname, GLuint index, GLfloat * val) {
	DISPATCH_DEBUG_LOG("glGetMultisamplefv(pname:0x%X, index:%d, val:%p)", pname, index, val);
	GLDispatch::glGetMultisamplefv_underlying(pname, index, val);
}

void glFramebufferParameteri_dispatchLoggingWrapper(GLenum target, GLenum pname, GLint param) {
	DISPATCH_DEBUG_LOG("glFramebufferParameteri(target:0x%X, pname:0x%X, param:%d)", target, pname, param);
	GLDispatch::glFramebufferParameteri_underlying(target, pname, param);
}

void glGetFramebufferParameteriv_dispatchLoggingWrapper(GLenum target, GLenum pname, GLint * params) {
	DISPATCH_DEBUG_LOG("glGetFramebufferParameteriv(target:0x%X, pname:0x%X, params:%p)", target, pname, params);
	GLDispatch::glGetFramebufferParameteriv_underlying(target, pname, params);
}

