// Auto-generated with: android/scripts/gen-entries.py --mode=dispatch_logging_wrappers stream-servers/OpenGLESDispatch/gles32_only.entries --output=stream-servers/OpenGLESDispatch/gles32_only_dispatch_logging_wrappers.impl
// DO NOT EDIT THIS FILE

void glDebugMessageControl_dispatchLoggingWrapper(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) {
	DISPATCH_DEBUG_LOG("glDebugMessageControl(source:0x%X, type:0x%X, severity:0x%X, count:%d, ids:%p, enabled:%d)", source, type, severity, count, ids, enabled);
	GLDispatch::glDebugMessageControl_underlying(source, type, severity, count, ids, enabled);
}

void glDebugMessageInsert_dispatchLoggingWrapper(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf) {
	DISPATCH_DEBUG_LOG("glDebugMessageInsert(source:0x%X, type:0x%X, id:%d, severity:0x%X, length:%d, buf:%p)", source, type, id, severity, length, buf);
	GLDispatch::glDebugMessageInsert_underlying(source, type, id, severity, length, buf);
}

void glDebugMessageCallback_dispatchLoggingWrapper(GLDEBUGPROC callback, const void * userParam) {
	DISPATCH_DEBUG_LOG("glDebugMessageCallback(callback:%p, userParam:%p)", callback, userParam);
	GLDispatch::glDebugMessageCallback_underlying(callback, userParam);
}

GLuint glGetDebugMessageLog_dispatchLoggingWrapper(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog) {
	DISPATCH_DEBUG_LOG("glGetDebugMessageLog(count:%d, bufSize:%d, sources:%p, types:%p, ids:%p, severities:%p, lengths:%p, messageLog:%p)", count, bufSize, sources, types, ids, severities, lengths, messageLog);
	return GLDispatch::glGetDebugMessageLog_underlying(count, bufSize, sources, types, ids, severities, lengths, messageLog);
}

void glPushDebugGroup_dispatchLoggingWrapper(GLenum source, GLuint id, GLsizei length, const GLchar* message) {
	DISPATCH_DEBUG_LOG("glPushDebugGroup(source:0x%X, id:%d, length:%d, message:%p)", source, id, length, message);
	GLDispatch::glPushDebugGroup_underlying(source, id, length, message);
}

void glPopDebugGroup_dispatchLoggingWrapper() {
	DISPATCH_DEBUG_LOG("glPopDebugGroup()");
	GLDispatch::glPopDebugGroup_underlying();
}

