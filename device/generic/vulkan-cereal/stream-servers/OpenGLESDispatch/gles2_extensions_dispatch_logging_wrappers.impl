// Auto-generated with: android/scripts/gen-entries.py --mode=dispatch_logging_wrappers stream-servers/OpenGLESDispatch/gles2_extensions.entries --output=stream-servers/OpenGLESDispatch/gles2_extensions_dispatch_logging_wrappers.impl
// DO NOT EDIT THIS FILE

void glGetShaderPrecisionFormat_dispatchLoggingWrapper(GLenum shadertype, GLenum precisiontype, GLint* range, GLint* precision) {
	DISPATCH_DEBUG_LOG("glGetShaderPrecisionFormat(shadertype:0x%X, precisiontype:0x%X, range:%p, precision:%p)", shadertype, precisiontype, range, precision);
	GLDispatch::glGetShaderPrecisionFormat_underlying(shadertype, precisiontype, range, precision);
}

void glReleaseShaderCompiler_dispatchLoggingWrapper() {
	DISPATCH_DEBUG_LOG("glReleaseShaderCompiler()");
	GLDispatch::glReleaseShaderCompiler_underlying();
}

void glShaderBinary_dispatchLoggingWrapper(GLsizei n, const GLuint* shaders, GLenum binaryformat, const GLvoid* binary, GLsizei length) {
	DISPATCH_DEBUG_LOG("glShaderBinary(n:%d, shaders:%p, binaryformat:0x%X, binary:%p, length:%d)", n, shaders, binaryformat, binary, length);
	GLDispatch::glShaderBinary_underlying(n, shaders, binaryformat, binary, length);
}

void glVertexAttribPointerWithDataSize_dispatchLoggingWrapper(GLuint indx, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid* ptr, GLsizei dataSize) {
	DISPATCH_DEBUG_LOG("glVertexAttribPointerWithDataSize(indx:%d, size:%d, type:0x%X, normalized:%d, stride:%d, ptr:%p, dataSize:%d)", indx, size, type, normalized, stride, ptr, dataSize);
	GLDispatch::glVertexAttribPointerWithDataSize_underlying(indx, size, type, normalized, stride, ptr, dataSize);
}

void glFramebufferTexture3DOES_dispatchLoggingWrapper(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset) {
	DISPATCH_DEBUG_LOG("glFramebufferTexture3DOES(target:0x%X, attachment:0x%X, textarget:0x%X, texture:%d, level:%d, zoffset:%d)", target, attachment, textarget, texture, level, zoffset);
	GLDispatch::glFramebufferTexture3DOES_underlying(target, attachment, textarget, texture, level, zoffset);
}

void glTestHostDriverPerformance_dispatchLoggingWrapper(GLuint count, uint64_t* duration_us, uint64_t* duration_cpu_us) {
	DISPATCH_DEBUG_LOG("glTestHostDriverPerformance(count:%d, duration_us:%p, duration_cpu_us:%p)", count, duration_us, duration_cpu_us);
	GLDispatch::glTestHostDriverPerformance_underlying(count, duration_us, duration_cpu_us);
}

void glBindVertexArrayOES_dispatchLoggingWrapper(GLuint array) {
	DISPATCH_DEBUG_LOG("glBindVertexArrayOES(array:%d)", array);
	GLDispatch::glBindVertexArrayOES_underlying(array);
}

void glDeleteVertexArraysOES_dispatchLoggingWrapper(GLsizei n, const GLuint * arrays) {
	DISPATCH_DEBUG_LOG("glDeleteVertexArraysOES(n:%d, arrays:%p)", n, arrays);
	GLDispatch::glDeleteVertexArraysOES_underlying(n, arrays);
}

void glGenVertexArraysOES_dispatchLoggingWrapper(GLsizei n, GLuint * arrays) {
	DISPATCH_DEBUG_LOG("glGenVertexArraysOES(n:%d, arrays:%p)", n, arrays);
	GLDispatch::glGenVertexArraysOES_underlying(n, arrays);
}

GLboolean glIsVertexArrayOES_dispatchLoggingWrapper(GLuint array) {
	DISPATCH_DEBUG_LOG("glIsVertexArrayOES(array:%d)", array);
	return GLDispatch::glIsVertexArrayOES_underlying(array);
}

void glDebugMessageControlKHR_dispatchLoggingWrapper(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled) {
	DISPATCH_DEBUG_LOG("glDebugMessageControlKHR(source:0x%X, type:0x%X, severity:0x%X, count:%d, ids:%p, enabled:%d)", source, type, severity, count, ids, enabled);
	GLDispatch::glDebugMessageControlKHR_underlying(source, type, severity, count, ids, enabled);
}

void glDebugMessageInsertKHR_dispatchLoggingWrapper(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf) {
	DISPATCH_DEBUG_LOG("glDebugMessageInsertKHR(source:0x%X, type:0x%X, id:%d, severity:0x%X, length:%d, buf:%p)", source, type, id, severity, length, buf);
	GLDispatch::glDebugMessageInsertKHR_underlying(source, type, id, severity, length, buf);
}

void glDebugMessageCallbackKHR_dispatchLoggingWrapper(GLDEBUGPROCKHR callback, const void * userParam) {
	DISPATCH_DEBUG_LOG("glDebugMessageCallbackKHR(callback:%p, userParam:%p)", callback, userParam);
	GLDispatch::glDebugMessageCallbackKHR_underlying(callback, userParam);
}

GLuint glGetDebugMessageLogKHR_dispatchLoggingWrapper(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog) {
	DISPATCH_DEBUG_LOG("glGetDebugMessageLogKHR(count:%d, bufSize:%d, sources:%p, types:%p, ids:%p, severities:%p, lengths:%p, messageLog:%p)", count, bufSize, sources, types, ids, severities, lengths, messageLog);
	return GLDispatch::glGetDebugMessageLogKHR_underlying(count, bufSize, sources, types, ids, severities, lengths, messageLog);
}

void glPushDebugGroupKHR_dispatchLoggingWrapper(GLenum source, GLuint id, GLsizei length, const GLchar* message) {
	DISPATCH_DEBUG_LOG("glPushDebugGroupKHR(source:0x%X, id:%d, length:%d, message:%p)", source, id, length, message);
	GLDispatch::glPushDebugGroupKHR_underlying(source, id, length, message);
}

void glPopDebugGroupKHR_dispatchLoggingWrapper() {
	DISPATCH_DEBUG_LOG("glPopDebugGroupKHR()");
	GLDispatch::glPopDebugGroupKHR_underlying();
}

