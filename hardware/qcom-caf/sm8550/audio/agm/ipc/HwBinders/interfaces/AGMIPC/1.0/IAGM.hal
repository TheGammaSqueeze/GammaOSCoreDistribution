/*
 * Copyright (c) 2019, 2021 The Linux Foundation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials provided
 *       with the distribution.
 *     * Neither the name of The Linux Foundation nor the names of its
 *       contributors may be used to endorse or promote products derived
 *       from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
 * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Changes from Qualcomm Innovation Center are provided under the following license:
 * Copyright (c) 2022 Qualcomm Innovation Center, Inc. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted (subject to the limitations in the
 * disclaimer below) provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *
 *     * Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials provided
 *       with the distribution.
 *
 *     * Neither the name of Qualcomm Innovation Center, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived
 *       from this software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
 * GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
 * HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
 * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package vendor.qti.hardware.AGMIPC@1.0;

import IAGMCallback;

interface IAGM
{
    ipc_agm_init()  generates (int32_t ret);
    ipc_agm_deinit() generates (int32_t ret);
    ipc_agm_dump(vec<AgmDumpInfo> dump_info) generates (int32_t ret);
    ipc_agm_aif_set_media_config(uint32_t aif_id,
                    vec<AgmMediaConfig> media_config) generates (int32_t ret);
    ipc_agm_aif_set_metadata(uint32_t aif_id, uint32_t size, vec<uint8_t> metadata)
                    generates (int32_t ret);
    ipc_agm_session_set_metadata(uint32_t session_id, uint32_t size,
                    vec<uint8_t> metadata)  generates (int32_t ret);
    ipc_agm_session_aif_set_metadata(uint32_t session_id,
                    uint32_t aif_id, uint32_t size, vec<uint8_t> metadata)
                    generates (int32_t ret);
    ipc_agm_session_aif_connect(uint32_t session_id,
                    uint32_t aif_id, bool state)  generates (int32_t ret);
    ipc_agm_session_aif_get_tag_module_info(uint32_t session_id,
                    uint32_t aif_id, uint32_t size)
                    generates (int32_t ret, vec<uint8_t> payload_ret,
                               uint32_t size_ret);
    ipc_agm_session_get_params(uint32_t session_id,
                    uint32_t size, vec<uint8_t> buff)
                    generates (int32_t ret, vec<uint8_t> payload_ret);
    ipc_agm_aif_set_params(uint32_t aif_id,
                    vec<uint8_t> payload, uint32_t size)
                    generates (int32_t ret);
    ipc_agm_session_aif_set_params(uint32_t session_id, uint32_t aif_id,
                    vec<uint8_t> payload, uint32_t size)
                    generates (int32_t ret);
    ipc_agm_session_aif_set_cal(uint32_t session_id,
                    uint32_t aif_id, vec<AgmCalConfig> cal_config)
                    generates (int32_t ret);
    ipc_agm_session_set_params(uint32_t session_id,
                    vec<uint8_t> payload, uint32_t size)
                    generates (int32_t ret);
    ipc_agm_set_params_with_tag(uint32_t session_id, uint32_t aif_id,
                    vec<AgmTagConfig> tag_config) generates (int32_t ret);
    ipc_agm_set_params_with_tag_to_acdb(uint32_t session_id, uint32_t aif_id,
                    vec<uint8_t> payload, uint32_t size)
                    generates (int32_t ret);
    ipc_agm_set_params_to_acdb_tunnel(
                    vec<uint8_t> payload, uint32_t size)
                    generates (int32_t ret);
    ipc_agm_get_params_from_acdb_tunnel(
                    vec<uint8_t> payload, uint32_t size)
                    generates (int32_t ret, vec<uint8_t> payload_ret,
                               uint32_t size_ret);
    ipc_agm_session_register_for_events(uint32_t session_id,
                    vec<AgmEventRegCfg> evt_reg_cfg) generates (int32_t ret);
    ipc_agm_session_open(uint32_t session_id, AgmSessionMode sess_mode)
                    generates (int32_t ret, vec<uint64_t> hndl);
    ipc_agm_session_set_config(uint64_t hndl,
                    vec<AgmSessionConfig> session_config,
                    vec<AgmMediaConfig> media_config,
                    vec<AgmBufferConfig> buffer_config) generates (int32_t ret);
    ipc_agm_session_close(uint64_t hndl) generates (int32_t ret);
    ipc_agm_session_prepare(uint64_t hndl) generates (int32_t ret);
    ipc_agm_session_start(uint64_t hndl) generates (int32_t ret);
    ipc_agm_session_stop(uint64_t hndl) generates (int32_t ret);
    ipc_agm_session_pause(uint64_t hndl) generates (int32_t ret);
    ipc_agm_session_flush(uint64_t hndl) generates (int32_t ret);
    ipc_agm_session_resume(uint64_t hndl) generates (int32_t ret);
    ipc_agm_session_suspend(uint64_t hndl) generates (int32_t ret);
    ipc_agm_session_read(uint64_t hndl, uint32_t count)
                    generates (int32_t ret, vec<uint8_t> buff, uint32_t count_ret);
    ipc_agm_session_write(uint64_t hndl, vec<uint8_t> buff, uint32_t count)
                    generates (int32_t ret, uint32_t count_ret);
    ipc_agm_get_hw_processed_buff_cnt(uint64_t hndl, Direction dir)
                    generates (int32_t ret);
    ipc_agm_get_aif_info_list(uint32_t num_aif_info)
                    generates (int32_t ret, vec<AifInfo> aif_list_ret,
                               uint32_t num_aif_info_ret);
    ipc_agm_session_set_loopback(uint32_t capture_session_id,
                    uint32_t playback_session_id, bool state)
                    generates (int32_t ret);
    ipc_agm_session_set_ec_ref(uint32_t capture_session_id, uint32_t aif_id,
                    bool state) generates (int32_t ret);
    ipc_agm_client_register_callback(IAGMCallback cb)
                    generates (int32_t ret);
    ipc_agm_session_register_callback(uint32_t session_id,
                    uint32_t evt_type, uint64_t ipc_clt_data, uint64_t clt_data)
                    generates (int32_t ret);
    ipc_agm_session_eos(uint64_t hndl) generates (int32_t ret);
    ipc_agm_get_session_time(uint64_t hndl) generates (int32_t ret , uint64_t timestamp);
    ipc_agm_get_buffer_timestamp(uint32_t session_id)
                    generates (int32_t ret , uint64_t timestamp);
    ipc_agm_session_get_buf_info(uint32_t session_id, uint32_t flag)
                    generates (int32_t ret, MmapBufInfo buf_info_ret);
    ipc_agm_set_gapless_session_metadata(uint64_t hndl, AgmGaplessSilenceType type,
                    uint32_t silence)
                    generates (int32_t ret);
    ipc_agm_session_write_with_metadata(uint64_t hndl, vec<AgmBuff> buff, uint64_t consumed_size)
                    generates (int32_t ret, uint32_t consumed_size);
    ipc_agm_session_read_with_metadata(uint64_t hndl, vec<AgmBuff> buff, uint32_t captured_size)
                    generates (int32_t ret, vec<AgmBuff> buff, uint32_t captured_size);
    ipc_agm_session_set_non_tunnel_mode_config(uint64_t hndl,
                    vec<AgmSessionConfig> session_config,
                    vec<AgmMediaConfig> in_media_config,
                    vec<AgmMediaConfig> out_media_config,
                    vec<AgmBufferConfig> in_buffer_config,
                    vec<AgmBufferConfig> out_buffer_config) generates (int32_t ret);
    ipc_agm_aif_group_set_media_config(uint32_t aif_group_id,
                    vec<AgmGroupMediaConfig> media_config) generates (int32_t ret);
    ipc_agm_get_group_aif_info_list(uint32_t num_groups)
                    generates (int32_t ret, vec<AifInfo> aif_group_list_ret,
                               uint32_t num_groups_ret);
    ipc_agm_session_write_datapath_params(uint32_t session_id, vec<AgmBuff> buff)
                    generates (int32_t ret);

};
